
NucleoL476RG-Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eaec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800ec80  0800ec80  0001ec80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f254  0800f254  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f254  0800f254  0001f254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f25c  0800f25c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f25c  0800f25c  0001f25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f260  0800f260  0001f260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800f264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d84  200001f4  0800f458  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f78  0800f458  00021f78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002afda  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a08  00000000  00000000  0004b1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002128  00000000  00000000  0004fc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f40  00000000  00000000  00051d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d239  00000000  00000000  00053c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000237e1  00000000  00000000  00080ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011918b  00000000  00000000  000a468a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bd815  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4bc  00000000  00000000  001bd868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec64 	.word	0x0800ec64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800ec64 	.word	0x0800ec64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <Max31865_delay>:

#define RTD_A 3.9083e-3
#define RTD_B -5.775e-7
//#########################################################################################################################
void  Max31865_delay(uint32_t delay_ms)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  #if (_MAX31865_USE_FREERTOS == 1)
  osDelay(delay_ms);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f006 fd41 	bl	8007a7c <osDelay>
  #else
  HAL_Delay(delay_ms);
  #endif
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <Max31865_readRegisterN>:
//#########################################################################################################################
void Max31865_readRegisterN(Max31865_t *max31865,uint8_t addr, uint8_t *buffer, uint8_t n)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b088      	sub	sp, #32
 8001006:	af02      	add	r7, sp, #8
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	461a      	mov	r2, r3
 800100e:	460b      	mov	r3, r1
 8001010:	72fb      	strb	r3, [r7, #11]
 8001012:	4613      	mov	r3, r2
 8001014:	72bb      	strb	r3, [r7, #10]
  uint8_t tmp = 0xFF;
 8001016:	23ff      	movs	r3, #255	; 0xff
 8001018:	75fb      	strb	r3, [r7, #23]
	addr &= 0x7F;
 800101a:	7afb      	ldrb	r3, [r7, #11]
 800101c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001020:	b2db      	uxtb	r3, r3
 8001022:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	889b      	ldrh	r3, [r3, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	4619      	mov	r1, r3
 8001030:	f003 faea 	bl	8004608 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6898      	ldr	r0, [r3, #8]
 8001038:	f107 010b 	add.w	r1, r7, #11
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	2201      	movs	r2, #1
 8001040:	f005 f81b 	bl	800607a <HAL_SPI_Transmit>
	while (n--)
 8001044:	e00c      	b.n	8001060 <Max31865_readRegisterN+0x5e>
	{
    HAL_SPI_TransmitReceive(max31865->spi, &tmp, buffer, 1, 100);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6898      	ldr	r0, [r3, #8]
 800104a:	f107 0117 	add.w	r1, r7, #23
 800104e:	2364      	movs	r3, #100	; 0x64
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	f005 f97e 	bl	8006356 <HAL_SPI_TransmitReceive>
		buffer++;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3301      	adds	r3, #1
 800105e:	607b      	str	r3, [r7, #4]
	while (n--)
 8001060:	7abb      	ldrb	r3, [r7, #10]
 8001062:	1e5a      	subs	r2, r3, #1
 8001064:	72ba      	strb	r2, [r7, #10]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1ed      	bne.n	8001046 <Max31865_readRegisterN+0x44>
	}
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	889b      	ldrh	r3, [r3, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	f003 fac7 	bl	8004608 <HAL_GPIO_WritePin>
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <Max31865_readRegister8>:
//#########################################################################################################################
uint8_t Max31865_readRegister8(Max31865_t *max31865,uint8_t addr)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
	Max31865_readRegisterN(max31865, addr, &ret, 1);
 8001092:	f107 020f 	add.w	r2, r7, #15
 8001096:	78f9      	ldrb	r1, [r7, #3]
 8001098:	2301      	movs	r3, #1
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffb1 	bl	8001002 <Max31865_readRegisterN>
	return ret;  
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <Max31865_readRegister16>:
//#########################################################################################################################
uint16_t Max31865_readRegister16(Max31865_t *max31865,uint8_t addr)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b084      	sub	sp, #16
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	460b      	mov	r3, r1
 80010b4:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[2] = {0, 0};
 80010b6:	2300      	movs	r3, #0
 80010b8:	81bb      	strh	r3, [r7, #12]
	Max31865_readRegisterN(max31865, addr, buffer, 2);
 80010ba:	f107 020c 	add.w	r2, r7, #12
 80010be:	78f9      	ldrb	r1, [r7, #3]
 80010c0:	2302      	movs	r3, #2
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff9d 	bl	8001002 <Max31865_readRegisterN>
	uint16_t ret = buffer[0];
 80010c8:	7b3b      	ldrb	r3, [r7, #12]
 80010ca:	81fb      	strh	r3, [r7, #14]
	ret <<= 8;
 80010cc:	89fb      	ldrh	r3, [r7, #14]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	81fb      	strh	r3, [r7, #14]
	ret |=  buffer[1];
 80010d2:	7b7b      	ldrb	r3, [r7, #13]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	89fb      	ldrh	r3, [r7, #14]
 80010d8:	4313      	orrs	r3, r2
 80010da:	81fb      	strh	r3, [r7, #14]
	return ret;
 80010dc:	89fb      	ldrh	r3, [r7, #14]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <Max31865_writeRegister8>:
//#########################################################################################################################
void Max31865_writeRegister8(Max31865_t *max31865,uint8_t addr, uint8_t data)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	460b      	mov	r3, r1
 80010f0:	70fb      	strb	r3, [r7, #3]
 80010f2:	4613      	mov	r3, r2
 80010f4:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);          
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	889b      	ldrh	r3, [r3, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	4619      	mov	r1, r3
 8001102:	f003 fa81 	bl	8004608 <HAL_GPIO_WritePin>
  addr |= 0x80;
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800110c:	b2db      	uxtb	r3, r3
 800110e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);   
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6898      	ldr	r0, [r3, #8]
 8001114:	1cf9      	adds	r1, r7, #3
 8001116:	2364      	movs	r3, #100	; 0x64
 8001118:	2201      	movs	r2, #1
 800111a:	f004 ffae 	bl	800607a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(max31865->spi,&data, 1, 100);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6898      	ldr	r0, [r3, #8]
 8001122:	1cb9      	adds	r1, r7, #2
 8001124:	2364      	movs	r3, #100	; 0x64
 8001126:	2201      	movs	r2, #1
 8001128:	f004 ffa7 	bl	800607a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);          
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	889b      	ldrh	r3, [r3, #4]
 8001134:	2201      	movs	r2, #1
 8001136:	4619      	mov	r1, r3
 8001138:	f003 fa66 	bl	8004608 <HAL_GPIO_WritePin>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <Max31865_readFault>:
//#########################################################################################################################
uint8_t Max31865_readFault(Max31865_t *max31865)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  return Max31865_readRegister8(max31865, MAX31856_FAULTSTAT_REG);
 800114c:	2107      	movs	r1, #7
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ff97 	bl	8001082 <Max31865_readRegister8>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <Max31865_clearFault>:
//#########################################################################################################################
void Max31865_clearFault(Max31865_t *max31865)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b084      	sub	sp, #16
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001166:	2100      	movs	r1, #0
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff8a 	bl	8001082 <Max31865_readRegister8>
 800116e:	4603      	mov	r3, r0
 8001170:	73fb      	strb	r3, [r7, #15]
	t &= ~0x2C;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	f023 032c 	bic.w	r3, r3, #44	; 0x2c
 8001178:	73fb      	strb	r3, [r7, #15]
	t |= MAX31856_CONFIG_FAULTSTAT;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	461a      	mov	r2, r3
 8001186:	2100      	movs	r1, #0
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ffac 	bl	80010e6 <Max31865_writeRegister8>
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <Max31865_enableBias>:
//#########################################################################################################################
void Max31865_enableBias(Max31865_t *max31865, uint8_t enable)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	460b      	mov	r3, r1
 80011a0:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80011a2:	2100      	movs	r1, #0
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff6c 	bl	8001082 <Max31865_readRegister8>
 80011aa:	4603      	mov	r3, r0
 80011ac:	73fb      	strb	r3, [r7, #15]
	if (enable)
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d004      	beq.n	80011be <Max31865_enableBias+0x28>
		t |= MAX31856_CONFIG_BIAS;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e003      	b.n	80011c6 <Max31865_enableBias+0x30>
	else
		t &= ~MAX31856_CONFIG_BIAS;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011c4:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	461a      	mov	r2, r3
 80011ca:	2100      	movs	r1, #0
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff8a 	bl	80010e6 <Max31865_writeRegister8>
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <Max31865_autoConvert>:
//#########################################################################################################################
void Max31865_autoConvert(Max31865_t *max31865, uint8_t enable)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b084      	sub	sp, #16
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	460b      	mov	r3, r1
 80011e4:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80011e6:	2100      	movs	r1, #0
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff4a 	bl	8001082 <Max31865_readRegister8>
 80011ee:	4603      	mov	r3, r0
 80011f0:	73fb      	strb	r3, [r7, #15]
	if (enable)
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d004      	beq.n	8001202 <Max31865_autoConvert+0x28>
		t |= MAX31856_CONFIG_MODEAUTO;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e003      	b.n	800120a <Max31865_autoConvert+0x30>
	else
		t &= ~MAX31856_CONFIG_MODEAUTO; 
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001208:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	461a      	mov	r2, r3
 800120e:	2100      	movs	r1, #0
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff68 	bl	80010e6 <Max31865_writeRegister8>
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <Max31865_setWires>:
//#########################################################################################################################
void Max31865_setWires(Max31865_t *max31865, uint8_t numWires)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b084      	sub	sp, #16
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	460b      	mov	r3, r1
 8001228:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 800122a:	2100      	movs	r1, #0
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff28 	bl	8001082 <Max31865_readRegister8>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]
	if (numWires == 3)
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	2b03      	cmp	r3, #3
 800123a:	d104      	bne.n	8001246 <Max31865_setWires+0x28>
		t |= MAX31856_CONFIG_3WIRE;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e003      	b.n	800124e <Max31865_setWires+0x30>
	else
		t &= ~MAX31856_CONFIG_3WIRE;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	f023 0310 	bic.w	r3, r3, #16
 800124c:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	461a      	mov	r2, r3
 8001252:	2100      	movs	r1, #0
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ff46 	bl	80010e6 <Max31865_writeRegister8>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <Max31865_setFilter>:
//#########################################################################################################################
void Max31865_setFilter(Max31865_t *max31865, uint8_t filterHz)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	460b      	mov	r3, r1
 800126c:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 800126e:	2100      	movs	r1, #0
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff06 	bl	8001082 <Max31865_readRegister8>
 8001276:	4603      	mov	r3, r0
 8001278:	73fb      	strb	r3, [r7, #15]
	if (filterHz == 50)
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	2b32      	cmp	r3, #50	; 0x32
 800127e:	d104      	bne.n	800128a <Max31865_setFilter+0x28>
		t |= MAX31856_CONFIG_FILT50HZ;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e003      	b.n	8001292 <Max31865_setFilter+0x30>
	else
		t &= ~MAX31856_CONFIG_FILT50HZ;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	461a      	mov	r2, r3
 8001296:	2100      	movs	r1, #0
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff24 	bl	80010e6 <Max31865_writeRegister8>
}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <Max31865_readRTD>:
//#########################################################################################################################
uint16_t Max31865_readRTD (Max31865_t *max31865)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	Max31865_clearFault(max31865);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ff55 	bl	800115e <Max31865_clearFault>
	Max31865_enableBias(max31865, 1);
 80012b4:	2101      	movs	r1, #1
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ff6d 	bl	8001196 <Max31865_enableBias>
	Max31865_delay(10);
 80012bc:	200a      	movs	r0, #10
 80012be:	f7ff fe95 	bl	8000fec <Max31865_delay>
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80012c2:	2100      	movs	r1, #0
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff fedc 	bl	8001082 <Max31865_readRegister8>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73fb      	strb	r3, [r7, #15]
	t |= MAX31856_CONFIG_1SHOT;
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	f043 0320 	orr.w	r3, r3, #32
 80012d4:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	461a      	mov	r2, r3
 80012da:	2100      	movs	r1, #0
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff02 	bl	80010e6 <Max31865_writeRegister8>
	Max31865_delay(65);
 80012e2:	2041      	movs	r0, #65	; 0x41
 80012e4:	f7ff fe82 	bl	8000fec <Max31865_delay>
	uint16_t rtd = Max31865_readRegister16(max31865, MAX31856_RTDMSB_REG);
 80012e8:	2101      	movs	r1, #1
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fedd 	bl	80010aa <Max31865_readRegister16>
 80012f0:	4603      	mov	r3, r0
 80012f2:	81bb      	strh	r3, [r7, #12]
	rtd >>= 1;
 80012f4:	89bb      	ldrh	r3, [r7, #12]
 80012f6:	085b      	lsrs	r3, r3, #1
 80012f8:	81bb      	strh	r3, [r7, #12]
	return rtd;
 80012fa:	89bb      	ldrh	r3, [r7, #12]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <Max31865_init>:
//#########################################################################################################################
//#########################################################################################################################
//#########################################################################################################################
void  Max31865_init(Max31865_t *max31865,SPI_HandleTypeDef *spi,GPIO_TypeDef  *cs_gpio,uint16_t cs_pin,uint8_t  numwires, uint8_t filterHz)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	807b      	strh	r3, [r7, #2]
  if(max31865->lock == 1)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	7b1b      	ldrb	r3, [r3, #12]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d102      	bne.n	8001320 <Max31865_init+0x1c>
    Max31865_delay(1);
 800131a:	2001      	movs	r0, #1
 800131c:	f7ff fe66 	bl	8000fec <Max31865_delay>
  max31865->lock = 1;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2201      	movs	r2, #1
 8001324:	731a      	strb	r2, [r3, #12]
  max31865->spi = spi;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	609a      	str	r2, [r3, #8]
  max31865->cs_gpio = cs_gpio;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	601a      	str	r2, [r3, #0]
  max31865->cs_pin = cs_pin;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	887a      	ldrh	r2, [r7, #2]
 8001336:	809a      	strh	r2, [r3, #4]
  HAL_GPIO_WritePin(max31865->cs_gpio,max31865->cs_pin,GPIO_PIN_SET);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	889b      	ldrh	r3, [r3, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	4619      	mov	r1, r3
 8001344:	f003 f960 	bl	8004608 <HAL_GPIO_WritePin>
  Max31865_delay(100);
 8001348:	2064      	movs	r0, #100	; 0x64
 800134a:	f7ff fe4f 	bl	8000fec <Max31865_delay>
  Max31865_setWires(max31865, numwires);
 800134e:	7e3b      	ldrb	r3, [r7, #24]
 8001350:	4619      	mov	r1, r3
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f7ff ff63 	bl	800121e <Max31865_setWires>
	Max31865_enableBias(max31865, 0);
 8001358:	2100      	movs	r1, #0
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f7ff ff1b 	bl	8001196 <Max31865_enableBias>
	Max31865_autoConvert(max31865, 0);
 8001360:	2100      	movs	r1, #0
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f7ff ff39 	bl	80011da <Max31865_autoConvert>
	Max31865_clearFault(max31865);
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f7ff fef8 	bl	800115e <Max31865_clearFault>
  Max31865_setFilter(max31865, filterHz);
 800136e:	7f3b      	ldrb	r3, [r7, #28]
 8001370:	4619      	mov	r1, r3
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f7ff ff75 	bl	8001262 <Max31865_setFilter>
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <Max31865_readTempC>:
//#########################################################################################################################
uint8_t Max31865_readTempC(Max31865_t *max31865,float *readTemp)
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
	uint8_t fault;
  if(max31865->lock == 1)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7b1b      	ldrb	r3, [r3, #12]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d102      	bne.n	8001398 <Max31865_readTempC+0x18>
    Max31865_delay(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff fe2a 	bl	8000fec <Max31865_delay>
  max31865->lock = 1;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	731a      	strb	r2, [r3, #12]
  float Z1, Z2, Z3, Z4, Rt, temp;
	Rt = Max31865_readRTD(max31865);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ff81 	bl	80012a6 <Max31865_readRTD>
 80013a4:	4603      	mov	r3, r0
 80013a6:	ee07 3a90 	vmov	s15, r3
 80013aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Rt /= 32768;
 80013b2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013b6:	eddf 6a92 	vldr	s13, [pc, #584]	; 8001600 <Max31865_readTempC+0x280>
 80013ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013be:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Rt *= _MAX31865_RREF;
 80013c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013c6:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001604 <Max31865_readTempC+0x284>
 80013ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ce:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Z1 = -RTD_A;
 80013d2:	4b8d      	ldr	r3, [pc, #564]	; (8001608 <Max31865_readTempC+0x288>)
 80013d4:	623b      	str	r3, [r7, #32]
	Z2 = RTD_A * RTD_A - (4 * RTD_B);
 80013d6:	4b8d      	ldr	r3, [pc, #564]	; (800160c <Max31865_readTempC+0x28c>)
 80013d8:	61fb      	str	r3, [r7, #28]
	Z3 = (4 * RTD_B) / _MAX31865_RNOMINAL;
 80013da:	4b8d      	ldr	r3, [pc, #564]	; (8001610 <Max31865_readTempC+0x290>)
 80013dc:	61bb      	str	r3, [r7, #24]
	Z4 = 2 * RTD_B;
 80013de:	4b8d      	ldr	r3, [pc, #564]	; (8001614 <Max31865_readTempC+0x294>)
 80013e0:	617b      	str	r3, [r7, #20]
	temp = Z2 + (Z3 * Rt);
 80013e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80013e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80013f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f6:	edc7 7a04 	vstr	s15, [r7, #16]
	temp = (sqrtf(temp) + Z1) / Z4;
 80013fa:	ed97 0a04 	vldr	s0, [r7, #16]
 80013fe:	f00d fc07 	bl	800ec10 <sqrtf>
 8001402:	eeb0 7a40 	vmov.f32	s14, s0
 8001406:	edd7 7a08 	vldr	s15, [r7, #32]
 800140a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800140e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001416:	edc7 7a04 	vstr	s15, [r7, #16]

	if (temp >= 0)
 800141a:	edd7 7a04 	vldr	s15, [r7, #16]
 800141e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001426:	db0c      	blt.n	8001442 <Max31865_readTempC+0xc2>
	{
		*readTemp = temp;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	601a      	str	r2, [r3, #0]
		fault = Max31865_readFault(max31865);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fe88 	bl	8001144 <Max31865_readFault>
 8001434:	4603      	mov	r3, r0
 8001436:	72fb      	strb	r3, [r7, #11]
		max31865->lock = 0;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	731a      	strb	r2, [r3, #12]
		return fault;
 800143e:	7afb      	ldrb	r3, [r7, #11]
 8001440:	e0c6      	b.n	80015d0 <Max31865_readTempC+0x250>
	}
	Rt /= _MAX31865_RNOMINAL;
 8001442:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001446:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001618 <Max31865_readTempC+0x298>
 800144a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Rt *= 100;    
 8001452:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001456:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001618 <Max31865_readTempC+0x298>
 800145a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float rpoly = Rt;
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	60fb      	str	r3, [r7, #12]
	temp = -242.02;
 8001466:	4b6d      	ldr	r3, [pc, #436]	; (800161c <Max31865_readTempC+0x29c>)
 8001468:	613b      	str	r3, [r7, #16]
	temp += 2.2228 * rpoly;
 800146a:	6938      	ldr	r0, [r7, #16]
 800146c:	f7ff f86c 	bl	8000548 <__aeabi_f2d>
 8001470:	4604      	mov	r4, r0
 8001472:	460d      	mov	r5, r1
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f7ff f867 	bl	8000548 <__aeabi_f2d>
 800147a:	a357      	add	r3, pc, #348	; (adr r3, 80015d8 <Max31865_readTempC+0x258>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	f7ff f8ba 	bl	80005f8 <__aeabi_dmul>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4620      	mov	r0, r4
 800148a:	4629      	mov	r1, r5
 800148c:	f7fe fefe 	bl	800028c <__adddf3>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	f7ff fba6 	bl	8000be8 <__aeabi_d2f>
 800149c:	4603      	mov	r3, r0
 800149e:	613b      	str	r3, [r7, #16]
	rpoly *= Rt;  // square
 80014a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80014a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ac:	edc7 7a03 	vstr	s15, [r7, #12]
	temp += 2.5859e-3 * rpoly;
 80014b0:	6938      	ldr	r0, [r7, #16]
 80014b2:	f7ff f849 	bl	8000548 <__aeabi_f2d>
 80014b6:	4604      	mov	r4, r0
 80014b8:	460d      	mov	r5, r1
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f7ff f844 	bl	8000548 <__aeabi_f2d>
 80014c0:	a347      	add	r3, pc, #284	; (adr r3, 80015e0 <Max31865_readTempC+0x260>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f897 	bl	80005f8 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4620      	mov	r0, r4
 80014d0:	4629      	mov	r1, r5
 80014d2:	f7fe fedb 	bl	800028c <__adddf3>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fb83 	bl	8000be8 <__aeabi_d2f>
 80014e2:	4603      	mov	r3, r0
 80014e4:	613b      	str	r3, [r7, #16]
	rpoly *= Rt;  // ^3
 80014e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80014ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f2:	edc7 7a03 	vstr	s15, [r7, #12]
	temp -= 4.8260e-6 * rpoly;
 80014f6:	6938      	ldr	r0, [r7, #16]
 80014f8:	f7ff f826 	bl	8000548 <__aeabi_f2d>
 80014fc:	4604      	mov	r4, r0
 80014fe:	460d      	mov	r5, r1
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f7ff f821 	bl	8000548 <__aeabi_f2d>
 8001506:	a338      	add	r3, pc, #224	; (adr r3, 80015e8 <Max31865_readTempC+0x268>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7ff f874 	bl	80005f8 <__aeabi_dmul>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4620      	mov	r0, r4
 8001516:	4629      	mov	r1, r5
 8001518:	f7fe feb6 	bl	8000288 <__aeabi_dsub>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fb60 	bl	8000be8 <__aeabi_d2f>
 8001528:	4603      	mov	r3, r0
 800152a:	613b      	str	r3, [r7, #16]
	rpoly *= Rt;  // ^4
 800152c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001530:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001538:	edc7 7a03 	vstr	s15, [r7, #12]
	temp -= 2.8183e-8 * rpoly;
 800153c:	6938      	ldr	r0, [r7, #16]
 800153e:	f7ff f803 	bl	8000548 <__aeabi_f2d>
 8001542:	4604      	mov	r4, r0
 8001544:	460d      	mov	r5, r1
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7fe fffe 	bl	8000548 <__aeabi_f2d>
 800154c:	a328      	add	r3, pc, #160	; (adr r3, 80015f0 <Max31865_readTempC+0x270>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7ff f851 	bl	80005f8 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4620      	mov	r0, r4
 800155c:	4629      	mov	r1, r5
 800155e:	f7fe fe93 	bl	8000288 <__aeabi_dsub>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fb3d 	bl	8000be8 <__aeabi_d2f>
 800156e:	4603      	mov	r3, r0
 8001570:	613b      	str	r3, [r7, #16]
	rpoly *= Rt;  // ^5
 8001572:	ed97 7a03 	vldr	s14, [r7, #12]
 8001576:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800157a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157e:	edc7 7a03 	vstr	s15, [r7, #12]
	temp += 1.5243e-10 * rpoly;
 8001582:	6938      	ldr	r0, [r7, #16]
 8001584:	f7fe ffe0 	bl	8000548 <__aeabi_f2d>
 8001588:	4604      	mov	r4, r0
 800158a:	460d      	mov	r5, r1
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f7fe ffdb 	bl	8000548 <__aeabi_f2d>
 8001592:	a319      	add	r3, pc, #100	; (adr r3, 80015f8 <Max31865_readTempC+0x278>)
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7ff f82e 	bl	80005f8 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7fe fe72 	bl	800028c <__adddf3>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff fb1a 	bl	8000be8 <__aeabi_d2f>
 80015b4:	4603      	mov	r3, r0
 80015b6:	613b      	str	r3, [r7, #16]

  *readTemp = temp;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	601a      	str	r2, [r3, #0]
  fault = Max31865_readFault(max31865);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff fdc0 	bl	8001144 <Max31865_readFault>
 80015c4:	4603      	mov	r3, r0
 80015c6:	72fb      	strb	r3, [r7, #11]
  max31865->lock = 0;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	731a      	strb	r2, [r3, #12]
  return fault;
 80015ce:	7afb      	ldrb	r3, [r7, #11]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3728      	adds	r7, #40	; 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bdb0      	pop	{r4, r5, r7, pc}
 80015d8:	5dcc63f1 	.word	0x5dcc63f1
 80015dc:	4001c84b 	.word	0x4001c84b
 80015e0:	7dc882bb 	.word	0x7dc882bb
 80015e4:	3f652f06 	.word	0x3f652f06
 80015e8:	c766c293 	.word	0xc766c293
 80015ec:	3ed43de0 	.word	0x3ed43de0
 80015f0:	513156ce 	.word	0x513156ce
 80015f4:	3e5e42e2 	.word	0x3e5e42e2
 80015f8:	61e4fa3e 	.word	0x61e4fa3e
 80015fc:	3de4f327 	.word	0x3de4f327
 8001600:	47000000 	.word	0x47000000
 8001604:	43d70000 	.word	0x43d70000
 8001608:	bb801132 	.word	0xbb801132
 800160c:	37938317 	.word	0x37938317
 8001610:	b2c66d70 	.word	0xb2c66d70
 8001614:	b59b057f 	.word	0xb59b057f
 8001618:	42c80000 	.word	0x42c80000
 800161c:	c372051f 	.word	0xc372051f

08001620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001624:	f000 ff50 	bl	80024c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001628:	f000 f83c 	bl	80016a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162c:	f000 fa20 	bl	8001a70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001630:	f000 f9ee 	bl	8001a10 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001634:	f000 f8c0 	bl	80017b8 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001638:	f000 f934 	bl	80018a4 <MX_CAN1_Init>
  MX_I2C1_Init();
 800163c:	f000 f96a 	bl	8001914 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001640:	f000 f9a8 	bl	8001994 <MX_SPI2_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001644:	f006 f90a 	bl	800785c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <main+0x60>)
 800164a:	2100      	movs	r1, #0
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <main+0x64>)
 800164e:	f006 f96f 	bl	8007930 <osThreadNew>
 8001652:	4603      	mov	r3, r0
 8001654:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <main+0x68>)
 8001656:	6013      	str	r3, [r2, #0]

  /* creation of blinkyTask01 */
  blinkyTask01Handle = osThreadNew(StartBlinkyTask01, NULL, &blinkyTask01_attributes);
 8001658:	4a0c      	ldr	r2, [pc, #48]	; (800168c <main+0x6c>)
 800165a:	2100      	movs	r1, #0
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <main+0x70>)
 800165e:	f006 f967 	bl	8007930 <osThreadNew>
 8001662:	4603      	mov	r3, r0
 8001664:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <main+0x74>)
 8001666:	6013      	str	r3, [r2, #0]

  /* creation of readTemperature */
  readTemperatureHandle = osThreadNew(StartTaskReadTemperature, NULL, &readTemperature_attributes);
 8001668:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <main+0x78>)
 800166a:	2100      	movs	r1, #0
 800166c:	480b      	ldr	r0, [pc, #44]	; (800169c <main+0x7c>)
 800166e:	f006 f95f 	bl	8007930 <osThreadNew>
 8001672:	4603      	mov	r3, r0
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <main+0x80>)
 8001676:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001678:	f006 f924 	bl	80078c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800167c:	e7fe      	b.n	800167c <main+0x5c>
 800167e:	bf00      	nop
 8001680:	0800ece8 	.word	0x0800ece8
 8001684:	08001d09 	.word	0x08001d09
 8001688:	20001cd4 	.word	0x20001cd4
 800168c:	0800ed0c 	.word	0x0800ed0c
 8001690:	08001d19 	.word	0x08001d19
 8001694:	20001d88 	.word	0x20001d88
 8001698:	0800ed30 	.word	0x0800ed30
 800169c:	08001d35 	.word	0x08001d35
 80016a0:	20001cd0 	.word	0x20001cd0

080016a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0b8      	sub	sp, #224	; 0xe0
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016ae:	2244      	movs	r2, #68	; 0x44
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f008 fe8a 	bl	800a3cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c8:	463b      	mov	r3, r7
 80016ca:	2288      	movs	r2, #136	; 0x88
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f008 fe7c 	bl	800a3cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d4:	2302      	movs	r3, #2
 80016d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e2:	2310      	movs	r3, #16
 80016e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e8:	2302      	movs	r3, #2
 80016ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016ee:	2302      	movs	r3, #2
 80016f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016f4:	2301      	movs	r3, #1
 80016f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80016fa:	230a      	movs	r3, #10
 80016fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001700:	2307      	movs	r3, #7
 8001702:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001706:	2302      	movs	r3, #2
 8001708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800170c:	2302      	movs	r3, #2
 800170e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001712:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001716:	4618      	mov	r0, r3
 8001718:	f003 f932 	bl	8004980 <HAL_RCC_OscConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001722:	f000 fba1 	bl	8001e68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001726:	230f      	movs	r3, #15
 8001728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800172c:	2303      	movs	r3, #3
 800172e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001744:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001748:	2104      	movs	r1, #4
 800174a:	4618      	mov	r0, r3
 800174c:	f003 fcfe 	bl	800514c <HAL_RCC_ClockConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001756:	f000 fb87 	bl	8001e68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800175a:	f244 0342 	movw	r3, #16450	; 0x4042
 800175e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001760:	2300      	movs	r3, #0
 8001762:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001764:	2300      	movs	r3, #0
 8001766:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001768:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800176c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800176e:	2302      	movs	r3, #2
 8001770:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001772:	2301      	movs	r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001776:	2308      	movs	r3, #8
 8001778:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800177a:	2307      	movs	r3, #7
 800177c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800177e:	2302      	movs	r3, #2
 8001780:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001782:	2302      	movs	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001786:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800178a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178c:	463b      	mov	r3, r7
 800178e:	4618      	mov	r0, r3
 8001790:	f003 ff14 	bl	80055bc <HAL_RCCEx_PeriphCLKConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800179a:	f000 fb65 	bl	8001e68 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800179e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017a2:	f003 f897 	bl	80048d4 <HAL_PWREx_ControlVoltageScaling>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80017ac:	f000 fb5c 	bl	8001e68 <Error_Handler>
  }
}
 80017b0:	bf00      	nop
 80017b2:	37e0      	adds	r7, #224	; 0xe0
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
 80017d8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80017da:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <MX_ADC1_Init+0xe0>)
 80017dc:	4a2f      	ldr	r2, [pc, #188]	; (800189c <MX_ADC1_Init+0xe4>)
 80017de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017e0:	4b2d      	ldr	r3, [pc, #180]	; (8001898 <MX_ADC1_Init+0xe0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017e6:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <MX_ADC1_Init+0xe0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ec:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <MX_ADC1_Init+0xe0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017f2:	4b29      	ldr	r3, [pc, #164]	; (8001898 <MX_ADC1_Init+0xe0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017f8:	4b27      	ldr	r3, [pc, #156]	; (8001898 <MX_ADC1_Init+0xe0>)
 80017fa:	2204      	movs	r2, #4
 80017fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017fe:	4b26      	ldr	r3, [pc, #152]	; (8001898 <MX_ADC1_Init+0xe0>)
 8001800:	2200      	movs	r2, #0
 8001802:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <MX_ADC1_Init+0xe0>)
 8001806:	2200      	movs	r2, #0
 8001808:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <MX_ADC1_Init+0xe0>)
 800180c:	2201      	movs	r2, #1
 800180e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <MX_ADC1_Init+0xe0>)
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <MX_ADC1_Init+0xe0>)
 800181a:	2200      	movs	r2, #0
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <MX_ADC1_Init+0xe0>)
 8001820:	2200      	movs	r2, #0
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001824:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <MX_ADC1_Init+0xe0>)
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_ADC1_Init+0xe0>)
 800182e:	2200      	movs	r2, #0
 8001830:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <MX_ADC1_Init+0xe0>)
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800183a:	4817      	ldr	r0, [pc, #92]	; (8001898 <MX_ADC1_Init+0xe0>)
 800183c:	f001 f834 	bl	80028a8 <HAL_ADC_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001846:	f000 fb0f 	bl	8001e68 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	4619      	mov	r1, r3
 8001854:	4810      	ldr	r0, [pc, #64]	; (8001898 <MX_ADC1_Init+0xe0>)
 8001856:	f001 fd8f 	bl	8003378 <HAL_ADCEx_MultiModeConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001860:	f000 fb02 	bl	8001e68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <MX_ADC1_Init+0xe8>)
 8001866:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001868:	2306      	movs	r3, #6
 800186a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001870:	237f      	movs	r3, #127	; 0x7f
 8001872:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001874:	2304      	movs	r3, #4
 8001876:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_ADC1_Init+0xe0>)
 8001882:	f001 f965 	bl	8002b50 <HAL_ADC_ConfigChannel>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800188c:	f000 faec 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	3728      	adds	r7, #40	; 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20001d94 	.word	0x20001d94
 800189c:	50040000 	.word	0x50040000
 80018a0:	14f00020 	.word	0x14f00020

080018a4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80018a8:	4b18      	ldr	r3, [pc, #96]	; (800190c <MX_CAN1_Init+0x68>)
 80018aa:	4a19      	ldr	r2, [pc, #100]	; (8001910 <MX_CAN1_Init+0x6c>)
 80018ac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <MX_CAN1_Init+0x68>)
 80018b0:	2228      	movs	r2, #40	; 0x28
 80018b2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <MX_CAN1_Init+0x68>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_CAN1_Init+0x68>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_CAN1_Init+0x68>)
 80018c2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80018c6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80018c8:	4b10      	ldr	r3, [pc, #64]	; (800190c <MX_CAN1_Init+0x68>)
 80018ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018ce:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_CAN1_Init+0x68>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <MX_CAN1_Init+0x68>)
 80018d8:	2200      	movs	r2, #0
 80018da:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_CAN1_Init+0x68>)
 80018de:	2200      	movs	r2, #0
 80018e0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <MX_CAN1_Init+0x68>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_CAN1_Init+0x68>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <MX_CAN1_Init+0x68>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_CAN1_Init+0x68>)
 80018f6:	f001 fdeb 	bl	80034d0 <HAL_CAN_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001900:	f000 fab2 	bl	8001e68 <Error_Handler>
  }
  CAN_filterConfig();
 8001904:	f000 f9aa 	bl	8001c5c <CAN_filterConfig>
  /* USER CODE END CAN1_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20001e7c 	.word	0x20001e7c
 8001910:	40006400 	.word	0x40006400

08001914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <MX_I2C1_Init+0x74>)
 800191a:	4a1c      	ldr	r2, [pc, #112]	; (800198c <MX_I2C1_Init+0x78>)
 800191c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <MX_I2C1_Init+0x74>)
 8001920:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <MX_I2C1_Init+0x7c>)
 8001922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <MX_I2C1_Init+0x74>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <MX_I2C1_Init+0x74>)
 800192c:	2201      	movs	r2, #1
 800192e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <MX_I2C1_Init+0x74>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <MX_I2C1_Init+0x74>)
 8001938:	2200      	movs	r2, #0
 800193a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <MX_I2C1_Init+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_I2C1_Init+0x74>)
 8001944:	2200      	movs	r2, #0
 8001946:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MX_I2C1_Init+0x74>)
 800194a:	2200      	movs	r2, #0
 800194c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800194e:	480e      	ldr	r0, [pc, #56]	; (8001988 <MX_I2C1_Init+0x74>)
 8001950:	f002 fe8c 	bl	800466c <HAL_I2C_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800195a:	f000 fa85 	bl	8001e68 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800195e:	2100      	movs	r1, #0
 8001960:	4809      	ldr	r0, [pc, #36]	; (8001988 <MX_I2C1_Init+0x74>)
 8001962:	f002 ff12 	bl	800478a <HAL_I2CEx_ConfigAnalogFilter>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800196c:	f000 fa7c 	bl	8001e68 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001970:	2100      	movs	r1, #0
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_I2C1_Init+0x74>)
 8001974:	f002 ff54 	bl	8004820 <HAL_I2CEx_ConfigDigitalFilter>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800197e:	f000 fa73 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20001d3c 	.word	0x20001d3c
 800198c:	40005400 	.word	0x40005400
 8001990:	10909cec 	.word	0x10909cec

08001994 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <MX_SPI2_Init+0x74>)
 800199a:	4a1c      	ldr	r2, [pc, #112]	; (8001a0c <MX_SPI2_Init+0x78>)
 800199c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800199e:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <MX_SPI2_Init+0x74>)
 80019a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <MX_SPI2_Init+0x74>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <MX_SPI2_Init+0x74>)
 80019ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <MX_SPI2_Init+0x74>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <MX_SPI2_Init+0x74>)
 80019bc:	2201      	movs	r2, #1
 80019be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <MX_SPI2_Init+0x74>)
 80019c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <MX_SPI2_Init+0x74>)
 80019ca:	2228      	movs	r2, #40	; 0x28
 80019cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <MX_SPI2_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <MX_SPI2_Init+0x74>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <MX_SPI2_Init+0x74>)
 80019dc:	2200      	movs	r2, #0
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <MX_SPI2_Init+0x74>)
 80019e2:	2207      	movs	r2, #7
 80019e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <MX_SPI2_Init+0x74>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <MX_SPI2_Init+0x74>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_SPI2_Init+0x74>)
 80019f4:	f004 fa9e 	bl	8005f34 <HAL_SPI_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80019fe:	f000 fa33 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20001cd8 	.word	0x20001cd8
 8001a0c:	40003800 	.word	0x40003800

08001a10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a16:	4a15      	ldr	r2, [pc, #84]	; (8001a6c <MX_USART2_UART_Init+0x5c>)
 8001a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a36:	220c      	movs	r2, #12
 8001a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a54:	f005 fac0 	bl	8006fd8 <HAL_UART_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a5e:	f000 fa03 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20001dfc 	.word	0x20001dfc
 8001a6c:	40004400 	.word	0x40004400

08001a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a86:	4b4b      	ldr	r3, [pc, #300]	; (8001bb4 <MX_GPIO_Init+0x144>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	4a4a      	ldr	r2, [pc, #296]	; (8001bb4 <MX_GPIO_Init+0x144>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a92:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <MX_GPIO_Init+0x144>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a9e:	4b45      	ldr	r3, [pc, #276]	; (8001bb4 <MX_GPIO_Init+0x144>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	4a44      	ldr	r2, [pc, #272]	; (8001bb4 <MX_GPIO_Init+0x144>)
 8001aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aaa:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <MX_GPIO_Init+0x144>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <MX_GPIO_Init+0x144>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	4a3e      	ldr	r2, [pc, #248]	; (8001bb4 <MX_GPIO_Init+0x144>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac2:	4b3c      	ldr	r3, [pc, #240]	; (8001bb4 <MX_GPIO_Init+0x144>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <MX_GPIO_Init+0x144>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	4a38      	ldr	r2, [pc, #224]	; (8001bb4 <MX_GPIO_Init+0x144>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ada:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <MX_GPIO_Init+0x144>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4833      	ldr	r0, [pc, #204]	; (8001bb8 <MX_GPIO_Init+0x148>)
 8001aec:	f002 fd8c 	bl	8004608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afa:	f002 fd85 	bl	8004608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS1_GPIO_Port, SPI2_CS1_Pin, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b04:	482d      	ldr	r0, [pc, #180]	; (8001bbc <MX_GPIO_Init+0x14c>)
 8001b06:	f002 fd7f 	bl	8004608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI2_CS2_Pin|SPI2_CS3_Pin, GPIO_PIN_SET);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b14:	f002 fd78 	bl	8004608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b1e:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <MX_GPIO_Init+0x150>)
 8001b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4822      	ldr	r0, [pc, #136]	; (8001bb8 <MX_GPIO_Init+0x148>)
 8001b2e:	f002 fbc1 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b32:	2301      	movs	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	481b      	ldr	r0, [pc, #108]	; (8001bb8 <MX_GPIO_Init+0x148>)
 8001b4a:	f002 fbb3 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8001b4e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6a:	f002 fba3 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS1_Pin */
  GPIO_InitStruct.Pin = SPI2_CS1_Pin;
 8001b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS1_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	480d      	ldr	r0, [pc, #52]	; (8001bbc <MX_GPIO_Init+0x14c>)
 8001b88:	f002 fb94 	bl	80042b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS2_Pin SPI2_CS3_Pin */
  GPIO_InitStruct.Pin = SPI2_CS2_Pin|SPI2_CS3_Pin;
 8001b8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba8:	f002 fb84 	bl	80042b4 <HAL_GPIO_Init>

}
 8001bac:	bf00      	nop
 8001bae:	3728      	adds	r7, #40	; 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	48000800 	.word	0x48000800
 8001bbc:	48000400 	.word	0x48000400
 8001bc0:	10210000 	.word	0x10210000

08001bc4 <CAN_Tx>:
	serialMsg("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
}


void CAN_Tx(char msg[], CAN_TxHeaderTypeDef *TxHeader)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]

	if (sizeof(*msg) <= 8)
	{
		uint32_t TxMailBox; //Outgoing mail box

		if (HAL_CAN_AddTxMessage(&hcan1, TxHeader, (uint8_t *)msg, &TxMailBox) != HAL_OK)
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6839      	ldr	r1, [r7, #0]
 8001bd6:	480b      	ldr	r0, [pc, #44]	; (8001c04 <CAN_Tx+0x40>)
 8001bd8:	f001 fe3f 	bl	800385a <HAL_CAN_AddTxMessage>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <CAN_Tx+0x22>
		{
			Error_Handler();
 8001be2:	f000 f941 	bl	8001e68 <Error_Handler>
		}

		while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailBox));//Wait for message to be sent.
 8001be6:	bf00      	nop
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	; (8001c04 <CAN_Tx+0x40>)
 8001bee:	f001 ff0f 	bl	8003a10 <HAL_CAN_IsTxMessagePending>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f7      	bne.n	8001be8 <CAN_Tx+0x24>
			serialMsg("CAN Packet size to large. Packet size ");
			serialMsg((char *)sizeof(*msg));
			serialMsg(" Bytes.\n\r");
		}
	}
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20001e7c 	.word	0x20001e7c

08001c08 <CAN_Rx>:

void CAN_Rx(void){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0

	uint8_t crx[8];
	RxHeader.DLC = 8;
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <CAN_Rx+0x48>)
 8001c10:	2208      	movs	r2, #8
 8001c12:	611a      	str	r2, [r3, #16]
	RxHeader.IDE = CAN_ID_STD;
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <CAN_Rx+0x48>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_DATA;
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <CAN_Rx+0x48>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = RemoteID;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <CAN_Rx+0x4c>)
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <CAN_Rx+0x48>)
 8001c28:	601a      	str	r2, [r3, #0]


	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, crx) != HAL_OK){
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <CAN_Rx+0x48>)
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4809      	ldr	r0, [pc, #36]	; (8001c58 <CAN_Rx+0x50>)
 8001c32:	f001 ff11 	bl	8003a58 <HAL_CAN_GetRxMessage>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <CAN_Rx+0x3a>
		Error_Handler();
 8001c3c:	f000 f914 	bl	8001e68 <Error_Handler>
 8001c40:	e002      	b.n	8001c48 <CAN_Rx+0x40>
		return;
	}
	HAL_Delay(1);
 8001c42:	2001      	movs	r0, #1
 8001c44:	f000 fc80 	bl	8002548 <HAL_Delay>
		serialMsg("Received message: ");
		serialMsg((char*)crx);
		serialMsg("\n\r");
	}

}
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20001ebc 	.word	0x20001ebc
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20001e7c 	.word	0x20001e7c

08001c5c <CAN_filterConfig>:

void CAN_filterConfig(void){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filterConfig;
	filterConfig.FilterBank = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
	filterConfig.FilterActivation = ENABLE;
 8001c66:	2301      	movs	r3, #1
 8001c68:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = 0x0000;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = 0x0000;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8001c86:	463b      	mov	r3, r7
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4803      	ldr	r0, [pc, #12]	; (8001c98 <CAN_filterConfig+0x3c>)
 8001c8c:	f001 fd1b 	bl	80036c6 <HAL_CAN_ConfigFilter>
}
 8001c90:	bf00      	nop
 8001c92:	3728      	adds	r7, #40	; 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20001e7c 	.word	0x20001e7c

08001c9c <SendSensorData>:


void SendSensorData(uint16_t sensorId, float data)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	ed87 0a00 	vstr	s0, [r7]
 8001ca8:	80fb      	strh	r3, [r7, #6]
	char sensorData[8];
	TxHeader.DLC = 8;			 //Specifies the length of the frame that will be transmitted.
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <SendSensorData+0x60>)
 8001cac:	2208      	movs	r2, #8
 8001cae:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;	 //Specifies the type of identifier for the message that will be transmitted.
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <SendSensorData+0x60>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA; //Specifies the type of frame for the message that will be transmitted.
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <SendSensorData+0x60>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = OwnID;		 //Specifies the standard identifier.
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <SendSensorData+0x64>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <SendSensorData+0x60>)
 8001cc4:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <SendSensorData+0x60>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	751a      	strb	r2, [r3, #20]
	TxHeader.ExtId = sensorId; //Specifies the extended identifier.
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <SendSensorData+0x60>)
 8001cd0:	6053      	str	r3, [r2, #4]

	sprintf(sensorData, "%06f", data);
 8001cd2:	6838      	ldr	r0, [r7, #0]
 8001cd4:	f7fe fc38 	bl	8000548 <__aeabi_f2d>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	f107 0008 	add.w	r0, r7, #8
 8001ce0:	4908      	ldr	r1, [pc, #32]	; (8001d04 <SendSensorData+0x68>)
 8001ce2:	f009 f9fb 	bl	800b0dc <siprintf>
	CAN_Tx(sensorData, &TxHeader);
 8001ce6:	f107 0308 	add.w	r3, r7, #8
 8001cea:	4904      	ldr	r1, [pc, #16]	; (8001cfc <SendSensorData+0x60>)
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff69 	bl	8001bc4 <CAN_Tx>
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20001ea4 	.word	0x20001ea4
 8001d00:	20000006 	.word	0x20000006
 8001d04:	0800ecc8 	.word	0x0800ecc8

08001d08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f005 feb3 	bl	8007a7c <osDelay>
 8001d16:	e7fb      	b.n	8001d10 <StartDefaultTask+0x8>

08001d18 <StartBlinkyTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask01 */
void StartBlinkyTask01(void *argument)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask01 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001d20:	2120      	movs	r1, #32
 8001d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d26:	f002 fc87 	bl	8004638 <HAL_GPIO_TogglePin>
    osDelay(500);
 8001d2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d2e:	f005 fea5 	bl	8007a7c <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001d32:	e7f5      	b.n	8001d20 <StartBlinkyTask01+0x8>

08001d34 <StartTaskReadTemperature>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskReadTemperature */
void StartTaskReadTemperature(void *argument)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b098      	sub	sp, #96	; 0x60
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	6078      	str	r0, [r7, #4]
	float temperature[3];
	uint8_t fault[3], buffer_len;
	Max31865_t  MaxHandles[3];
	char usartBuffer[16];

	Max31865_init(&MaxHandles[0], &hspi2, SPI2_CS1_GPIO_Port, SPI2_CS1_Pin, 2, 50);
 8001d3c:	f107 0018 	add.w	r0, r7, #24
 8001d40:	2332      	movs	r3, #50	; 0x32
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	2302      	movs	r3, #2
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4c:	4a38      	ldr	r2, [pc, #224]	; (8001e30 <StartTaskReadTemperature+0xfc>)
 8001d4e:	4939      	ldr	r1, [pc, #228]	; (8001e34 <StartTaskReadTemperature+0x100>)
 8001d50:	f7ff fad8 	bl	8001304 <Max31865_init>
	Max31865_init(&MaxHandles[1], &hspi2, SPI2_CS2_GPIO_Port, SPI2_CS2_Pin, 2, 50);
 8001d54:	f107 0318 	add.w	r3, r7, #24
 8001d58:	f103 0010 	add.w	r0, r3, #16
 8001d5c:	2332      	movs	r3, #50	; 0x32
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	2302      	movs	r3, #2
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d68:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d6c:	4931      	ldr	r1, [pc, #196]	; (8001e34 <StartTaskReadTemperature+0x100>)
 8001d6e:	f7ff fac9 	bl	8001304 <Max31865_init>
	Max31865_init(&MaxHandles[2], &hspi2, SPI2_CS3_GPIO_Port, SPI2_CS3_Pin, 2, 50);
 8001d72:	f107 0318 	add.w	r3, r7, #24
 8001d76:	f103 0020 	add.w	r0, r3, #32
 8001d7a:	2332      	movs	r3, #50	; 0x32
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	2302      	movs	r3, #2
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d86:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d8a:	492a      	ldr	r1, [pc, #168]	; (8001e34 <StartTaskReadTemperature+0x100>)
 8001d8c:	f7ff faba 	bl	8001304 <Max31865_init>
  /* Infinite loop */
  for(;;)
  {
	  fault[0] = Max31865_readTempC(&MaxHandles[0], &temperature[0]);
 8001d90:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001d94:	f107 0318 	add.w	r3, r7, #24
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff faf0 	bl	8001380 <Max31865_readTempC>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	  fault[1] = Max31865_readTempC(&MaxHandles[1], &temperature[1]);
 8001da6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001daa:	1d1a      	adds	r2, r3, #4
 8001dac:	f107 0318 	add.w	r3, r7, #24
 8001db0:	3310      	adds	r3, #16
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fae3 	bl	8001380 <Max31865_readTempC>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	  fault[2] = Max31865_readTempC(&MaxHandles[2], &temperature[2]);
 8001dc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dc4:	f103 0208 	add.w	r2, r3, #8
 8001dc8:	f107 0318 	add.w	r3, r7, #24
 8001dcc:	3320      	adds	r3, #32
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fad5 	bl	8001380 <Max31865_readTempC>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

	  //sprintf(message, "T1%.1f", temperature[0]);
	  SendSensorData(TEMP_1, temperature[0]);
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <StartTaskReadTemperature+0x104>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001de4:	eeb0 0a67 	vmov.f32	s0, s15
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff57 	bl	8001c9c <SendSensorData>
	  osDelay(10);
 8001dee:	200a      	movs	r0, #10
 8001df0:	f005 fe44 	bl	8007a7c <osDelay>
	  SendSensorData(TEMP_2, temperature[0]);
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <StartTaskReadTemperature+0x108>)
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff4b 	bl	8001c9c <SendSensorData>
	  osDelay(10);
 8001e06:	200a      	movs	r0, #10
 8001e08:	f005 fe38 	bl	8007a7c <osDelay>
	  SendSensorData(TEMP_3, temperature[0]);
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <StartTaskReadTemperature+0x10c>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001e14:	eeb0 0a67 	vmov.f32	s0, s15
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff3f 	bl	8001c9c <SendSensorData>
	  osDelay(10);
 8001e1e:	200a      	movs	r0, #10
 8001e20:	f005 fe2c 	bl	8007a7c <osDelay>
		  HAL_UART_Transmit(&huart2, (uint8_t*)usartBuffer, buffer_len, 100);
		  HAL_Delay(1);

	  }

	  osDelay(1000);
 8001e24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e28:	f005 fe28 	bl	8007a7c <osDelay>
	  fault[0] = Max31865_readTempC(&MaxHandles[0], &temperature[0]);
 8001e2c:	e7b0      	b.n	8001d90 <StartTaskReadTemperature+0x5c>
 8001e2e:	bf00      	nop
 8001e30:	48000400 	.word	0x48000400
 8001e34:	20001cd8 	.word	0x20001cd8
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	20000002 	.word	0x20000002
 8001e40:	20000004 	.word	0x20000004

08001e44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d101      	bne.n	8001e5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e56:	f000 fb57 	bl	8002508 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40001000 	.word	0x40001000

08001e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_MspInit+0x4c>)
 8001e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e82:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <HAL_MspInit+0x4c>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6613      	str	r3, [r2, #96]	; 0x60
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <HAL_MspInit+0x4c>)
 8001e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_MspInit+0x4c>)
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_MspInit+0x4c>)
 8001e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_MspInit+0x4c>)
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	603b      	str	r3, [r7, #0]
 8001eac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	210f      	movs	r1, #15
 8001eb2:	f06f 0001 	mvn.w	r0, #1
 8001eb6:	f002 f9d3 	bl	8004260 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a15      	ldr	r2, [pc, #84]	; (8001f3c <HAL_ADC_MspInit+0x74>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d124      	bne.n	8001f34 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_ADC_MspInit+0x78>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <HAL_ADC_MspInit+0x78>)
 8001ef0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_ADC_MspInit+0x78>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_ADC_MspInit+0x78>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <HAL_ADC_MspInit+0x78>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <HAL_ADC_MspInit+0x78>)
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f1e:	230b      	movs	r3, #11
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f30:	f002 f9c0 	bl	80042b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	50040000 	.word	0x50040000
 8001f40:	40021000 	.word	0x40021000

08001f44 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <HAL_CAN_MspInit+0x90>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d131      	bne.n	8001fca <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <HAL_CAN_MspInit+0x94>)
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <HAL_CAN_MspInit+0x94>)
 8001f6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f70:	6593      	str	r3, [r2, #88]	; 0x58
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_CAN_MspInit+0x94>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <HAL_CAN_MspInit+0x94>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <HAL_CAN_MspInit+0x94>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <HAL_CAN_MspInit+0x94>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fa8:	2309      	movs	r3, #9
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb6:	f002 f97d 	bl	80042b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2105      	movs	r1, #5
 8001fbe:	2014      	movs	r0, #20
 8001fc0:	f002 f94e 	bl	8004260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001fc4:	2014      	movs	r0, #20
 8001fc6:	f002 f967 	bl	8004298 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001fca:	bf00      	nop
 8001fcc:	3728      	adds	r7, #40	; 0x28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40006400 	.word	0x40006400
 8001fd8:	40021000 	.word	0x40021000

08001fdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	; 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a17      	ldr	r2, [pc, #92]	; (8002058 <HAL_I2C_MspInit+0x7c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d128      	bne.n	8002050 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <HAL_I2C_MspInit+0x80>)
 8002000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002002:	4a16      	ldr	r2, [pc, #88]	; (800205c <HAL_I2C_MspInit+0x80>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <HAL_I2C_MspInit+0x80>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002016:	f44f 7340 	mov.w	r3, #768	; 0x300
 800201a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800201c:	2312      	movs	r3, #18
 800201e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002020:	2301      	movs	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002028:	2304      	movs	r3, #4
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4619      	mov	r1, r3
 8002032:	480b      	ldr	r0, [pc, #44]	; (8002060 <HAL_I2C_MspInit+0x84>)
 8002034:	f002 f93e 	bl	80042b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_I2C_MspInit+0x80>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	4a07      	ldr	r2, [pc, #28]	; (800205c <HAL_I2C_MspInit+0x80>)
 800203e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002042:	6593      	str	r3, [r2, #88]	; 0x58
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_I2C_MspInit+0x80>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002050:	bf00      	nop
 8002052:	3728      	adds	r7, #40	; 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40005400 	.word	0x40005400
 800205c:	40021000 	.word	0x40021000
 8002060:	48000400 	.word	0x48000400

08002064 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a17      	ldr	r2, [pc, #92]	; (80020e0 <HAL_SPI_MspInit+0x7c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d128      	bne.n	80020d8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_SPI_MspInit+0x80>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	4a16      	ldr	r2, [pc, #88]	; (80020e4 <HAL_SPI_MspInit+0x80>)
 800208c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002090:	6593      	str	r3, [r2, #88]	; 0x58
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_SPI_MspInit+0x80>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_SPI_MspInit+0x80>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <HAL_SPI_MspInit+0x80>)
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_SPI_MspInit+0x80>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80020b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80020ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020c8:	2305      	movs	r3, #5
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4619      	mov	r1, r3
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <HAL_SPI_MspInit+0x84>)
 80020d4:	f002 f8ee 	bl	80042b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020d8:	bf00      	nop
 80020da:	3728      	adds	r7, #40	; 0x28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40003800 	.word	0x40003800
 80020e4:	40021000 	.word	0x40021000
 80020e8:	48000400 	.word	0x48000400

080020ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a17      	ldr	r2, [pc, #92]	; (8002168 <HAL_UART_MspInit+0x7c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d128      	bne.n	8002160 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800210e:	4b17      	ldr	r3, [pc, #92]	; (800216c <HAL_UART_MspInit+0x80>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	4a16      	ldr	r2, [pc, #88]	; (800216c <HAL_UART_MspInit+0x80>)
 8002114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002118:	6593      	str	r3, [r2, #88]	; 0x58
 800211a:	4b14      	ldr	r3, [pc, #80]	; (800216c <HAL_UART_MspInit+0x80>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_UART_MspInit+0x80>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	4a10      	ldr	r2, [pc, #64]	; (800216c <HAL_UART_MspInit+0x80>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <HAL_UART_MspInit+0x80>)
 8002134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800213e:	230c      	movs	r3, #12
 8002140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800214e:	2307      	movs	r3, #7
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800215c:	f002 f8aa 	bl	80042b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002160:	bf00      	nop
 8002162:	3728      	adds	r7, #40	; 0x28
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40004400 	.word	0x40004400
 800216c:	40021000 	.word	0x40021000

08002170 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	; 0x30
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002180:	2200      	movs	r2, #0
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	2036      	movs	r0, #54	; 0x36
 8002186:	f002 f86b 	bl	8004260 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800218a:	2036      	movs	r0, #54	; 0x36
 800218c:	f002 f884 	bl	8004298 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002190:	4b1e      	ldr	r3, [pc, #120]	; (800220c <HAL_InitTick+0x9c>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	4a1d      	ldr	r2, [pc, #116]	; (800220c <HAL_InitTick+0x9c>)
 8002196:	f043 0310 	orr.w	r3, r3, #16
 800219a:	6593      	str	r3, [r2, #88]	; 0x58
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_InitTick+0x9c>)
 800219e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021a8:	f107 0210 	add.w	r2, r7, #16
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 f970 	bl	8005498 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021b8:	f003 f942 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 80021bc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c0:	4a13      	ldr	r2, [pc, #76]	; (8002210 <HAL_InitTick+0xa0>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	0c9b      	lsrs	r3, r3, #18
 80021c8:	3b01      	subs	r3, #1
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <HAL_InitTick+0xa4>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <HAL_InitTick+0xa8>)
 80021d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_InitTick+0xa4>)
 80021d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021da:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <HAL_InitTick+0xa4>)
 80021dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <HAL_InitTick+0xa4>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_InitTick+0xa4>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021ec:	4809      	ldr	r0, [pc, #36]	; (8002214 <HAL_InitTick+0xa4>)
 80021ee:	f004 fc21 	bl	8006a34 <HAL_TIM_Base_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d104      	bne.n	8002202 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80021f8:	4806      	ldr	r0, [pc, #24]	; (8002214 <HAL_InitTick+0xa4>)
 80021fa:	f004 fc7d 	bl	8006af8 <HAL_TIM_Base_Start_IT>
 80021fe:	4603      	mov	r3, r0
 8002200:	e000      	b.n	8002204 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	3730      	adds	r7, #48	; 0x30
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000
 8002210:	431bde83 	.word	0x431bde83
 8002214:	20001ed8 	.word	0x20001ed8
 8002218:	40001000 	.word	0x40001000

0800221c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <HardFault_Handler+0x4>

08002230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <MemManage_Handler+0x4>

08002236 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <BusFault_Handler+0x4>

0800223c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <UsageFault_Handler+0x4>

08002242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002254:	4803      	ldr	r0, [pc, #12]	; (8002264 <CAN1_RX0_IRQHandler+0x14>)
 8002256:	f001 fd11 	bl	8003c7c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  CAN_Rx();
 800225a:	f7ff fcd5 	bl	8001c08 <CAN_Rx>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20001e7c 	.word	0x20001e7c

08002268 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <TIM6_DAC_IRQHandler+0x10>)
 800226e:	f004 fcb3 	bl	8006bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20001ed8 	.word	0x20001ed8

0800227c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
	return 1;
 8002280:	2301      	movs	r3, #1
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <_kill>:

int _kill(int pid, int sig)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002296:	f008 f861 	bl	800a35c <__errno>
 800229a:	4603      	mov	r3, r0
 800229c:	2216      	movs	r2, #22
 800229e:	601a      	str	r2, [r3, #0]
	return -1;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <_exit>:

void _exit (int status)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ffe7 	bl	800228c <_kill>
	while (1) {}		/* Make sure we hang here */
 80022be:	e7fe      	b.n	80022be <_exit+0x12>

080022c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	e00a      	b.n	80022e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022d2:	f3af 8000 	nop.w
 80022d6:	4601      	mov	r1, r0
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	60ba      	str	r2, [r7, #8]
 80022de:	b2ca      	uxtb	r2, r1
 80022e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3301      	adds	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	dbf0      	blt.n	80022d2 <_read+0x12>
	}

return len;
 80022f0:	687b      	ldr	r3, [r7, #4]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e009      	b.n	8002320 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	60ba      	str	r2, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	3301      	adds	r3, #1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	429a      	cmp	r2, r3
 8002326:	dbf1      	blt.n	800230c <_write+0x12>
	}
	return len;
 8002328:	687b      	ldr	r3, [r7, #4]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <_close>:

int _close(int file)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
	return -1;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800235a:	605a      	str	r2, [r3, #4]
	return 0;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <_isatty>:

int _isatty(int file)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
	return 1;
 8002372:	2301      	movs	r3, #1
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
	return 0;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a4:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <_sbrk+0x5c>)
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <_sbrk+0x60>)
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <_sbrk+0x64>)
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <_sbrk+0x68>)
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <_sbrk+0x64>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d207      	bcs.n	80023dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023cc:	f007 ffc6 	bl	800a35c <__errno>
 80023d0:	4603      	mov	r3, r0
 80023d2:	220c      	movs	r2, #12
 80023d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023da:	e009      	b.n	80023f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <_sbrk+0x64>)
 80023ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20018000 	.word	0x20018000
 80023fc:	00000400 	.word	0x00000400
 8002400:	20000210 	.word	0x20000210
 8002404:	20001f78 	.word	0x20001f78

08002408 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800240c:	4b17      	ldr	r3, [pc, #92]	; (800246c <SystemInit+0x64>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	4a16      	ldr	r2, [pc, #88]	; (800246c <SystemInit+0x64>)
 8002414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800241c:	4b14      	ldr	r3, [pc, #80]	; (8002470 <SystemInit+0x68>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a13      	ldr	r2, [pc, #76]	; (8002470 <SystemInit+0x68>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <SystemInit+0x68>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <SystemInit+0x68>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a0f      	ldr	r2, [pc, #60]	; (8002470 <SystemInit+0x68>)
 8002434:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002438:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800243c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800243e:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <SystemInit+0x68>)
 8002440:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002444:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <SystemInit+0x68>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a09      	ldr	r2, [pc, #36]	; (8002470 <SystemInit+0x68>)
 800244c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002450:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <SystemInit+0x68>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <SystemInit+0x64>)
 800245a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800245e:	609a      	str	r2, [r3, #8]
#endif
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000ed00 	.word	0xe000ed00
 8002470:	40021000 	.word	0x40021000

08002474 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002478:	f7ff ffc6 	bl	8002408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800247c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800247e:	e003      	b.n	8002488 <LoopCopyDataInit>

08002480 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002482:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002484:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002486:	3104      	adds	r1, #4

08002488 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002488:	480a      	ldr	r0, [pc, #40]	; (80024b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800248c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800248e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002490:	d3f6      	bcc.n	8002480 <CopyDataInit>
	ldr	r2, =_sbss
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8002494:	e002      	b.n	800249c <LoopFillZerobss>

08002496 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002496:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002498:	f842 3b04 	str.w	r3, [r2], #4

0800249c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <LoopForever+0x16>)
	cmp	r2, r3
 800249e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80024a0:	d3f9      	bcc.n	8002496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024a2:	f007 ff61 	bl	800a368 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024a6:	f7ff f8bb 	bl	8001620 <main>

080024aa <LoopForever>:

LoopForever:
    b LoopForever
 80024aa:	e7fe      	b.n	80024aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024ac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80024b0:	0800f264 	.word	0x0800f264
	ldr	r0, =_sdata
 80024b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80024b8:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 80024bc:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 80024c0:	20001f78 	.word	0x20001f78

080024c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024c4:	e7fe      	b.n	80024c4 <ADC1_2_IRQHandler>
	...

080024c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_Init+0x3c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <HAL_Init+0x3c>)
 80024d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024de:	2003      	movs	r0, #3
 80024e0:	f001 feb3 	bl	800424a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024e4:	2000      	movs	r0, #0
 80024e6:	f7ff fe43 	bl	8002170 <HAL_InitTick>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	71fb      	strb	r3, [r7, #7]
 80024f4:	e001      	b.n	80024fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024f6:	f7ff fcbf 	bl	8001e78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024fa:	79fb      	ldrb	r3, [r7, #7]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40022000 	.word	0x40022000

08002508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_IncTick+0x20>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_IncTick+0x24>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4413      	add	r3, r2
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_IncTick+0x24>)
 800251a:	6013      	str	r3, [r2, #0]
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000014 	.word	0x20000014
 800252c:	20001f24 	.word	0x20001f24

08002530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return uwTick;
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <HAL_GetTick+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20001f24 	.word	0x20001f24

08002548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002550:	f7ff ffee 	bl	8002530 <HAL_GetTick>
 8002554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002560:	d005      	beq.n	800256e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <HAL_Delay+0x44>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800256e:	bf00      	nop
 8002570:	f7ff ffde 	bl	8002530 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	429a      	cmp	r2, r3
 800257e:	d8f7      	bhi.n	8002570 <HAL_Delay+0x28>
  {
  }
}
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000014 	.word	0x20000014

08002590 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	609a      	str	r2, [r3, #8]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	609a      	str	r2, [r3, #8]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3360      	adds	r3, #96	; 0x60
 800260a:	461a      	mov	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <LL_ADC_SetOffset+0x44>)
 800261a:	4013      	ands	r3, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	4313      	orrs	r3, r2
 8002628:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002630:	bf00      	nop
 8002632:	371c      	adds	r7, #28
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	03fff000 	.word	0x03fff000

08002640 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3360      	adds	r3, #96	; 0x60
 800264e:	461a      	mov	r2, r3
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3360      	adds	r3, #96	; 0x60
 800267c:	461a      	mov	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	431a      	orrs	r2, r3
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002696:	bf00      	nop
 8002698:	371c      	adds	r7, #28
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b087      	sub	sp, #28
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3330      	adds	r3, #48	; 0x30
 80026b2:	461a      	mov	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	4413      	add	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	211f      	movs	r1, #31
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	401a      	ands	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0e9b      	lsrs	r3, r3, #26
 80026da:	f003 011f 	and.w	r1, r3, #31
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	431a      	orrs	r2, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026ee:	bf00      	nop
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b087      	sub	sp, #28
 80026fe:	af00      	add	r7, sp, #0
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3314      	adds	r3, #20
 800270a:	461a      	mov	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	0e5b      	lsrs	r3, r3, #25
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	4413      	add	r3, r2
 8002718:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	0d1b      	lsrs	r3, r3, #20
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	2107      	movs	r1, #7
 8002728:	fa01 f303 	lsl.w	r3, r1, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	401a      	ands	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	0d1b      	lsrs	r3, r3, #20
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	fa01 f303 	lsl.w	r3, r1, r3
 800273e:	431a      	orrs	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002744:	bf00      	nop
 8002746:	371c      	adds	r7, #28
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002768:	43db      	mvns	r3, r3
 800276a:	401a      	ands	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0318 	and.w	r3, r3, #24
 8002772:	4908      	ldr	r1, [pc, #32]	; (8002794 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002774:	40d9      	lsrs	r1, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	400b      	ands	r3, r1
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	431a      	orrs	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	0007ffff 	.word	0x0007ffff

08002798 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80027a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6093      	str	r3, [r2, #8]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027d0:	d101      	bne.n	80027d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002820:	d101      	bne.n	8002826 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <LL_ADC_IsEnabled+0x18>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <LL_ADC_IsEnabled+0x1a>
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b04      	cmp	r3, #4
 800286c:	d101      	bne.n	8002872 <LL_ADC_REG_IsConversionOngoing+0x18>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b08      	cmp	r3, #8
 8002892:	d101      	bne.n	8002898 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b089      	sub	sp, #36	; 0x24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e134      	b.n	8002b2c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d109      	bne.n	80028e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff faf9 	bl	8001ec8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff67 	bl	80027bc <LL_ADC_IsDeepPowerDownEnabled>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d004      	beq.n	80028fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff4d 	bl	8002798 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff ff82 	bl	800280c <LL_ADC_IsInternalRegulatorEnabled>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d113      	bne.n	8002936 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff ff66 	bl	80027e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002918:	4b86      	ldr	r3, [pc, #536]	; (8002b34 <HAL_ADC_Init+0x28c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	099b      	lsrs	r3, r3, #6
 800291e:	4a86      	ldr	r2, [pc, #536]	; (8002b38 <HAL_ADC_Init+0x290>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	099b      	lsrs	r3, r3, #6
 8002926:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002928:	e002      	b.n	8002930 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	3b01      	subs	r3, #1
 800292e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f9      	bne.n	800292a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ff66 	bl	800280c <LL_ADC_IsInternalRegulatorEnabled>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10d      	bne.n	8002962 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294a:	f043 0210 	orr.w	r2, r3, #16
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002956:	f043 0201 	orr.w	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff ff77 	bl	800285a <LL_ADC_REG_IsConversionOngoing>
 800296c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	f040 80cf 	bne.w	8002b1a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b00      	cmp	r3, #0
 8002980:	f040 80cb 	bne.w	8002b1a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002988:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800298c:	f043 0202 	orr.w	r2, r3, #2
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff4b 	bl	8002834 <LL_ADC_IsEnabled>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d115      	bne.n	80029d0 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029a4:	4865      	ldr	r0, [pc, #404]	; (8002b3c <HAL_ADC_Init+0x294>)
 80029a6:	f7ff ff45 	bl	8002834 <LL_ADC_IsEnabled>
 80029aa:	4604      	mov	r4, r0
 80029ac:	4864      	ldr	r0, [pc, #400]	; (8002b40 <HAL_ADC_Init+0x298>)
 80029ae:	f7ff ff41 	bl	8002834 <LL_ADC_IsEnabled>
 80029b2:	4603      	mov	r3, r0
 80029b4:	431c      	orrs	r4, r3
 80029b6:	4863      	ldr	r0, [pc, #396]	; (8002b44 <HAL_ADC_Init+0x29c>)
 80029b8:	f7ff ff3c 	bl	8002834 <LL_ADC_IsEnabled>
 80029bc:	4603      	mov	r3, r0
 80029be:	4323      	orrs	r3, r4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4619      	mov	r1, r3
 80029ca:	485f      	ldr	r0, [pc, #380]	; (8002b48 <HAL_ADC_Init+0x2a0>)
 80029cc:	f7ff fde0 	bl	8002590 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7e5b      	ldrb	r3, [r3, #25]
 80029d4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029da:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80029e0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80029e6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d106      	bne.n	8002a0c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	3b01      	subs	r3, #1
 8002a04:	045b      	lsls	r3, r3, #17
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d009      	beq.n	8002a28 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	4b47      	ldr	r3, [pc, #284]	; (8002b4c <HAL_ADC_Init+0x2a4>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	69b9      	ldr	r1, [r7, #24]
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff0a 	bl	800285a <LL_ADC_REG_IsConversionOngoing>
 8002a46:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff17 	bl	8002880 <LL_ADC_INJ_IsConversionOngoing>
 8002a52:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d13d      	bne.n	8002ad6 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d13a      	bne.n	8002ad6 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a64:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a6c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a7c:	f023 0302 	bic.w	r3, r3, #2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	69b9      	ldr	r1, [r7, #24]
 8002a86:	430b      	orrs	r3, r1
 8002a88:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d118      	bne.n	8002ac6 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a9e:	f023 0304 	bic.w	r3, r3, #4
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002aaa:	4311      	orrs	r1, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ab0:	4311      	orrs	r1, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	611a      	str	r2, [r3, #16]
 8002ac4:	e007      	b.n	8002ad6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d10c      	bne.n	8002af8 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	f023 010f 	bic.w	r1, r3, #15
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	1e5a      	subs	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	631a      	str	r2, [r3, #48]	; 0x30
 8002af6:	e007      	b.n	8002b08 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 020f 	bic.w	r2, r2, #15
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	f023 0303 	bic.w	r3, r3, #3
 8002b10:	f043 0201 	orr.w	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
 8002b18:	e007      	b.n	8002b2a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	f043 0210 	orr.w	r2, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3724      	adds	r7, #36	; 0x24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd90      	pop	{r4, r7, pc}
 8002b34:	2000000c 	.word	0x2000000c
 8002b38:	053e2d63 	.word	0x053e2d63
 8002b3c:	50040000 	.word	0x50040000
 8002b40:	50040100 	.word	0x50040100
 8002b44:	50040200 	.word	0x50040200
 8002b48:	50040300 	.word	0x50040300
 8002b4c:	fff0c007 	.word	0xfff0c007

08002b50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b0b6      	sub	sp, #216	; 0xd8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x22>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e3c6      	b.n	8003300 <HAL_ADC_ConfigChannel+0x7b0>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fe6b 	bl	800285a <LL_ADC_REG_IsConversionOngoing>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 83a7 	bne.w	80032da <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	d824      	bhi.n	8002bde <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	3b02      	subs	r3, #2
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d81b      	bhi.n	8002bd6 <HAL_ADC_ConfigChannel+0x86>
 8002b9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <HAL_ADC_ConfigChannel+0x54>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002bb5 	.word	0x08002bb5
 8002ba8:	08002bbd 	.word	0x08002bbd
 8002bac:	08002bc5 	.word	0x08002bc5
 8002bb0:	08002bcd 	.word	0x08002bcd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	220c      	movs	r2, #12
 8002bb8:	605a      	str	r2, [r3, #4]
          break;
 8002bba:	e011      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2212      	movs	r2, #18
 8002bc0:	605a      	str	r2, [r3, #4]
          break;
 8002bc2:	e00d      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2218      	movs	r2, #24
 8002bc8:	605a      	str	r2, [r3, #4]
          break;
 8002bca:	e009      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bd2:	605a      	str	r2, [r3, #4]
          break;
 8002bd4:	e004      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2206      	movs	r2, #6
 8002bda:	605a      	str	r2, [r3, #4]
          break;
 8002bdc:	e000      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002bde:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	f7ff fd58 	bl	80026a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fe2f 	bl	800285a <LL_ADC_REG_IsConversionOngoing>
 8002bfc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fe3b 	bl	8002880 <LL_ADC_INJ_IsConversionOngoing>
 8002c0a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f040 81a6 	bne.w	8002f64 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f040 81a1 	bne.w	8002f64 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6819      	ldr	r1, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f7ff fd63 	bl	80026fa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	08db      	lsrs	r3, r3, #3
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d00a      	beq.n	8002c6c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6919      	ldr	r1, [r3, #16]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c66:	f7ff fcc7 	bl	80025f8 <LL_ADC_SetOffset>
 8002c6a:	e17b      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2100      	movs	r1, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fce4 	bl	8002640 <LL_ADC_GetOffsetChannel>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10a      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x148>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fcd9 	bl	8002640 <LL_ADC_GetOffsetChannel>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	0e9b      	lsrs	r3, r3, #26
 8002c92:	f003 021f 	and.w	r2, r3, #31
 8002c96:	e01e      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x186>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fcce 	bl	8002640 <LL_ADC_GetOffsetChannel>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002cba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	e004      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002cca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d105      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x19e>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	0e9b      	lsrs	r3, r3, #26
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	e018      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x1d0>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002d0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002d12:	2320      	movs	r3, #32
 8002d14:	e004      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002d16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d106      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fc9d 	bl	800266c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2101      	movs	r1, #1
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fc81 	bl	8002640 <LL_ADC_GetOffsetChannel>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10a      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x20e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fc76 	bl	8002640 <LL_ADC_GetOffsetChannel>
 8002d54:	4603      	mov	r3, r0
 8002d56:	0e9b      	lsrs	r3, r3, #26
 8002d58:	f003 021f 	and.w	r2, r3, #31
 8002d5c:	e01e      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x24c>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2101      	movs	r1, #1
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fc6b 	bl	8002640 <LL_ADC_GetOffsetChannel>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002d7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002d84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	e004      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002d90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x264>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0e9b      	lsrs	r3, r3, #26
 8002dae:	f003 031f 	and.w	r3, r3, #31
 8002db2:	e018      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x296>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002dc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002dd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002dd8:	2320      	movs	r3, #32
 8002dda:	e004      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002ddc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d106      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2200      	movs	r2, #0
 8002df0:	2101      	movs	r1, #1
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fc3a 	bl	800266c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fc1e 	bl	8002640 <LL_ADC_GetOffsetChannel>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10a      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x2d4>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2102      	movs	r1, #2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fc13 	bl	8002640 <LL_ADC_GetOffsetChannel>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	0e9b      	lsrs	r3, r3, #26
 8002e1e:	f003 021f 	and.w	r2, r3, #31
 8002e22:	e01e      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x312>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2102      	movs	r1, #2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fc08 	bl	8002640 <LL_ADC_GetOffsetChannel>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e3a:	fa93 f3a3 	rbit	r3, r3
 8002e3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002e42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002e4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002e52:	2320      	movs	r3, #32
 8002e54:	e004      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e5a:	fab3 f383 	clz	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d105      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x32a>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	0e9b      	lsrs	r3, r3, #26
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	e016      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x358>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002e8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002e92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	e004      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d106      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fbd9 	bl	800266c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2103      	movs	r1, #3
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fbbd 	bl	8002640 <LL_ADC_GetOffsetChannel>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10a      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x396>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2103      	movs	r1, #3
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fbb2 	bl	8002640 <LL_ADC_GetOffsetChannel>
 8002edc:	4603      	mov	r3, r0
 8002ede:	0e9b      	lsrs	r3, r3, #26
 8002ee0:	f003 021f 	and.w	r2, r3, #31
 8002ee4:	e017      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x3c6>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2103      	movs	r1, #3
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fba7 	bl	8002640 <LL_ADC_GetOffsetChannel>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef8:	fa93 f3a3 	rbit	r3, r3
 8002efc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f00:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002f08:	2320      	movs	r3, #32
 8002f0a:	e003      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f0e:	fab3 f383 	clz	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d105      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x3de>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	0e9b      	lsrs	r3, r3, #26
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	e011      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x402>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002f46:	2320      	movs	r3, #32
 8002f48:	e003      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4c:	fab3 f383 	clz	r3, r3
 8002f50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d106      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2103      	movs	r1, #3
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fb84 	bl	800266c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fc63 	bl	8002834 <LL_ADC_IsEnabled>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f040 813f 	bne.w	80031f4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6819      	ldr	r1, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	461a      	mov	r2, r3
 8002f84:	f7ff fbe4 	bl	8002750 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4a8e      	ldr	r2, [pc, #568]	; (80031c8 <HAL_ADC_ConfigChannel+0x678>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	f040 8130 	bne.w	80031f4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10b      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x46c>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	0e9b      	lsrs	r3, r3, #26
 8002faa:	3301      	adds	r3, #1
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	2b09      	cmp	r3, #9
 8002fb2:	bf94      	ite	ls
 8002fb4:	2301      	movls	r3, #1
 8002fb6:	2300      	movhi	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e019      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x4a0>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002fca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fcc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002fce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002fd4:	2320      	movs	r3, #32
 8002fd6:	e003      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002fd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	2b09      	cmp	r3, #9
 8002fe8:	bf94      	ite	ls
 8002fea:	2301      	movls	r3, #1
 8002fec:	2300      	movhi	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d079      	beq.n	80030e8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d107      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x4c0>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0e9b      	lsrs	r3, r3, #26
 8003006:	3301      	adds	r3, #1
 8003008:	069b      	lsls	r3, r3, #26
 800300a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800300e:	e015      	b.n	800303c <HAL_ADC_ConfigChannel+0x4ec>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800301e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003020:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003028:	2320      	movs	r3, #32
 800302a:	e003      	b.n	8003034 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800302c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	3301      	adds	r3, #1
 8003036:	069b      	lsls	r3, r3, #26
 8003038:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003044:	2b00      	cmp	r3, #0
 8003046:	d109      	bne.n	800305c <HAL_ADC_ConfigChannel+0x50c>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	0e9b      	lsrs	r3, r3, #26
 800304e:	3301      	adds	r3, #1
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	2101      	movs	r1, #1
 8003056:	fa01 f303 	lsl.w	r3, r1, r3
 800305a:	e017      	b.n	800308c <HAL_ADC_ConfigChannel+0x53c>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800306a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800306e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003074:	2320      	movs	r3, #32
 8003076:	e003      	b.n	8003080 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	3301      	adds	r3, #1
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	2101      	movs	r1, #1
 8003088:	fa01 f303 	lsl.w	r3, r1, r3
 800308c:	ea42 0103 	orr.w	r1, r2, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10a      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x562>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	0e9b      	lsrs	r3, r3, #26
 80030a2:	3301      	adds	r3, #1
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4613      	mov	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4413      	add	r3, r2
 80030ae:	051b      	lsls	r3, r3, #20
 80030b0:	e018      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x594>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80030c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80030ca:	2320      	movs	r3, #32
 80030cc:	e003      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80030ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d0:	fab3 f383 	clz	r3, r3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	3301      	adds	r3, #1
 80030d8:	f003 021f 	and.w	r2, r3, #31
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e4:	430b      	orrs	r3, r1
 80030e6:	e080      	b.n	80031ea <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d107      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x5b4>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	0e9b      	lsrs	r3, r3, #26
 80030fa:	3301      	adds	r3, #1
 80030fc:	069b      	lsls	r3, r3, #26
 80030fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003102:	e015      	b.n	8003130 <HAL_ADC_ConfigChannel+0x5e0>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003114:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800311c:	2320      	movs	r3, #32
 800311e:	e003      	b.n	8003128 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	3301      	adds	r3, #1
 800312a:	069b      	lsls	r3, r3, #26
 800312c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003138:	2b00      	cmp	r3, #0
 800313a:	d109      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x600>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	0e9b      	lsrs	r3, r3, #26
 8003142:	3301      	adds	r3, #1
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	2101      	movs	r1, #1
 800314a:	fa01 f303 	lsl.w	r3, r1, r3
 800314e:	e017      	b.n	8003180 <HAL_ADC_ConfigChannel+0x630>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	61fb      	str	r3, [r7, #28]
  return result;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003168:	2320      	movs	r3, #32
 800316a:	e003      	b.n	8003174 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	3301      	adds	r3, #1
 8003176:	f003 031f 	and.w	r3, r3, #31
 800317a:	2101      	movs	r1, #1
 800317c:	fa01 f303 	lsl.w	r3, r1, r3
 8003180:	ea42 0103 	orr.w	r1, r2, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10d      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x65c>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	0e9b      	lsrs	r3, r3, #26
 8003196:	3301      	adds	r3, #1
 8003198:	f003 021f 	and.w	r2, r3, #31
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	3b1e      	subs	r3, #30
 80031a4:	051b      	lsls	r3, r3, #20
 80031a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031aa:	e01d      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x698>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	fa93 f3a3 	rbit	r3, r3
 80031b8:	613b      	str	r3, [r7, #16]
  return result;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d103      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80031c4:	2320      	movs	r3, #32
 80031c6:	e005      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x684>
 80031c8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	fab3 f383 	clz	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	3301      	adds	r3, #1
 80031d6:	f003 021f 	and.w	r2, r3, #31
 80031da:	4613      	mov	r3, r2
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	4413      	add	r3, r2
 80031e0:	3b1e      	subs	r3, #30
 80031e2:	051b      	lsls	r3, r3, #20
 80031e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031e8:	430b      	orrs	r3, r1
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	6892      	ldr	r2, [r2, #8]
 80031ee:	4619      	mov	r1, r3
 80031f0:	f7ff fa83 	bl	80026fa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b43      	ldr	r3, [pc, #268]	; (8003308 <HAL_ADC_ConfigChannel+0x7b8>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d079      	beq.n	80032f4 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003200:	4842      	ldr	r0, [pc, #264]	; (800330c <HAL_ADC_ConfigChannel+0x7bc>)
 8003202:	f7ff f9eb 	bl	80025dc <LL_ADC_GetCommonPathInternalCh>
 8003206:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a40      	ldr	r2, [pc, #256]	; (8003310 <HAL_ADC_ConfigChannel+0x7c0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d12b      	bne.n	800326c <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003214:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003218:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d125      	bne.n	800326c <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a3b      	ldr	r2, [pc, #236]	; (8003314 <HAL_ADC_ConfigChannel+0x7c4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <HAL_ADC_ConfigChannel+0x6e4>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a3a      	ldr	r2, [pc, #232]	; (8003318 <HAL_ADC_ConfigChannel+0x7c8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d15c      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003234:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003238:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800323c:	4619      	mov	r1, r3
 800323e:	4833      	ldr	r0, [pc, #204]	; (800330c <HAL_ADC_ConfigChannel+0x7bc>)
 8003240:	f7ff f9b9 	bl	80025b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003244:	4b35      	ldr	r3, [pc, #212]	; (800331c <HAL_ADC_ConfigChannel+0x7cc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	099b      	lsrs	r3, r3, #6
 800324a:	4a35      	ldr	r2, [pc, #212]	; (8003320 <HAL_ADC_ConfigChannel+0x7d0>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	099a      	lsrs	r2, r3, #6
 8003252:	4613      	mov	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800325c:	e002      	b.n	8003264 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3b01      	subs	r3, #1
 8003262:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f9      	bne.n	800325e <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800326a:	e040      	b.n	80032ee <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a2c      	ldr	r2, [pc, #176]	; (8003324 <HAL_ADC_ConfigChannel+0x7d4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d118      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x758>
 8003276:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800327a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d112      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a23      	ldr	r2, [pc, #140]	; (8003314 <HAL_ADC_ConfigChannel+0x7c4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d004      	beq.n	8003296 <HAL_ADC_ConfigChannel+0x746>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a21      	ldr	r2, [pc, #132]	; (8003318 <HAL_ADC_ConfigChannel+0x7c8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d12d      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800329a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800329e:	4619      	mov	r1, r3
 80032a0:	481a      	ldr	r0, [pc, #104]	; (800330c <HAL_ADC_ConfigChannel+0x7bc>)
 80032a2:	f7ff f988 	bl	80025b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032a6:	e024      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1e      	ldr	r2, [pc, #120]	; (8003328 <HAL_ADC_ConfigChannel+0x7d8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d120      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d11a      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a14      	ldr	r2, [pc, #80]	; (8003314 <HAL_ADC_ConfigChannel+0x7c4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d115      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032d0:	4619      	mov	r1, r3
 80032d2:	480e      	ldr	r0, [pc, #56]	; (800330c <HAL_ADC_ConfigChannel+0x7bc>)
 80032d4:	f7ff f96f 	bl	80025b6 <LL_ADC_SetCommonPathInternalCh>
 80032d8:	e00c      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	f043 0220 	orr.w	r2, r3, #32
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80032ec:	e002      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032ee:	bf00      	nop
 80032f0:	e000      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032f2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032fc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003300:	4618      	mov	r0, r3
 8003302:	37d8      	adds	r7, #216	; 0xd8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	80080000 	.word	0x80080000
 800330c:	50040300 	.word	0x50040300
 8003310:	c7520000 	.word	0xc7520000
 8003314:	50040000 	.word	0x50040000
 8003318:	50040200 	.word	0x50040200
 800331c:	2000000c 	.word	0x2000000c
 8003320:	053e2d63 	.word	0x053e2d63
 8003324:	cb840000 	.word	0xcb840000
 8003328:	80000001 	.word	0x80000001

0800332c <LL_ADC_IsEnabled>:
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <LL_ADC_IsEnabled+0x18>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <LL_ADC_IsEnabled+0x1a>
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <LL_ADC_REG_IsConversionOngoing>:
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b04      	cmp	r3, #4
 8003364:	d101      	bne.n	800336a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b09f      	sub	sp, #124	; 0x7c
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003392:	2302      	movs	r3, #2
 8003394:	e08f      	b.n	80034b6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a47      	ldr	r2, [pc, #284]	; (80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d102      	bne.n	80033ae <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80033a8:	4b46      	ldr	r3, [pc, #280]	; (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	e001      	b.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80033ae:	2300      	movs	r3, #0
 80033b0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10b      	bne.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e072      	b.n	80034b6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff ffbd 	bl	8003352 <LL_ADC_REG_IsConversionOngoing>
 80033d8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff ffb7 	bl	8003352 <LL_ADC_REG_IsConversionOngoing>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d154      	bne.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d151      	bne.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033f0:	4b35      	ldr	r3, [pc, #212]	; (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033f2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d02c      	beq.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800340e:	035b      	lsls	r3, r3, #13
 8003410:	430b      	orrs	r3, r1
 8003412:	431a      	orrs	r2, r3
 8003414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003416:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003418:	4829      	ldr	r0, [pc, #164]	; (80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800341a:	f7ff ff87 	bl	800332c <LL_ADC_IsEnabled>
 800341e:	4604      	mov	r4, r0
 8003420:	4828      	ldr	r0, [pc, #160]	; (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003422:	f7ff ff83 	bl	800332c <LL_ADC_IsEnabled>
 8003426:	4603      	mov	r3, r0
 8003428:	431c      	orrs	r4, r3
 800342a:	4828      	ldr	r0, [pc, #160]	; (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800342c:	f7ff ff7e 	bl	800332c <LL_ADC_IsEnabled>
 8003430:	4603      	mov	r3, r0
 8003432:	4323      	orrs	r3, r4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d137      	bne.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003440:	f023 030f 	bic.w	r3, r3, #15
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	6811      	ldr	r1, [r2, #0]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	6892      	ldr	r2, [r2, #8]
 800344c:	430a      	orrs	r2, r1
 800344e:	431a      	orrs	r2, r3
 8003450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003452:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003454:	e028      	b.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800345e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003460:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003462:	4817      	ldr	r0, [pc, #92]	; (80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003464:	f7ff ff62 	bl	800332c <LL_ADC_IsEnabled>
 8003468:	4604      	mov	r4, r0
 800346a:	4816      	ldr	r0, [pc, #88]	; (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800346c:	f7ff ff5e 	bl	800332c <LL_ADC_IsEnabled>
 8003470:	4603      	mov	r3, r0
 8003472:	431c      	orrs	r4, r3
 8003474:	4815      	ldr	r0, [pc, #84]	; (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003476:	f7ff ff59 	bl	800332c <LL_ADC_IsEnabled>
 800347a:	4603      	mov	r3, r0
 800347c:	4323      	orrs	r3, r4
 800347e:	2b00      	cmp	r3, #0
 8003480:	d112      	bne.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800348a:	f023 030f 	bic.w	r3, r3, #15
 800348e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003490:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003492:	e009      	b.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80034a6:	e000      	b.n	80034aa <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	377c      	adds	r7, #124	; 0x7c
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd90      	pop	{r4, r7, pc}
 80034be:	bf00      	nop
 80034c0:	50040000 	.word	0x50040000
 80034c4:	50040100 	.word	0x50040100
 80034c8:	50040300 	.word	0x50040300
 80034cc:	50040200 	.word	0x50040200

080034d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e0ed      	b.n	80036be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fe fd28 	bl	8001f44 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0202 	bic.w	r2, r2, #2
 8003502:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003504:	f7ff f814 	bl	8002530 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800350a:	e012      	b.n	8003532 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800350c:	f7ff f810 	bl	8002530 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b0a      	cmp	r3, #10
 8003518:	d90b      	bls.n	8003532 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2205      	movs	r2, #5
 800352a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e0c5      	b.n	80036be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e5      	bne.n	800350c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003550:	f7fe ffee 	bl	8002530 <HAL_GetTick>
 8003554:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003556:	e012      	b.n	800357e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003558:	f7fe ffea 	bl	8002530 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b0a      	cmp	r3, #10
 8003564:	d90b      	bls.n	800357e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2205      	movs	r2, #5
 8003576:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e09f      	b.n	80036be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0e5      	beq.n	8003558 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	7e1b      	ldrb	r3, [r3, #24]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d108      	bne.n	80035a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	e007      	b.n	80035b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	7e5b      	ldrb	r3, [r3, #25]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d108      	bne.n	80035d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	e007      	b.n	80035e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	7e9b      	ldrb	r3, [r3, #26]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d108      	bne.n	80035fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0220 	orr.w	r2, r2, #32
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e007      	b.n	800360a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0220 	bic.w	r2, r2, #32
 8003608:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	7edb      	ldrb	r3, [r3, #27]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d108      	bne.n	8003624 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0210 	bic.w	r2, r2, #16
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	e007      	b.n	8003634 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0210 	orr.w	r2, r2, #16
 8003632:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	7f1b      	ldrb	r3, [r3, #28]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d108      	bne.n	800364e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0208 	orr.w	r2, r2, #8
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e007      	b.n	800365e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0208 	bic.w	r2, r2, #8
 800365c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	7f5b      	ldrb	r3, [r3, #29]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d108      	bne.n	8003678 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0204 	orr.w	r2, r2, #4
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	e007      	b.n	8003688 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0204 	bic.w	r2, r2, #4
 8003686:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	ea42 0103 	orr.w	r1, r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	1e5a      	subs	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b087      	sub	sp, #28
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036dc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80036de:	7cfb      	ldrb	r3, [r7, #19]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d003      	beq.n	80036ec <HAL_CAN_ConfigFilter+0x26>
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	f040 80aa 	bne.w	8003840 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80036f2:	f043 0201 	orr.w	r2, r3, #1
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2201      	movs	r2, #1
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	43db      	mvns	r3, r3
 8003716:	401a      	ands	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d123      	bne.n	800376e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	43db      	mvns	r3, r3
 8003730:	401a      	ands	r2, r3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003748:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3248      	adds	r2, #72	; 0x48
 800374e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003762:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003764:	6979      	ldr	r1, [r7, #20]
 8003766:	3348      	adds	r3, #72	; 0x48
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	440b      	add	r3, r1
 800376c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d122      	bne.n	80037bc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	431a      	orrs	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003796:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	3248      	adds	r2, #72	; 0x48
 800379c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037b2:	6979      	ldr	r1, [r7, #20]
 80037b4:	3348      	adds	r3, #72	; 0x48
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	440b      	add	r3, r1
 80037ba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d109      	bne.n	80037d8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	43db      	mvns	r3, r3
 80037ce:	401a      	ands	r2, r3
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80037d6:	e007      	b.n	80037e8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	431a      	orrs	r2, r3
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d109      	bne.n	8003804 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	43db      	mvns	r3, r3
 80037fa:	401a      	ands	r2, r3
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003802:	e007      	b.n	8003814 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	431a      	orrs	r2, r3
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d107      	bne.n	800382c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	431a      	orrs	r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003832:	f023 0201 	bic.w	r2, r3, #1
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800383c:	2300      	movs	r3, #0
 800383e:	e006      	b.n	800384e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
  }
}
 800384e:	4618      	mov	r0, r3
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800385a:	b480      	push	{r7}
 800385c:	b089      	sub	sp, #36	; 0x24
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800386e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003878:	7ffb      	ldrb	r3, [r7, #31]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d003      	beq.n	8003886 <HAL_CAN_AddTxMessage+0x2c>
 800387e:	7ffb      	ldrb	r3, [r7, #31]
 8003880:	2b02      	cmp	r3, #2
 8003882:	f040 80b8 	bne.w	80039f6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10a      	bne.n	80038a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003896:	2b00      	cmp	r3, #0
 8003898:	d105      	bne.n	80038a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80a0 	beq.w	80039e6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	0e1b      	lsrs	r3, r3, #24
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d907      	bls.n	80038c6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e09e      	b.n	8003a04 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80038c6:	2201      	movs	r2, #1
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	409a      	lsls	r2, r3
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10d      	bne.n	80038f4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80038e2:	68f9      	ldr	r1, [r7, #12]
 80038e4:	6809      	ldr	r1, [r1, #0]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	3318      	adds	r3, #24
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	440b      	add	r3, r1
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	e00f      	b.n	8003914 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038fe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003904:	68f9      	ldr	r1, [r7, #12]
 8003906:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003908:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	3318      	adds	r3, #24
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	440b      	add	r3, r1
 8003912:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6819      	ldr	r1, [r3, #0]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	3318      	adds	r3, #24
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	440b      	add	r3, r1
 8003924:	3304      	adds	r3, #4
 8003926:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	7d1b      	ldrb	r3, [r3, #20]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d111      	bne.n	8003954 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	3318      	adds	r3, #24
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	4413      	add	r3, r2
 800393c:	3304      	adds	r3, #4
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	6811      	ldr	r1, [r2, #0]
 8003944:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3318      	adds	r3, #24
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	440b      	add	r3, r1
 8003950:	3304      	adds	r3, #4
 8003952:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3307      	adds	r3, #7
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	061a      	lsls	r2, r3, #24
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3306      	adds	r3, #6
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	041b      	lsls	r3, r3, #16
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3305      	adds	r3, #5
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	4313      	orrs	r3, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	3204      	adds	r2, #4
 8003974:	7812      	ldrb	r2, [r2, #0]
 8003976:	4610      	mov	r0, r2
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	6811      	ldr	r1, [r2, #0]
 800397c:	ea43 0200 	orr.w	r2, r3, r0
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	440b      	add	r3, r1
 8003986:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800398a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3303      	adds	r3, #3
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	061a      	lsls	r2, r3, #24
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3302      	adds	r3, #2
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	041b      	lsls	r3, r3, #16
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3301      	adds	r3, #1
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	021b      	lsls	r3, r3, #8
 80039a6:	4313      	orrs	r3, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	7812      	ldrb	r2, [r2, #0]
 80039ac:	4610      	mov	r0, r2
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	6811      	ldr	r1, [r2, #0]
 80039b2:	ea43 0200 	orr.w	r2, r3, r0
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	440b      	add	r3, r1
 80039bc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80039c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	3318      	adds	r3, #24
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	4413      	add	r3, r2
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	6811      	ldr	r1, [r2, #0]
 80039d4:	f043 0201 	orr.w	r2, r3, #1
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3318      	adds	r3, #24
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	440b      	add	r3, r1
 80039e0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e00e      	b.n	8003a04 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e006      	b.n	8003a04 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
  }
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3724      	adds	r7, #36	; 0x24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a24:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a26:	7afb      	ldrb	r3, [r7, #11]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d002      	beq.n	8003a32 <HAL_CAN_IsTxMessagePending+0x22>
 8003a2c:	7afb      	ldrb	r3, [r7, #11]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d10b      	bne.n	8003a4a <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	069b      	lsls	r3, r3, #26
 8003a3c:	401a      	ands	r2, r3
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	069b      	lsls	r3, r3, #26
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d001      	beq.n	8003a4a <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8003a46:	2301      	movs	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a6c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a6e:	7dfb      	ldrb	r3, [r7, #23]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d003      	beq.n	8003a7c <HAL_CAN_GetRxMessage+0x24>
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	f040 80f3 	bne.w	8003c62 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10e      	bne.n	8003aa0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d116      	bne.n	8003abe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0e7      	b.n	8003c70 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d107      	bne.n	8003abe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e0d8      	b.n	8003c70 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	331b      	adds	r3, #27
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	4413      	add	r3, r2
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0204 	and.w	r2, r3, #4
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10c      	bne.n	8003af6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	331b      	adds	r3, #27
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	4413      	add	r3, r2
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	0d5b      	lsrs	r3, r3, #21
 8003aec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	e00b      	b.n	8003b0e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	331b      	adds	r3, #27
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	4413      	add	r3, r2
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	08db      	lsrs	r3, r3, #3
 8003b06:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	331b      	adds	r3, #27
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	4413      	add	r3, r2
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0202 	and.w	r2, r3, #2
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	331b      	adds	r3, #27
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	4413      	add	r3, r2
 8003b30:	3304      	adds	r3, #4
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 020f 	and.w	r2, r3, #15
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	331b      	adds	r3, #27
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	4413      	add	r3, r2
 8003b48:	3304      	adds	r3, #4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	0a1b      	lsrs	r3, r3, #8
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	331b      	adds	r3, #27
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	4413      	add	r3, r2
 8003b60:	3304      	adds	r3, #4
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	0a1a      	lsrs	r2, r3, #8
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	3301      	adds	r3, #1
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	0c1a      	lsrs	r2, r3, #16
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	0e1a      	lsrs	r2, r3, #24
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	3303      	adds	r3, #3
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	3304      	adds	r3, #4
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	0a1a      	lsrs	r2, r3, #8
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	3305      	adds	r3, #5
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	0c1a      	lsrs	r2, r3, #16
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	3306      	adds	r3, #6
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	0e1a      	lsrs	r2, r3, #24
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	3307      	adds	r3, #7
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d108      	bne.n	8003c4e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0220 	orr.w	r2, r2, #32
 8003c4a:	60da      	str	r2, [r3, #12]
 8003c4c:	e007      	b.n	8003c5e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0220 	orr.w	r2, r2, #32
 8003c5c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	e006      	b.n	8003c70 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
  }
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	; 0x28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003c84:	2300      	movs	r3, #0
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d07c      	beq.n	8003dbc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d023      	beq.n	8003d14 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f983 	bl	8003fea <HAL_CAN_TxMailbox0CompleteCallback>
 8003ce4:	e016      	b.n	8003d14 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf8:	e00c      	b.n	8003d14 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d004      	beq.n	8003d0e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0c:	e002      	b.n	8003d14 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f989 	bl	8004026 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d024      	beq.n	8003d68 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f963 	bl	8003ffe <HAL_CAN_TxMailbox1CompleteCallback>
 8003d38:	e016      	b.n	8003d68 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d004      	beq.n	8003d4e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4c:	e00c      	b.n	8003d68 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d004      	beq.n	8003d62 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d60:	e002      	b.n	8003d68 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f969 	bl	800403a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d024      	beq.n	8003dbc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f943 	bl	8004012 <HAL_CAN_TxMailbox2CompleteCallback>
 8003d8c:	e016      	b.n	8003dbc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d004      	beq.n	8003da2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003da0:	e00c      	b.n	8003dbc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
 8003db4:	e002      	b.n	8003dbc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f949 	bl	800404e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00c      	beq.n	8003de0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d007      	beq.n	8003de0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2210      	movs	r2, #16
 8003dde:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00b      	beq.n	8003e02 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d006      	beq.n	8003e02 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2208      	movs	r2, #8
 8003dfa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f93a 	bl	8004076 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d009      	beq.n	8003e20 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f921 	bl	8004062 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00c      	beq.n	8003e44 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2210      	movs	r2, #16
 8003e42:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d006      	beq.n	8003e66 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2208      	movs	r2, #8
 8003e5e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f91c 	bl	800409e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d009      	beq.n	8003e84 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f903 	bl	800408a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d006      	beq.n	8003ea6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2210      	movs	r2, #16
 8003e9e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f906 	bl	80040b2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00b      	beq.n	8003ec8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f8ff 	bl	80040c6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d07b      	beq.n	8003fca <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d072      	beq.n	8003fc2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d008      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d008      	beq.n	8003f14 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	f043 0302 	orr.w	r3, r3, #2
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d008      	beq.n	8003f30 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	f043 0304 	orr.w	r3, r3, #4
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d043      	beq.n	8003fc2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d03e      	beq.n	8003fc2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f4a:	2b60      	cmp	r3, #96	; 0x60
 8003f4c:	d02b      	beq.n	8003fa6 <HAL_CAN_IRQHandler+0x32a>
 8003f4e:	2b60      	cmp	r3, #96	; 0x60
 8003f50:	d82e      	bhi.n	8003fb0 <HAL_CAN_IRQHandler+0x334>
 8003f52:	2b50      	cmp	r3, #80	; 0x50
 8003f54:	d022      	beq.n	8003f9c <HAL_CAN_IRQHandler+0x320>
 8003f56:	2b50      	cmp	r3, #80	; 0x50
 8003f58:	d82a      	bhi.n	8003fb0 <HAL_CAN_IRQHandler+0x334>
 8003f5a:	2b40      	cmp	r3, #64	; 0x40
 8003f5c:	d019      	beq.n	8003f92 <HAL_CAN_IRQHandler+0x316>
 8003f5e:	2b40      	cmp	r3, #64	; 0x40
 8003f60:	d826      	bhi.n	8003fb0 <HAL_CAN_IRQHandler+0x334>
 8003f62:	2b30      	cmp	r3, #48	; 0x30
 8003f64:	d010      	beq.n	8003f88 <HAL_CAN_IRQHandler+0x30c>
 8003f66:	2b30      	cmp	r3, #48	; 0x30
 8003f68:	d822      	bhi.n	8003fb0 <HAL_CAN_IRQHandler+0x334>
 8003f6a:	2b10      	cmp	r3, #16
 8003f6c:	d002      	beq.n	8003f74 <HAL_CAN_IRQHandler+0x2f8>
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d005      	beq.n	8003f7e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003f72:	e01d      	b.n	8003fb0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	f043 0308 	orr.w	r3, r3, #8
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f7c:	e019      	b.n	8003fb2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	f043 0310 	orr.w	r3, r3, #16
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f86:	e014      	b.n	8003fb2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	f043 0320 	orr.w	r3, r3, #32
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f90:	e00f      	b.n	8003fb2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f9a:	e00a      	b.n	8003fb2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003fa4:	e005      	b.n	8003fb2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003fae:	e000      	b.n	8003fb2 <HAL_CAN_IRQHandler+0x336>
            break;
 8003fb0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699a      	ldr	r2, [r3, #24]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003fc0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f87c 	bl	80040da <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003fe2:	bf00      	nop
 8003fe4:	3728      	adds	r7, #40	; 0x28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
	...

080040f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <__NVIC_SetPriorityGrouping+0x44>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800410c:	4013      	ands	r3, r2
 800410e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800411c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004122:	4a04      	ldr	r2, [pc, #16]	; (8004134 <__NVIC_SetPriorityGrouping+0x44>)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	60d3      	str	r3, [r2, #12]
}
 8004128:	bf00      	nop
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	e000ed00 	.word	0xe000ed00

08004138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800413c:	4b04      	ldr	r3, [pc, #16]	; (8004150 <__NVIC_GetPriorityGrouping+0x18>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	0a1b      	lsrs	r3, r3, #8
 8004142:	f003 0307 	and.w	r3, r3, #7
}
 8004146:	4618      	mov	r0, r3
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	e000ed00 	.word	0xe000ed00

08004154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800415e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004162:	2b00      	cmp	r3, #0
 8004164:	db0b      	blt.n	800417e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004166:	79fb      	ldrb	r3, [r7, #7]
 8004168:	f003 021f 	and.w	r2, r3, #31
 800416c:	4907      	ldr	r1, [pc, #28]	; (800418c <__NVIC_EnableIRQ+0x38>)
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	2001      	movs	r0, #1
 8004176:	fa00 f202 	lsl.w	r2, r0, r2
 800417a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	e000e100 	.word	0xe000e100

08004190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	6039      	str	r1, [r7, #0]
 800419a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800419c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	db0a      	blt.n	80041ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	490c      	ldr	r1, [pc, #48]	; (80041dc <__NVIC_SetPriority+0x4c>)
 80041aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ae:	0112      	lsls	r2, r2, #4
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	440b      	add	r3, r1
 80041b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041b8:	e00a      	b.n	80041d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	4908      	ldr	r1, [pc, #32]	; (80041e0 <__NVIC_SetPriority+0x50>)
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	3b04      	subs	r3, #4
 80041c8:	0112      	lsls	r2, r2, #4
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	440b      	add	r3, r1
 80041ce:	761a      	strb	r2, [r3, #24]
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	e000e100 	.word	0xe000e100
 80041e0:	e000ed00 	.word	0xe000ed00

080041e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b089      	sub	sp, #36	; 0x24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f1c3 0307 	rsb	r3, r3, #7
 80041fe:	2b04      	cmp	r3, #4
 8004200:	bf28      	it	cs
 8004202:	2304      	movcs	r3, #4
 8004204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	3304      	adds	r3, #4
 800420a:	2b06      	cmp	r3, #6
 800420c:	d902      	bls.n	8004214 <NVIC_EncodePriority+0x30>
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	3b03      	subs	r3, #3
 8004212:	e000      	b.n	8004216 <NVIC_EncodePriority+0x32>
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43da      	mvns	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	401a      	ands	r2, r3
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800422c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	fa01 f303 	lsl.w	r3, r1, r3
 8004236:	43d9      	mvns	r1, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800423c:	4313      	orrs	r3, r2
         );
}
 800423e:	4618      	mov	r0, r3
 8004240:	3724      	adds	r7, #36	; 0x24
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff ff4c 	bl	80040f0 <__NVIC_SetPriorityGrouping>
}
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004272:	f7ff ff61 	bl	8004138 <__NVIC_GetPriorityGrouping>
 8004276:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	6978      	ldr	r0, [r7, #20]
 800427e:	f7ff ffb1 	bl	80041e4 <NVIC_EncodePriority>
 8004282:	4602      	mov	r2, r0
 8004284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004288:	4611      	mov	r1, r2
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff ff80 	bl	8004190 <__NVIC_SetPriority>
}
 8004290:	bf00      	nop
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff ff54 	bl	8004154 <__NVIC_EnableIRQ>
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042c2:	e17f      	b.n	80045c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	2101      	movs	r1, #1
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	4013      	ands	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 8171 	beq.w	80045be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d00b      	beq.n	80042fc <HAL_GPIO_Init+0x48>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d007      	beq.n	80042fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042f0:	2b11      	cmp	r3, #17
 80042f2:	d003      	beq.n	80042fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b12      	cmp	r3, #18
 80042fa:	d130      	bne.n	800435e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	2203      	movs	r2, #3
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4013      	ands	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004332:	2201      	movs	r2, #1
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4013      	ands	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	091b      	lsrs	r3, r3, #4
 8004348:	f003 0201 	and.w	r2, r3, #1
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b03      	cmp	r3, #3
 8004368:	d118      	bne.n	800439c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004370:	2201      	movs	r2, #1
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	43db      	mvns	r3, r3
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4013      	ands	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	08db      	lsrs	r3, r3, #3
 8004386:	f003 0201 	and.w	r2, r3, #1
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	2203      	movs	r2, #3
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	43db      	mvns	r3, r3
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4013      	ands	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d003      	beq.n	80043dc <HAL_GPIO_Init+0x128>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b12      	cmp	r3, #18
 80043da:	d123      	bne.n	8004424 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	08da      	lsrs	r2, r3, #3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3208      	adds	r2, #8
 80043e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	220f      	movs	r2, #15
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	43db      	mvns	r3, r3
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4013      	ands	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	08da      	lsrs	r2, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3208      	adds	r2, #8
 800441e:	6939      	ldr	r1, [r7, #16]
 8004420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	2203      	movs	r2, #3
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4013      	ands	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 0203 	and.w	r2, r3, #3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 80ac 	beq.w	80045be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004466:	4b5f      	ldr	r3, [pc, #380]	; (80045e4 <HAL_GPIO_Init+0x330>)
 8004468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446a:	4a5e      	ldr	r2, [pc, #376]	; (80045e4 <HAL_GPIO_Init+0x330>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	6613      	str	r3, [r2, #96]	; 0x60
 8004472:	4b5c      	ldr	r3, [pc, #368]	; (80045e4 <HAL_GPIO_Init+0x330>)
 8004474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800447e:	4a5a      	ldr	r2, [pc, #360]	; (80045e8 <HAL_GPIO_Init+0x334>)
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	089b      	lsrs	r3, r3, #2
 8004484:	3302      	adds	r3, #2
 8004486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800448a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	220f      	movs	r2, #15
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	43db      	mvns	r3, r3
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4013      	ands	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044a8:	d025      	beq.n	80044f6 <HAL_GPIO_Init+0x242>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a4f      	ldr	r2, [pc, #316]	; (80045ec <HAL_GPIO_Init+0x338>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d01f      	beq.n	80044f2 <HAL_GPIO_Init+0x23e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a4e      	ldr	r2, [pc, #312]	; (80045f0 <HAL_GPIO_Init+0x33c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d019      	beq.n	80044ee <HAL_GPIO_Init+0x23a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a4d      	ldr	r2, [pc, #308]	; (80045f4 <HAL_GPIO_Init+0x340>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <HAL_GPIO_Init+0x236>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a4c      	ldr	r2, [pc, #304]	; (80045f8 <HAL_GPIO_Init+0x344>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00d      	beq.n	80044e6 <HAL_GPIO_Init+0x232>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a4b      	ldr	r2, [pc, #300]	; (80045fc <HAL_GPIO_Init+0x348>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d007      	beq.n	80044e2 <HAL_GPIO_Init+0x22e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a4a      	ldr	r2, [pc, #296]	; (8004600 <HAL_GPIO_Init+0x34c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <HAL_GPIO_Init+0x22a>
 80044da:	2306      	movs	r3, #6
 80044dc:	e00c      	b.n	80044f8 <HAL_GPIO_Init+0x244>
 80044de:	2307      	movs	r3, #7
 80044e0:	e00a      	b.n	80044f8 <HAL_GPIO_Init+0x244>
 80044e2:	2305      	movs	r3, #5
 80044e4:	e008      	b.n	80044f8 <HAL_GPIO_Init+0x244>
 80044e6:	2304      	movs	r3, #4
 80044e8:	e006      	b.n	80044f8 <HAL_GPIO_Init+0x244>
 80044ea:	2303      	movs	r3, #3
 80044ec:	e004      	b.n	80044f8 <HAL_GPIO_Init+0x244>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e002      	b.n	80044f8 <HAL_GPIO_Init+0x244>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <HAL_GPIO_Init+0x244>
 80044f6:	2300      	movs	r3, #0
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	f002 0203 	and.w	r2, r2, #3
 80044fe:	0092      	lsls	r2, r2, #2
 8004500:	4093      	lsls	r3, r2
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004508:	4937      	ldr	r1, [pc, #220]	; (80045e8 <HAL_GPIO_Init+0x334>)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	089b      	lsrs	r3, r3, #2
 800450e:	3302      	adds	r3, #2
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004516:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <HAL_GPIO_Init+0x350>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	43db      	mvns	r3, r3
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4013      	ands	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800453a:	4a32      	ldr	r2, [pc, #200]	; (8004604 <HAL_GPIO_Init+0x350>)
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004540:	4b30      	ldr	r3, [pc, #192]	; (8004604 <HAL_GPIO_Init+0x350>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	43db      	mvns	r3, r3
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4013      	ands	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004564:	4a27      	ldr	r2, [pc, #156]	; (8004604 <HAL_GPIO_Init+0x350>)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800456a:	4b26      	ldr	r3, [pc, #152]	; (8004604 <HAL_GPIO_Init+0x350>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	43db      	mvns	r3, r3
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4013      	ands	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800458e:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <HAL_GPIO_Init+0x350>)
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004594:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <HAL_GPIO_Init+0x350>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	43db      	mvns	r3, r3
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4013      	ands	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045b8:	4a12      	ldr	r2, [pc, #72]	; (8004604 <HAL_GPIO_Init+0x350>)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	3301      	adds	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fa22 f303 	lsr.w	r3, r2, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f47f ae78 	bne.w	80042c4 <HAL_GPIO_Init+0x10>
  }
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40010000 	.word	0x40010000
 80045ec:	48000400 	.word	0x48000400
 80045f0:	48000800 	.word	0x48000800
 80045f4:	48000c00 	.word	0x48000c00
 80045f8:	48001000 	.word	0x48001000
 80045fc:	48001400 	.word	0x48001400
 8004600:	48001800 	.word	0x48001800
 8004604:	40010400 	.word	0x40010400

08004608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	807b      	strh	r3, [r7, #2]
 8004614:	4613      	mov	r3, r2
 8004616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004618:	787b      	ldrb	r3, [r7, #1]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800461e:	887a      	ldrh	r2, [r7, #2]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004624:	e002      	b.n	800462c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004626:	887a      	ldrh	r2, [r7, #2]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4013      	ands	r3, r2
 8004650:	041a      	lsls	r2, r3, #16
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	43d9      	mvns	r1, r3
 8004656:	887b      	ldrh	r3, [r7, #2]
 8004658:	400b      	ands	r3, r1
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	619a      	str	r2, [r3, #24]
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e081      	b.n	8004782 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fd fca2 	bl	8001fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2224      	movs	r2, #36	; 0x24
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0201 	bic.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d107      	bne.n	80046e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	e006      	b.n	80046f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80046f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d104      	bne.n	8004706 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004704:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004718:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004728:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	ea42 0103 	orr.w	r1, r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	021a      	lsls	r2, r3, #8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69d9      	ldr	r1, [r3, #28]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1a      	ldr	r2, [r3, #32]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b20      	cmp	r3, #32
 800479e:	d138      	bne.n	8004812 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e032      	b.n	8004814 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2224      	movs	r2, #36	; 0x24
 80047ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0201 	bic.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047dc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0201 	orr.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004812:	2302      	movs	r3, #2
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b20      	cmp	r3, #32
 8004834:	d139      	bne.n	80048aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004840:	2302      	movs	r3, #2
 8004842:	e033      	b.n	80048ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2224      	movs	r2, #36	; 0x24
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004872:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f042 0201 	orr.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	e000      	b.n	80048ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048aa:	2302      	movs	r3, #2
  }
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048bc:	4b04      	ldr	r3, [pc, #16]	; (80048d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40007000 	.word	0x40007000

080048d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e2:	d130      	bne.n	8004946 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80048e4:	4b23      	ldr	r3, [pc, #140]	; (8004974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f0:	d038      	beq.n	8004964 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048f2:	4b20      	ldr	r3, [pc, #128]	; (8004974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048fa:	4a1e      	ldr	r2, [pc, #120]	; (8004974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004900:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004902:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2232      	movs	r2, #50	; 0x32
 8004908:	fb02 f303 	mul.w	r3, r2, r3
 800490c:	4a1b      	ldr	r2, [pc, #108]	; (800497c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	0c9b      	lsrs	r3, r3, #18
 8004914:	3301      	adds	r3, #1
 8004916:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004918:	e002      	b.n	8004920 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3b01      	subs	r3, #1
 800491e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004920:	4b14      	ldr	r3, [pc, #80]	; (8004974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800492c:	d102      	bne.n	8004934 <HAL_PWREx_ControlVoltageScaling+0x60>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f2      	bne.n	800491a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004934:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800493c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004940:	d110      	bne.n	8004964 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e00f      	b.n	8004966 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004946:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800494e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004952:	d007      	beq.n	8004964 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004954:	4b07      	ldr	r3, [pc, #28]	; (8004974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800495c:	4a05      	ldr	r2, [pc, #20]	; (8004974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800495e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004962:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40007000 	.word	0x40007000
 8004978:	2000000c 	.word	0x2000000c
 800497c:	431bde83 	.word	0x431bde83

08004980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e3d4      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004992:	4ba1      	ldr	r3, [pc, #644]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800499c:	4b9e      	ldr	r3, [pc, #632]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 80e4 	beq.w	8004b7c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d007      	beq.n	80049ca <HAL_RCC_OscConfig+0x4a>
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	2b0c      	cmp	r3, #12
 80049be:	f040 808b 	bne.w	8004ad8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	f040 8087 	bne.w	8004ad8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049ca:	4b93      	ldr	r3, [pc, #588]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d005      	beq.n	80049e2 <HAL_RCC_OscConfig+0x62>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e3ac      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1a      	ldr	r2, [r3, #32]
 80049e6:	4b8c      	ldr	r3, [pc, #560]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d004      	beq.n	80049fc <HAL_RCC_OscConfig+0x7c>
 80049f2:	4b89      	ldr	r3, [pc, #548]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049fa:	e005      	b.n	8004a08 <HAL_RCC_OscConfig+0x88>
 80049fc:	4b86      	ldr	r3, [pc, #536]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 80049fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a02:	091b      	lsrs	r3, r3, #4
 8004a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d223      	bcs.n	8004a54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fd73 	bl	80054fc <RCC_SetFlashLatencyFromMSIRange>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e38d      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a20:	4b7d      	ldr	r3, [pc, #500]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a7c      	ldr	r2, [pc, #496]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004a26:	f043 0308 	orr.w	r3, r3, #8
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	4b7a      	ldr	r3, [pc, #488]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	4977      	ldr	r1, [pc, #476]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a3e:	4b76      	ldr	r3, [pc, #472]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	4972      	ldr	r1, [pc, #456]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	604b      	str	r3, [r1, #4]
 8004a52:	e025      	b.n	8004aa0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a54:	4b70      	ldr	r3, [pc, #448]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a6f      	ldr	r2, [pc, #444]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004a5a:	f043 0308 	orr.w	r3, r3, #8
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	4b6d      	ldr	r3, [pc, #436]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	496a      	ldr	r1, [pc, #424]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a72:	4b69      	ldr	r3, [pc, #420]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	4965      	ldr	r1, [pc, #404]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d109      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fd33 	bl	80054fc <RCC_SetFlashLatencyFromMSIRange>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e34d      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aa0:	f000 fc36 	bl	8005310 <HAL_RCC_GetSysClockFreq>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	4b5c      	ldr	r3, [pc, #368]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	091b      	lsrs	r3, r3, #4
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	495a      	ldr	r1, [pc, #360]	; (8004c1c <HAL_RCC_OscConfig+0x29c>)
 8004ab2:	5ccb      	ldrb	r3, [r1, r3]
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8004abc:	4a58      	ldr	r2, [pc, #352]	; (8004c20 <HAL_RCC_OscConfig+0x2a0>)
 8004abe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ac0:	4b58      	ldr	r3, [pc, #352]	; (8004c24 <HAL_RCC_OscConfig+0x2a4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fd fb53 	bl	8002170 <HAL_InitTick>
 8004aca:	4603      	mov	r3, r0
 8004acc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d052      	beq.n	8004b7a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	e331      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d032      	beq.n	8004b46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ae0:	4b4d      	ldr	r3, [pc, #308]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a4c      	ldr	r2, [pc, #304]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004ae6:	f043 0301 	orr.w	r3, r3, #1
 8004aea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004aec:	f7fd fd20 	bl	8002530 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004af4:	f7fd fd1c 	bl	8002530 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e31a      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b06:	4b44      	ldr	r3, [pc, #272]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0f0      	beq.n	8004af4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b12:	4b41      	ldr	r3, [pc, #260]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a40      	ldr	r2, [pc, #256]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004b18:	f043 0308 	orr.w	r3, r3, #8
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	4b3e      	ldr	r3, [pc, #248]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	493b      	ldr	r1, [pc, #236]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b30:	4b39      	ldr	r3, [pc, #228]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	4936      	ldr	r1, [pc, #216]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	604b      	str	r3, [r1, #4]
 8004b44:	e01a      	b.n	8004b7c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b46:	4b34      	ldr	r3, [pc, #208]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a33      	ldr	r2, [pc, #204]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004b4c:	f023 0301 	bic.w	r3, r3, #1
 8004b50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b52:	f7fd fced 	bl	8002530 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b5a:	f7fd fce9 	bl	8002530 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e2e7      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b6c:	4b2a      	ldr	r3, [pc, #168]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f0      	bne.n	8004b5a <HAL_RCC_OscConfig+0x1da>
 8004b78:	e000      	b.n	8004b7c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d074      	beq.n	8004c72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d005      	beq.n	8004b9a <HAL_RCC_OscConfig+0x21a>
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b0c      	cmp	r3, #12
 8004b92:	d10e      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d10b      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b9a:	4b1f      	ldr	r3, [pc, #124]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d064      	beq.n	8004c70 <HAL_RCC_OscConfig+0x2f0>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d160      	bne.n	8004c70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e2c4      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bba:	d106      	bne.n	8004bca <HAL_RCC_OscConfig+0x24a>
 8004bbc:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a15      	ldr	r2, [pc, #84]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	e01d      	b.n	8004c06 <HAL_RCC_OscConfig+0x286>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd2:	d10c      	bne.n	8004bee <HAL_RCC_OscConfig+0x26e>
 8004bd4:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a0f      	ldr	r2, [pc, #60]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004bda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a0c      	ldr	r2, [pc, #48]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	e00b      	b.n	8004c06 <HAL_RCC_OscConfig+0x286>
 8004bee:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a06      	ldr	r2, [pc, #24]	; (8004c18 <HAL_RCC_OscConfig+0x298>)
 8004c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d01c      	beq.n	8004c48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0e:	f7fd fc8f 	bl	8002530 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c14:	e011      	b.n	8004c3a <HAL_RCC_OscConfig+0x2ba>
 8004c16:	bf00      	nop
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	0800ed54 	.word	0x0800ed54
 8004c20:	2000000c 	.word	0x2000000c
 8004c24:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c28:	f7fd fc82 	bl	8002530 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b64      	cmp	r3, #100	; 0x64
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e280      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c3a:	4baf      	ldr	r3, [pc, #700]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f0      	beq.n	8004c28 <HAL_RCC_OscConfig+0x2a8>
 8004c46:	e014      	b.n	8004c72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c48:	f7fd fc72 	bl	8002530 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c50:	f7fd fc6e 	bl	8002530 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b64      	cmp	r3, #100	; 0x64
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e26c      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c62:	4ba5      	ldr	r3, [pc, #660]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f0      	bne.n	8004c50 <HAL_RCC_OscConfig+0x2d0>
 8004c6e:	e000      	b.n	8004c72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d060      	beq.n	8004d40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d005      	beq.n	8004c90 <HAL_RCC_OscConfig+0x310>
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	2b0c      	cmp	r3, #12
 8004c88:	d119      	bne.n	8004cbe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d116      	bne.n	8004cbe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c90:	4b99      	ldr	r3, [pc, #612]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x328>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e249      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca8:	4b93      	ldr	r3, [pc, #588]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	4990      	ldr	r1, [pc, #576]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cbc:	e040      	b.n	8004d40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d023      	beq.n	8004d0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cc6:	4b8c      	ldr	r3, [pc, #560]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a8b      	ldr	r2, [pc, #556]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd2:	f7fd fc2d 	bl	8002530 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cda:	f7fd fc29 	bl	8002530 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e227      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cec:	4b82      	ldr	r3, [pc, #520]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf8:	4b7f      	ldr	r3, [pc, #508]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	061b      	lsls	r3, r3, #24
 8004d06:	497c      	ldr	r1, [pc, #496]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	604b      	str	r3, [r1, #4]
 8004d0c:	e018      	b.n	8004d40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d0e:	4b7a      	ldr	r3, [pc, #488]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a79      	ldr	r2, [pc, #484]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1a:	f7fd fc09 	bl	8002530 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d22:	f7fd fc05 	bl	8002530 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e203      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d34:	4b70      	ldr	r3, [pc, #448]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f0      	bne.n	8004d22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d03c      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01c      	beq.n	8004d8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d54:	4b68      	ldr	r3, [pc, #416]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d5a:	4a67      	ldr	r2, [pc, #412]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d64:	f7fd fbe4 	bl	8002530 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d6c:	f7fd fbe0 	bl	8002530 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e1de      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d7e:	4b5e      	ldr	r3, [pc, #376]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0ef      	beq.n	8004d6c <HAL_RCC_OscConfig+0x3ec>
 8004d8c:	e01b      	b.n	8004dc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d8e:	4b5a      	ldr	r3, [pc, #360]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d94:	4a58      	ldr	r2, [pc, #352]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004d96:	f023 0301 	bic.w	r3, r3, #1
 8004d9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9e:	f7fd fbc7 	bl	8002530 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da6:	f7fd fbc3 	bl	8002530 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e1c1      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004db8:	4b4f      	ldr	r3, [pc, #316]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1ef      	bne.n	8004da6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80a6 	beq.w	8004f20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004dd8:	4b47      	ldr	r3, [pc, #284]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10d      	bne.n	8004e00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de4:	4b44      	ldr	r3, [pc, #272]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de8:	4a43      	ldr	r2, [pc, #268]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dee:	6593      	str	r3, [r2, #88]	; 0x58
 8004df0:	4b41      	ldr	r3, [pc, #260]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df8:	60bb      	str	r3, [r7, #8]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e00:	4b3e      	ldr	r3, [pc, #248]	; (8004efc <HAL_RCC_OscConfig+0x57c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d118      	bne.n	8004e3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e0c:	4b3b      	ldr	r3, [pc, #236]	; (8004efc <HAL_RCC_OscConfig+0x57c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a3a      	ldr	r2, [pc, #232]	; (8004efc <HAL_RCC_OscConfig+0x57c>)
 8004e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e18:	f7fd fb8a 	bl	8002530 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e20:	f7fd fb86 	bl	8002530 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e184      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e32:	4b32      	ldr	r3, [pc, #200]	; (8004efc <HAL_RCC_OscConfig+0x57c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d108      	bne.n	8004e58 <HAL_RCC_OscConfig+0x4d8>
 8004e46:	4b2c      	ldr	r3, [pc, #176]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4c:	4a2a      	ldr	r2, [pc, #168]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e56:	e024      	b.n	8004ea2 <HAL_RCC_OscConfig+0x522>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b05      	cmp	r3, #5
 8004e5e:	d110      	bne.n	8004e82 <HAL_RCC_OscConfig+0x502>
 8004e60:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e66:	4a24      	ldr	r2, [pc, #144]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004e68:	f043 0304 	orr.w	r3, r3, #4
 8004e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e70:	4b21      	ldr	r3, [pc, #132]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e76:	4a20      	ldr	r2, [pc, #128]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e80:	e00f      	b.n	8004ea2 <HAL_RCC_OscConfig+0x522>
 8004e82:	4b1d      	ldr	r3, [pc, #116]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e88:	4a1b      	ldr	r2, [pc, #108]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004e8a:	f023 0301 	bic.w	r3, r3, #1
 8004e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e92:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e98:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004e9a:	f023 0304 	bic.w	r3, r3, #4
 8004e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d016      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eaa:	f7fd fb41 	bl	8002530 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eb0:	e00a      	b.n	8004ec8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb2:	f7fd fb3d 	bl	8002530 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e139      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <HAL_RCC_OscConfig+0x578>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0ed      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x532>
 8004ed6:	e01a      	b.n	8004f0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed8:	f7fd fb2a 	bl	8002530 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ede:	e00f      	b.n	8004f00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee0:	f7fd fb26 	bl	8002530 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d906      	bls.n	8004f00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e122      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
 8004ef6:	bf00      	nop
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f00:	4b90      	ldr	r3, [pc, #576]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e8      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f0e:	7ffb      	ldrb	r3, [r7, #31]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d105      	bne.n	8004f20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f14:	4b8b      	ldr	r3, [pc, #556]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8004f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f18:	4a8a      	ldr	r2, [pc, #552]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8004f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 8108 	beq.w	800513a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	f040 80d0 	bne.w	80050d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f34:	4b83      	ldr	r3, [pc, #524]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f003 0203 	and.w	r2, r3, #3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d130      	bne.n	8004faa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	3b01      	subs	r3, #1
 8004f54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d127      	bne.n	8004faa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d11f      	bne.n	8004faa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f74:	2a07      	cmp	r2, #7
 8004f76:	bf14      	ite	ne
 8004f78:	2201      	movne	r2, #1
 8004f7a:	2200      	moveq	r2, #0
 8004f7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d113      	bne.n	8004faa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	085b      	lsrs	r3, r3, #1
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d109      	bne.n	8004faa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	085b      	lsrs	r3, r3, #1
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d06e      	beq.n	8005088 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	2b0c      	cmp	r3, #12
 8004fae:	d069      	beq.n	8005084 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004fb0:	4b64      	ldr	r3, [pc, #400]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d105      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004fbc:	4b61      	ldr	r3, [pc, #388]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e0b7      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004fcc:	4b5d      	ldr	r3, [pc, #372]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a5c      	ldr	r2, [pc, #368]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8004fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fd6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fd8:	f7fd faaa 	bl	8002530 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe0:	f7fd faa6 	bl	8002530 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e0a4      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ff2:	4b54      	ldr	r3, [pc, #336]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ffe:	4b51      	ldr	r3, [pc, #324]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	4b51      	ldr	r3, [pc, #324]	; (8005148 <HAL_RCC_OscConfig+0x7c8>)
 8005004:	4013      	ands	r3, r2
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800500e:	3a01      	subs	r2, #1
 8005010:	0112      	lsls	r2, r2, #4
 8005012:	4311      	orrs	r1, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005018:	0212      	lsls	r2, r2, #8
 800501a:	4311      	orrs	r1, r2
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005020:	0852      	lsrs	r2, r2, #1
 8005022:	3a01      	subs	r2, #1
 8005024:	0552      	lsls	r2, r2, #21
 8005026:	4311      	orrs	r1, r2
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800502c:	0852      	lsrs	r2, r2, #1
 800502e:	3a01      	subs	r2, #1
 8005030:	0652      	lsls	r2, r2, #25
 8005032:	4311      	orrs	r1, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005038:	0912      	lsrs	r2, r2, #4
 800503a:	0452      	lsls	r2, r2, #17
 800503c:	430a      	orrs	r2, r1
 800503e:	4941      	ldr	r1, [pc, #260]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8005040:	4313      	orrs	r3, r2
 8005042:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005044:	4b3f      	ldr	r3, [pc, #252]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a3e      	ldr	r2, [pc, #248]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 800504a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800504e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005050:	4b3c      	ldr	r3, [pc, #240]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	4a3b      	ldr	r2, [pc, #236]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8005056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800505a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800505c:	f7fd fa68 	bl	8002530 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005064:	f7fd fa64 	bl	8002530 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e062      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005076:	4b33      	ldr	r3, [pc, #204]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005082:	e05a      	b.n	800513a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e059      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005088:	4b2e      	ldr	r3, [pc, #184]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d152      	bne.n	800513a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005094:	4b2b      	ldr	r3, [pc, #172]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a2a      	ldr	r2, [pc, #168]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 800509a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800509e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050a0:	4b28      	ldr	r3, [pc, #160]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	4a27      	ldr	r2, [pc, #156]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 80050a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050ac:	f7fd fa40 	bl	8002530 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b4:	f7fd fa3c 	bl	8002530 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e03a      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050c6:	4b1f      	ldr	r3, [pc, #124]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0f0      	beq.n	80050b4 <HAL_RCC_OscConfig+0x734>
 80050d2:	e032      	b.n	800513a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	2b0c      	cmp	r3, #12
 80050d8:	d02d      	beq.n	8005136 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050da:	4b1a      	ldr	r3, [pc, #104]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a19      	ldr	r2, [pc, #100]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 80050e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80050e6:	4b17      	ldr	r3, [pc, #92]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d105      	bne.n	80050fe <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80050f2:	4b14      	ldr	r3, [pc, #80]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	4a13      	ldr	r2, [pc, #76]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 80050f8:	f023 0303 	bic.w	r3, r3, #3
 80050fc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80050fe:	4b11      	ldr	r3, [pc, #68]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	4a10      	ldr	r2, [pc, #64]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 8005104:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800510c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510e:	f7fd fa0f 	bl	8002530 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005116:	f7fd fa0b 	bl	8002530 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e009      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005128:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_RCC_OscConfig+0x7c4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1f0      	bne.n	8005116 <HAL_RCC_OscConfig+0x796>
 8005134:	e001      	b.n	800513a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3720      	adds	r7, #32
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40021000 	.word	0x40021000
 8005148:	f99d808c 	.word	0xf99d808c

0800514c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e0c8      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005160:	4b66      	ldr	r3, [pc, #408]	; (80052fc <HAL_RCC_ClockConfig+0x1b0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d910      	bls.n	8005190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516e:	4b63      	ldr	r3, [pc, #396]	; (80052fc <HAL_RCC_ClockConfig+0x1b0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f023 0207 	bic.w	r2, r3, #7
 8005176:	4961      	ldr	r1, [pc, #388]	; (80052fc <HAL_RCC_ClockConfig+0x1b0>)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	4313      	orrs	r3, r2
 800517c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800517e:	4b5f      	ldr	r3, [pc, #380]	; (80052fc <HAL_RCC_ClockConfig+0x1b0>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d001      	beq.n	8005190 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0b0      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d04c      	beq.n	8005236 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d107      	bne.n	80051b4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051a4:	4b56      	ldr	r3, [pc, #344]	; (8005300 <HAL_RCC_ClockConfig+0x1b4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d121      	bne.n	80051f4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e09e      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d107      	bne.n	80051cc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051bc:	4b50      	ldr	r3, [pc, #320]	; (8005300 <HAL_RCC_ClockConfig+0x1b4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d115      	bne.n	80051f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e092      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d107      	bne.n	80051e4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051d4:	4b4a      	ldr	r3, [pc, #296]	; (8005300 <HAL_RCC_ClockConfig+0x1b4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d109      	bne.n	80051f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e086      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051e4:	4b46      	ldr	r3, [pc, #280]	; (8005300 <HAL_RCC_ClockConfig+0x1b4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e07e      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051f4:	4b42      	ldr	r3, [pc, #264]	; (8005300 <HAL_RCC_ClockConfig+0x1b4>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f023 0203 	bic.w	r2, r3, #3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	493f      	ldr	r1, [pc, #252]	; (8005300 <HAL_RCC_ClockConfig+0x1b4>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005206:	f7fd f993 	bl	8002530 <HAL_GetTick>
 800520a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520c:	e00a      	b.n	8005224 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800520e:	f7fd f98f 	bl	8002530 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f241 3288 	movw	r2, #5000	; 0x1388
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e066      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005224:	4b36      	ldr	r3, [pc, #216]	; (8005300 <HAL_RCC_ClockConfig+0x1b4>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 020c 	and.w	r2, r3, #12
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	429a      	cmp	r2, r3
 8005234:	d1eb      	bne.n	800520e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d008      	beq.n	8005254 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005242:	4b2f      	ldr	r3, [pc, #188]	; (8005300 <HAL_RCC_ClockConfig+0x1b4>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	492c      	ldr	r1, [pc, #176]	; (8005300 <HAL_RCC_ClockConfig+0x1b4>)
 8005250:	4313      	orrs	r3, r2
 8005252:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005254:	4b29      	ldr	r3, [pc, #164]	; (80052fc <HAL_RCC_ClockConfig+0x1b0>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d210      	bcs.n	8005284 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005262:	4b26      	ldr	r3, [pc, #152]	; (80052fc <HAL_RCC_ClockConfig+0x1b0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f023 0207 	bic.w	r2, r3, #7
 800526a:	4924      	ldr	r1, [pc, #144]	; (80052fc <HAL_RCC_ClockConfig+0x1b0>)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	4313      	orrs	r3, r2
 8005270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005272:	4b22      	ldr	r3, [pc, #136]	; (80052fc <HAL_RCC_ClockConfig+0x1b0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d001      	beq.n	8005284 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e036      	b.n	80052f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005290:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <HAL_RCC_ClockConfig+0x1b4>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	4918      	ldr	r1, [pc, #96]	; (8005300 <HAL_RCC_ClockConfig+0x1b4>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d009      	beq.n	80052c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ae:	4b14      	ldr	r3, [pc, #80]	; (8005300 <HAL_RCC_ClockConfig+0x1b4>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	4910      	ldr	r1, [pc, #64]	; (8005300 <HAL_RCC_ClockConfig+0x1b4>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052c2:	f000 f825 	bl	8005310 <HAL_RCC_GetSysClockFreq>
 80052c6:	4602      	mov	r2, r0
 80052c8:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <HAL_RCC_ClockConfig+0x1b4>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	091b      	lsrs	r3, r3, #4
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	490c      	ldr	r1, [pc, #48]	; (8005304 <HAL_RCC_ClockConfig+0x1b8>)
 80052d4:	5ccb      	ldrb	r3, [r1, r3]
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	fa22 f303 	lsr.w	r3, r2, r3
 80052de:	4a0a      	ldr	r2, [pc, #40]	; (8005308 <HAL_RCC_ClockConfig+0x1bc>)
 80052e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052e2:	4b0a      	ldr	r3, [pc, #40]	; (800530c <HAL_RCC_ClockConfig+0x1c0>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fc ff42 	bl	8002170 <HAL_InitTick>
 80052ec:	4603      	mov	r3, r0
 80052ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80052f0:	7afb      	ldrb	r3, [r7, #11]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40022000 	.word	0x40022000
 8005300:	40021000 	.word	0x40021000
 8005304:	0800ed54 	.word	0x0800ed54
 8005308:	2000000c 	.word	0x2000000c
 800530c:	20000010 	.word	0x20000010

08005310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005310:	b480      	push	{r7}
 8005312:	b089      	sub	sp, #36	; 0x24
 8005314:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	61fb      	str	r3, [r7, #28]
 800531a:	2300      	movs	r3, #0
 800531c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800531e:	4b3e      	ldr	r3, [pc, #248]	; (8005418 <HAL_RCC_GetSysClockFreq+0x108>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 030c 	and.w	r3, r3, #12
 8005326:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005328:	4b3b      	ldr	r3, [pc, #236]	; (8005418 <HAL_RCC_GetSysClockFreq+0x108>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <HAL_RCC_GetSysClockFreq+0x34>
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b0c      	cmp	r3, #12
 800533c:	d121      	bne.n	8005382 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d11e      	bne.n	8005382 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005344:	4b34      	ldr	r3, [pc, #208]	; (8005418 <HAL_RCC_GetSysClockFreq+0x108>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0308 	and.w	r3, r3, #8
 800534c:	2b00      	cmp	r3, #0
 800534e:	d107      	bne.n	8005360 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005350:	4b31      	ldr	r3, [pc, #196]	; (8005418 <HAL_RCC_GetSysClockFreq+0x108>)
 8005352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005356:	0a1b      	lsrs	r3, r3, #8
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	e005      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005360:	4b2d      	ldr	r3, [pc, #180]	; (8005418 <HAL_RCC_GetSysClockFreq+0x108>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	091b      	lsrs	r3, r3, #4
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800536c:	4a2b      	ldr	r2, [pc, #172]	; (800541c <HAL_RCC_GetSysClockFreq+0x10c>)
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005374:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10d      	bne.n	8005398 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005380:	e00a      	b.n	8005398 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	2b04      	cmp	r3, #4
 8005386:	d102      	bne.n	800538e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005388:	4b25      	ldr	r3, [pc, #148]	; (8005420 <HAL_RCC_GetSysClockFreq+0x110>)
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	e004      	b.n	8005398 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b08      	cmp	r3, #8
 8005392:	d101      	bne.n	8005398 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005394:	4b23      	ldr	r3, [pc, #140]	; (8005424 <HAL_RCC_GetSysClockFreq+0x114>)
 8005396:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	2b0c      	cmp	r3, #12
 800539c:	d134      	bne.n	8005408 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800539e:	4b1e      	ldr	r3, [pc, #120]	; (8005418 <HAL_RCC_GetSysClockFreq+0x108>)
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d003      	beq.n	80053b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d003      	beq.n	80053bc <HAL_RCC_GetSysClockFreq+0xac>
 80053b4:	e005      	b.n	80053c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053b6:	4b1a      	ldr	r3, [pc, #104]	; (8005420 <HAL_RCC_GetSysClockFreq+0x110>)
 80053b8:	617b      	str	r3, [r7, #20]
      break;
 80053ba:	e005      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053bc:	4b19      	ldr	r3, [pc, #100]	; (8005424 <HAL_RCC_GetSysClockFreq+0x114>)
 80053be:	617b      	str	r3, [r7, #20]
      break;
 80053c0:	e002      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	617b      	str	r3, [r7, #20]
      break;
 80053c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053c8:	4b13      	ldr	r3, [pc, #76]	; (8005418 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	091b      	lsrs	r3, r3, #4
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	3301      	adds	r3, #1
 80053d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053d6:	4b10      	ldr	r3, [pc, #64]	; (8005418 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	0a1b      	lsrs	r3, r3, #8
 80053dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	fb02 f203 	mul.w	r2, r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053ee:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <HAL_RCC_GetSysClockFreq+0x108>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	0e5b      	lsrs	r3, r3, #25
 80053f4:	f003 0303 	and.w	r3, r3, #3
 80053f8:	3301      	adds	r3, #1
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	fbb2 f3f3 	udiv	r3, r2, r3
 8005406:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005408:	69bb      	ldr	r3, [r7, #24]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3724      	adds	r7, #36	; 0x24
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40021000 	.word	0x40021000
 800541c:	0800ed6c 	.word	0x0800ed6c
 8005420:	00f42400 	.word	0x00f42400
 8005424:	007a1200 	.word	0x007a1200

08005428 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800542c:	4b03      	ldr	r3, [pc, #12]	; (800543c <HAL_RCC_GetHCLKFreq+0x14>)
 800542e:	681b      	ldr	r3, [r3, #0]
}
 8005430:	4618      	mov	r0, r3
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	2000000c 	.word	0x2000000c

08005440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005444:	f7ff fff0 	bl	8005428 <HAL_RCC_GetHCLKFreq>
 8005448:	4602      	mov	r2, r0
 800544a:	4b06      	ldr	r3, [pc, #24]	; (8005464 <HAL_RCC_GetPCLK1Freq+0x24>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	0a1b      	lsrs	r3, r3, #8
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	4904      	ldr	r1, [pc, #16]	; (8005468 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005456:	5ccb      	ldrb	r3, [r1, r3]
 8005458:	f003 031f 	and.w	r3, r3, #31
 800545c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005460:	4618      	mov	r0, r3
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40021000 	.word	0x40021000
 8005468:	0800ed64 	.word	0x0800ed64

0800546c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005470:	f7ff ffda 	bl	8005428 <HAL_RCC_GetHCLKFreq>
 8005474:	4602      	mov	r2, r0
 8005476:	4b06      	ldr	r3, [pc, #24]	; (8005490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	0adb      	lsrs	r3, r3, #11
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	4904      	ldr	r1, [pc, #16]	; (8005494 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005482:	5ccb      	ldrb	r3, [r1, r3]
 8005484:	f003 031f 	and.w	r3, r3, #31
 8005488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800548c:	4618      	mov	r0, r3
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40021000 	.word	0x40021000
 8005494:	0800ed64 	.word	0x0800ed64

08005498 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	220f      	movs	r2, #15
 80054a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80054a8:	4b12      	ldr	r3, [pc, #72]	; (80054f4 <HAL_RCC_GetClockConfig+0x5c>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 0203 	and.w	r2, r3, #3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80054b4:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <HAL_RCC_GetClockConfig+0x5c>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80054c0:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <HAL_RCC_GetClockConfig+0x5c>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80054cc:	4b09      	ldr	r3, [pc, #36]	; (80054f4 <HAL_RCC_GetClockConfig+0x5c>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	08db      	lsrs	r3, r3, #3
 80054d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80054da:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <HAL_RCC_GetClockConfig+0x60>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0207 	and.w	r2, r3, #7
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	601a      	str	r2, [r3, #0]
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40021000 	.word	0x40021000
 80054f8:	40022000 	.word	0x40022000

080054fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005504:	2300      	movs	r3, #0
 8005506:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005508:	4b2a      	ldr	r3, [pc, #168]	; (80055b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800550a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005514:	f7ff f9d0 	bl	80048b8 <HAL_PWREx_GetVoltageRange>
 8005518:	6178      	str	r0, [r7, #20]
 800551a:	e014      	b.n	8005546 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800551c:	4b25      	ldr	r3, [pc, #148]	; (80055b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800551e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005520:	4a24      	ldr	r2, [pc, #144]	; (80055b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005526:	6593      	str	r3, [r2, #88]	; 0x58
 8005528:	4b22      	ldr	r3, [pc, #136]	; (80055b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800552a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005534:	f7ff f9c0 	bl	80048b8 <HAL_PWREx_GetVoltageRange>
 8005538:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800553a:	4b1e      	ldr	r3, [pc, #120]	; (80055b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800553c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553e:	4a1d      	ldr	r2, [pc, #116]	; (80055b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005544:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800554c:	d10b      	bne.n	8005566 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b80      	cmp	r3, #128	; 0x80
 8005552:	d919      	bls.n	8005588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2ba0      	cmp	r3, #160	; 0xa0
 8005558:	d902      	bls.n	8005560 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800555a:	2302      	movs	r3, #2
 800555c:	613b      	str	r3, [r7, #16]
 800555e:	e013      	b.n	8005588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005560:	2301      	movs	r3, #1
 8005562:	613b      	str	r3, [r7, #16]
 8005564:	e010      	b.n	8005588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b80      	cmp	r3, #128	; 0x80
 800556a:	d902      	bls.n	8005572 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800556c:	2303      	movs	r3, #3
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	e00a      	b.n	8005588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b80      	cmp	r3, #128	; 0x80
 8005576:	d102      	bne.n	800557e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005578:	2302      	movs	r3, #2
 800557a:	613b      	str	r3, [r7, #16]
 800557c:	e004      	b.n	8005588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b70      	cmp	r3, #112	; 0x70
 8005582:	d101      	bne.n	8005588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005584:	2301      	movs	r3, #1
 8005586:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005588:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f023 0207 	bic.w	r2, r3, #7
 8005590:	4909      	ldr	r1, [pc, #36]	; (80055b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005598:	4b07      	ldr	r3, [pc, #28]	; (80055b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d001      	beq.n	80055aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40021000 	.word	0x40021000
 80055b8:	40022000 	.word	0x40022000

080055bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055c4:	2300      	movs	r3, #0
 80055c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055c8:	2300      	movs	r3, #0
 80055ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d041      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055e0:	d02a      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80055e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055e6:	d824      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055ec:	d008      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80055ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055f2:	d81e      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80055f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055fc:	d010      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055fe:	e018      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005600:	4b86      	ldr	r3, [pc, #536]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	4a85      	ldr	r2, [pc, #532]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800560a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800560c:	e015      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3304      	adds	r3, #4
 8005612:	2100      	movs	r1, #0
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fabb 	bl	8005b90 <RCCEx_PLLSAI1_Config>
 800561a:	4603      	mov	r3, r0
 800561c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800561e:	e00c      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3320      	adds	r3, #32
 8005624:	2100      	movs	r1, #0
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fba6 	bl	8005d78 <RCCEx_PLLSAI2_Config>
 800562c:	4603      	mov	r3, r0
 800562e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005630:	e003      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	74fb      	strb	r3, [r7, #19]
      break;
 8005636:	e000      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800563a:	7cfb      	ldrb	r3, [r7, #19]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10b      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005640:	4b76      	ldr	r3, [pc, #472]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005646:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800564e:	4973      	ldr	r1, [pc, #460]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005656:	e001      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005658:	7cfb      	ldrb	r3, [r7, #19]
 800565a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d041      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800566c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005670:	d02a      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005672:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005676:	d824      	bhi.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005678:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800567c:	d008      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800567e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005682:	d81e      	bhi.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00a      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800568c:	d010      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800568e:	e018      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005690:	4b62      	ldr	r3, [pc, #392]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4a61      	ldr	r2, [pc, #388]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800569a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800569c:	e015      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3304      	adds	r3, #4
 80056a2:	2100      	movs	r1, #0
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fa73 	bl	8005b90 <RCCEx_PLLSAI1_Config>
 80056aa:	4603      	mov	r3, r0
 80056ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056ae:	e00c      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3320      	adds	r3, #32
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fb5e 	bl	8005d78 <RCCEx_PLLSAI2_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056c0:	e003      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	74fb      	strb	r3, [r7, #19]
      break;
 80056c6:	e000      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80056c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ca:	7cfb      	ldrb	r3, [r7, #19]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10b      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056d0:	4b52      	ldr	r3, [pc, #328]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056de:	494f      	ldr	r1, [pc, #316]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80056e6:	e001      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e8:	7cfb      	ldrb	r3, [r7, #19]
 80056ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 80a0 	beq.w	800583a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056fa:	2300      	movs	r3, #0
 80056fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056fe:	4b47      	ldr	r3, [pc, #284]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800570e:	2300      	movs	r3, #0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00d      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005714:	4b41      	ldr	r3, [pc, #260]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005718:	4a40      	ldr	r2, [pc, #256]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800571a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800571e:	6593      	str	r3, [r2, #88]	; 0x58
 8005720:	4b3e      	ldr	r3, [pc, #248]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800572c:	2301      	movs	r3, #1
 800572e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005730:	4b3b      	ldr	r3, [pc, #236]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a3a      	ldr	r2, [pc, #232]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800573a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800573c:	f7fc fef8 	bl	8002530 <HAL_GetTick>
 8005740:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005742:	e009      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005744:	f7fc fef4 	bl	8002530 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d902      	bls.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	74fb      	strb	r3, [r7, #19]
        break;
 8005756:	e005      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005758:	4b31      	ldr	r3, [pc, #196]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0ef      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005764:	7cfb      	ldrb	r3, [r7, #19]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d15c      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800576a:	4b2c      	ldr	r3, [pc, #176]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800576c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005774:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01f      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	429a      	cmp	r2, r3
 8005786:	d019      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005788:	4b24      	ldr	r3, [pc, #144]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800578a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005792:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005794:	4b21      	ldr	r3, [pc, #132]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579a:	4a20      	ldr	r2, [pc, #128]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800579c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057a4:	4b1d      	ldr	r3, [pc, #116]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057aa:	4a1c      	ldr	r2, [pc, #112]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057b4:	4a19      	ldr	r2, [pc, #100]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d016      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c6:	f7fc feb3 	bl	8002530 <HAL_GetTick>
 80057ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057cc:	e00b      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ce:	f7fc feaf 	bl	8002530 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057dc:	4293      	cmp	r3, r2
 80057de:	d902      	bls.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	74fb      	strb	r3, [r7, #19]
            break;
 80057e4:	e006      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057e6:	4b0d      	ldr	r3, [pc, #52]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0ec      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80057f4:	7cfb      	ldrb	r3, [r7, #19]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10c      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057fa:	4b08      	ldr	r3, [pc, #32]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800580a:	4904      	ldr	r1, [pc, #16]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800580c:	4313      	orrs	r3, r2
 800580e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005812:	e009      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005814:	7cfb      	ldrb	r3, [r7, #19]
 8005816:	74bb      	strb	r3, [r7, #18]
 8005818:	e006      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800581a:	bf00      	nop
 800581c:	40021000 	.word	0x40021000
 8005820:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005824:	7cfb      	ldrb	r3, [r7, #19]
 8005826:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005828:	7c7b      	ldrb	r3, [r7, #17]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d105      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800582e:	4b9e      	ldr	r3, [pc, #632]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005832:	4a9d      	ldr	r2, [pc, #628]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005838:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005846:	4b98      	ldr	r3, [pc, #608]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584c:	f023 0203 	bic.w	r2, r3, #3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	4994      	ldr	r1, [pc, #592]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005868:	4b8f      	ldr	r3, [pc, #572]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800586a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586e:	f023 020c 	bic.w	r2, r3, #12
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005876:	498c      	ldr	r1, [pc, #560]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800588a:	4b87      	ldr	r3, [pc, #540]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005890:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005898:	4983      	ldr	r1, [pc, #524]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058ac:	4b7e      	ldr	r3, [pc, #504]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ba:	497b      	ldr	r1, [pc, #492]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0310 	and.w	r3, r3, #16
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058ce:	4b76      	ldr	r3, [pc, #472]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058dc:	4972      	ldr	r1, [pc, #456]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058f0:	4b6d      	ldr	r3, [pc, #436]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	496a      	ldr	r1, [pc, #424]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005912:	4b65      	ldr	r3, [pc, #404]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005918:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005920:	4961      	ldr	r1, [pc, #388]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005934:	4b5c      	ldr	r3, [pc, #368]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005942:	4959      	ldr	r1, [pc, #356]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005956:	4b54      	ldr	r3, [pc, #336]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005964:	4950      	ldr	r1, [pc, #320]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00a      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005978:	4b4b      	ldr	r3, [pc, #300]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800597a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005986:	4948      	ldr	r1, [pc, #288]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800599a:	4b43      	ldr	r3, [pc, #268]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800599c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a8:	493f      	ldr	r1, [pc, #252]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d028      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059bc:	4b3a      	ldr	r3, [pc, #232]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ca:	4937      	ldr	r1, [pc, #220]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059da:	d106      	bne.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059dc:	4b32      	ldr	r3, [pc, #200]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	4a31      	ldr	r2, [pc, #196]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059e6:	60d3      	str	r3, [r2, #12]
 80059e8:	e011      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059f2:	d10c      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3304      	adds	r3, #4
 80059f8:	2101      	movs	r1, #1
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 f8c8 	bl	8005b90 <RCCEx_PLLSAI1_Config>
 8005a00:	4603      	mov	r3, r0
 8005a02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a04:	7cfb      	ldrb	r3, [r7, #19]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005a0a:	7cfb      	ldrb	r3, [r7, #19]
 8005a0c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d028      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a1a:	4b23      	ldr	r3, [pc, #140]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a28:	491f      	ldr	r1, [pc, #124]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a38:	d106      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a3a:	4b1b      	ldr	r3, [pc, #108]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	4a1a      	ldr	r2, [pc, #104]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a44:	60d3      	str	r3, [r2, #12]
 8005a46:	e011      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a50:	d10c      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3304      	adds	r3, #4
 8005a56:	2101      	movs	r1, #1
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 f899 	bl	8005b90 <RCCEx_PLLSAI1_Config>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a62:	7cfb      	ldrb	r3, [r7, #19]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005a68:	7cfb      	ldrb	r3, [r7, #19]
 8005a6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d02b      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a78:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a86:	4908      	ldr	r1, [pc, #32]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a96:	d109      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a98:	4b03      	ldr	r3, [pc, #12]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	4a02      	ldr	r2, [pc, #8]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aa2:	60d3      	str	r3, [r2, #12]
 8005aa4:	e014      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005aa6:	bf00      	nop
 8005aa8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ab4:	d10c      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	2101      	movs	r1, #1
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 f867 	bl	8005b90 <RCCEx_PLLSAI1_Config>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ac6:	7cfb      	ldrb	r3, [r7, #19]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005acc:	7cfb      	ldrb	r3, [r7, #19]
 8005ace:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d02f      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005adc:	4b2b      	ldr	r3, [pc, #172]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aea:	4928      	ldr	r1, [pc, #160]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005afa:	d10d      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3304      	adds	r3, #4
 8005b00:	2102      	movs	r1, #2
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f844 	bl	8005b90 <RCCEx_PLLSAI1_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b0c:	7cfb      	ldrb	r3, [r7, #19]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d014      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b12:	7cfb      	ldrb	r3, [r7, #19]
 8005b14:	74bb      	strb	r3, [r7, #18]
 8005b16:	e011      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b20:	d10c      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3320      	adds	r3, #32
 8005b26:	2102      	movs	r1, #2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 f925 	bl	8005d78 <RCCEx_PLLSAI2_Config>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b32:	7cfb      	ldrb	r3, [r7, #19]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b38:	7cfb      	ldrb	r3, [r7, #19]
 8005b3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00a      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b48:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b56:	490d      	ldr	r1, [pc, #52]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00b      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b6a:	4b08      	ldr	r3, [pc, #32]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b7a:	4904      	ldr	r1, [pc, #16]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b82:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40021000 	.word	0x40021000

08005b90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b9e:	4b75      	ldr	r3, [pc, #468]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d018      	beq.n	8005bdc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005baa:	4b72      	ldr	r3, [pc, #456]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f003 0203 	and.w	r2, r3, #3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d10d      	bne.n	8005bd6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
       ||
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d009      	beq.n	8005bd6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005bc2:	4b6c      	ldr	r3, [pc, #432]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	091b      	lsrs	r3, r3, #4
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
       ||
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d047      	beq.n	8005c66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	73fb      	strb	r3, [r7, #15]
 8005bda:	e044      	b.n	8005c66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d018      	beq.n	8005c16 <RCCEx_PLLSAI1_Config+0x86>
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d825      	bhi.n	8005c34 <RCCEx_PLLSAI1_Config+0xa4>
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d002      	beq.n	8005bf2 <RCCEx_PLLSAI1_Config+0x62>
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d009      	beq.n	8005c04 <RCCEx_PLLSAI1_Config+0x74>
 8005bf0:	e020      	b.n	8005c34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005bf2:	4b60      	ldr	r3, [pc, #384]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d11d      	bne.n	8005c3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c02:	e01a      	b.n	8005c3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c04:	4b5b      	ldr	r3, [pc, #364]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d116      	bne.n	8005c3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c14:	e013      	b.n	8005c3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c16:	4b57      	ldr	r3, [pc, #348]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10f      	bne.n	8005c42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c22:	4b54      	ldr	r3, [pc, #336]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d109      	bne.n	8005c42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c32:	e006      	b.n	8005c42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	73fb      	strb	r3, [r7, #15]
      break;
 8005c38:	e004      	b.n	8005c44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c3a:	bf00      	nop
 8005c3c:	e002      	b.n	8005c44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c3e:	bf00      	nop
 8005c40:	e000      	b.n	8005c44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c42:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10d      	bne.n	8005c66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c4a:	4b4a      	ldr	r3, [pc, #296]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6819      	ldr	r1, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	430b      	orrs	r3, r1
 8005c60:	4944      	ldr	r1, [pc, #272]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d17d      	bne.n	8005d68 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c6c:	4b41      	ldr	r3, [pc, #260]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a40      	ldr	r2, [pc, #256]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c78:	f7fc fc5a 	bl	8002530 <HAL_GetTick>
 8005c7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c7e:	e009      	b.n	8005c94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c80:	f7fc fc56 	bl	8002530 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d902      	bls.n	8005c94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	73fb      	strb	r3, [r7, #15]
        break;
 8005c92:	e005      	b.n	8005ca0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c94:	4b37      	ldr	r3, [pc, #220]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1ef      	bne.n	8005c80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d160      	bne.n	8005d68 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d111      	bne.n	8005cd0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cac:	4b31      	ldr	r3, [pc, #196]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6892      	ldr	r2, [r2, #8]
 8005cbc:	0211      	lsls	r1, r2, #8
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	68d2      	ldr	r2, [r2, #12]
 8005cc2:	0912      	lsrs	r2, r2, #4
 8005cc4:	0452      	lsls	r2, r2, #17
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	492a      	ldr	r1, [pc, #168]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	610b      	str	r3, [r1, #16]
 8005cce:	e027      	b.n	8005d20 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d112      	bne.n	8005cfc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cd6:	4b27      	ldr	r3, [pc, #156]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005cde:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	6892      	ldr	r2, [r2, #8]
 8005ce6:	0211      	lsls	r1, r2, #8
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	6912      	ldr	r2, [r2, #16]
 8005cec:	0852      	lsrs	r2, r2, #1
 8005cee:	3a01      	subs	r2, #1
 8005cf0:	0552      	lsls	r2, r2, #21
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	491f      	ldr	r1, [pc, #124]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	610b      	str	r3, [r1, #16]
 8005cfa:	e011      	b.n	8005d20 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cfc:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6892      	ldr	r2, [r2, #8]
 8005d0c:	0211      	lsls	r1, r2, #8
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6952      	ldr	r2, [r2, #20]
 8005d12:	0852      	lsrs	r2, r2, #1
 8005d14:	3a01      	subs	r2, #1
 8005d16:	0652      	lsls	r2, r2, #25
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	4916      	ldr	r1, [pc, #88]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d20:	4b14      	ldr	r3, [pc, #80]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a13      	ldr	r2, [pc, #76]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2c:	f7fc fc00 	bl	8002530 <HAL_GetTick>
 8005d30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d32:	e009      	b.n	8005d48 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d34:	f7fc fbfc 	bl	8002530 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d902      	bls.n	8005d48 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	73fb      	strb	r3, [r7, #15]
          break;
 8005d46:	e005      	b.n	8005d54 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d48:	4b0a      	ldr	r3, [pc, #40]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0ef      	beq.n	8005d34 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d5a:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	4904      	ldr	r1, [pc, #16]	; (8005d74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40021000 	.word	0x40021000

08005d78 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d86:	4b6a      	ldr	r3, [pc, #424]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d018      	beq.n	8005dc4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d92:	4b67      	ldr	r3, [pc, #412]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f003 0203 	and.w	r2, r3, #3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d10d      	bne.n	8005dbe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
       ||
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d009      	beq.n	8005dbe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005daa:	4b61      	ldr	r3, [pc, #388]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	091b      	lsrs	r3, r3, #4
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
       ||
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d047      	beq.n	8005e4e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	73fb      	strb	r3, [r7, #15]
 8005dc2:	e044      	b.n	8005e4e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d018      	beq.n	8005dfe <RCCEx_PLLSAI2_Config+0x86>
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d825      	bhi.n	8005e1c <RCCEx_PLLSAI2_Config+0xa4>
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d002      	beq.n	8005dda <RCCEx_PLLSAI2_Config+0x62>
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d009      	beq.n	8005dec <RCCEx_PLLSAI2_Config+0x74>
 8005dd8:	e020      	b.n	8005e1c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005dda:	4b55      	ldr	r3, [pc, #340]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d11d      	bne.n	8005e22 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dea:	e01a      	b.n	8005e22 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005dec:	4b50      	ldr	r3, [pc, #320]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d116      	bne.n	8005e26 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dfc:	e013      	b.n	8005e26 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005dfe:	4b4c      	ldr	r3, [pc, #304]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10f      	bne.n	8005e2a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e0a:	4b49      	ldr	r3, [pc, #292]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d109      	bne.n	8005e2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e1a:	e006      	b.n	8005e2a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e20:	e004      	b.n	8005e2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e22:	bf00      	nop
 8005e24:	e002      	b.n	8005e2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e26:	bf00      	nop
 8005e28:	e000      	b.n	8005e2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10d      	bne.n	8005e4e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e32:	4b3f      	ldr	r3, [pc, #252]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6819      	ldr	r1, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	430b      	orrs	r3, r1
 8005e48:	4939      	ldr	r1, [pc, #228]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d167      	bne.n	8005f24 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005e54:	4b36      	ldr	r3, [pc, #216]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a35      	ldr	r2, [pc, #212]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e60:	f7fc fb66 	bl	8002530 <HAL_GetTick>
 8005e64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e66:	e009      	b.n	8005e7c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e68:	f7fc fb62 	bl	8002530 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d902      	bls.n	8005e7c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	73fb      	strb	r3, [r7, #15]
        break;
 8005e7a:	e005      	b.n	8005e88 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e7c:	4b2c      	ldr	r3, [pc, #176]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1ef      	bne.n	8005e68 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d14a      	bne.n	8005f24 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d111      	bne.n	8005eb8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e94:	4b26      	ldr	r3, [pc, #152]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6892      	ldr	r2, [r2, #8]
 8005ea4:	0211      	lsls	r1, r2, #8
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	68d2      	ldr	r2, [r2, #12]
 8005eaa:	0912      	lsrs	r2, r2, #4
 8005eac:	0452      	lsls	r2, r2, #17
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	491f      	ldr	r1, [pc, #124]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	614b      	str	r3, [r1, #20]
 8005eb6:	e011      	b.n	8005edc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005eb8:	4b1d      	ldr	r3, [pc, #116]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ec0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6892      	ldr	r2, [r2, #8]
 8005ec8:	0211      	lsls	r1, r2, #8
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6912      	ldr	r2, [r2, #16]
 8005ece:	0852      	lsrs	r2, r2, #1
 8005ed0:	3a01      	subs	r2, #1
 8005ed2:	0652      	lsls	r2, r2, #25
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	4916      	ldr	r1, [pc, #88]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005edc:	4b14      	ldr	r3, [pc, #80]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a13      	ldr	r2, [pc, #76]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee8:	f7fc fb22 	bl	8002530 <HAL_GetTick>
 8005eec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005eee:	e009      	b.n	8005f04 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ef0:	f7fc fb1e 	bl	8002530 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d902      	bls.n	8005f04 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	73fb      	strb	r3, [r7, #15]
          break;
 8005f02:	e005      	b.n	8005f10 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005f04:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d0ef      	beq.n	8005ef0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005f16:	4b06      	ldr	r3, [pc, #24]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f18:	695a      	ldr	r2, [r3, #20]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	4904      	ldr	r1, [pc, #16]	; (8005f30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40021000 	.word	0x40021000

08005f34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e095      	b.n	8006072 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d108      	bne.n	8005f60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f56:	d009      	beq.n	8005f6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	61da      	str	r2, [r3, #28]
 8005f5e:	e005      	b.n	8005f6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fc f86c 	bl	8002064 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fa2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fac:	d902      	bls.n	8005fb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	e002      	b.n	8005fba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005fc2:	d007      	beq.n	8005fd4 <HAL_SPI_Init+0xa0>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fcc:	d002      	beq.n	8005fd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006016:	ea42 0103 	orr.w	r1, r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	0c1b      	lsrs	r3, r3, #16
 8006030:	f003 0204 	and.w	r2, r3, #4
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	f003 0310 	and.w	r3, r3, #16
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006050:	ea42 0103 	orr.w	r1, r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b088      	sub	sp, #32
 800607e:	af00      	add	r7, sp, #0
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	603b      	str	r3, [r7, #0]
 8006086:	4613      	mov	r3, r2
 8006088:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_SPI_Transmit+0x22>
 8006098:	2302      	movs	r3, #2
 800609a:	e158      	b.n	800634e <HAL_SPI_Transmit+0x2d4>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060a4:	f7fc fa44 	bl	8002530 <HAL_GetTick>
 80060a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80060aa:	88fb      	ldrh	r3, [r7, #6]
 80060ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d002      	beq.n	80060c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80060ba:	2302      	movs	r3, #2
 80060bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060be:	e13d      	b.n	800633c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <HAL_SPI_Transmit+0x52>
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d102      	bne.n	80060d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060d0:	e134      	b.n	800633c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2203      	movs	r2, #3
 80060d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	88fa      	ldrh	r2, [r7, #6]
 80060ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	88fa      	ldrh	r2, [r7, #6]
 80060f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800611c:	d10f      	bne.n	800613e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800612c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800613c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006148:	2b40      	cmp	r3, #64	; 0x40
 800614a:	d007      	beq.n	800615c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800615a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006164:	d94b      	bls.n	80061fe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_SPI_Transmit+0xfa>
 800616e:	8afb      	ldrh	r3, [r7, #22]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d13e      	bne.n	80061f2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006178:	881a      	ldrh	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006184:	1c9a      	adds	r2, r3, #2
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006198:	e02b      	b.n	80061f2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d112      	bne.n	80061ce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	881a      	ldrh	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b8:	1c9a      	adds	r2, r3, #2
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061cc:	e011      	b.n	80061f2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ce:	f7fc f9af 	bl	8002530 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d803      	bhi.n	80061e6 <HAL_SPI_Transmit+0x16c>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061e4:	d102      	bne.n	80061ec <HAL_SPI_Transmit+0x172>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d102      	bne.n	80061f2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061f0:	e0a4      	b.n	800633c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1ce      	bne.n	800619a <HAL_SPI_Transmit+0x120>
 80061fc:	e07c      	b.n	80062f8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <HAL_SPI_Transmit+0x192>
 8006206:	8afb      	ldrh	r3, [r7, #22]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d170      	bne.n	80062ee <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b01      	cmp	r3, #1
 8006214:	d912      	bls.n	800623c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	881a      	ldrh	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006226:	1c9a      	adds	r2, r3, #2
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006230:	b29b      	uxth	r3, r3
 8006232:	3b02      	subs	r3, #2
 8006234:	b29a      	uxth	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	87da      	strh	r2, [r3, #62]	; 0x3e
 800623a:	e058      	b.n	80062ee <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	330c      	adds	r3, #12
 8006246:	7812      	ldrb	r2, [r2, #0]
 8006248:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006258:	b29b      	uxth	r3, r3
 800625a:	3b01      	subs	r3, #1
 800625c:	b29a      	uxth	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006262:	e044      	b.n	80062ee <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b02      	cmp	r3, #2
 8006270:	d12b      	bne.n	80062ca <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006276:	b29b      	uxth	r3, r3
 8006278:	2b01      	cmp	r3, #1
 800627a:	d912      	bls.n	80062a2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	881a      	ldrh	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	1c9a      	adds	r2, r3, #2
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006296:	b29b      	uxth	r3, r3
 8006298:	3b02      	subs	r3, #2
 800629a:	b29a      	uxth	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062a0:	e025      	b.n	80062ee <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	330c      	adds	r3, #12
 80062ac:	7812      	ldrb	r2, [r2, #0]
 80062ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062c8:	e011      	b.n	80062ee <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062ca:	f7fc f931 	bl	8002530 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d803      	bhi.n	80062e2 <HAL_SPI_Transmit+0x268>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062e0:	d102      	bne.n	80062e8 <HAL_SPI_Transmit+0x26e>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d102      	bne.n	80062ee <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062ec:	e026      	b.n	800633c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1b5      	bne.n	8006264 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 fb53 	bl	80069a8 <SPI_EndRxTxTransaction>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2220      	movs	r2, #32
 800630c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10a      	bne.n	800632c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006316:	2300      	movs	r3, #0
 8006318:	613b      	str	r3, [r7, #16]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	613b      	str	r3, [r7, #16]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	613b      	str	r3, [r7, #16]
 800632a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	77fb      	strb	r3, [r7, #31]
 8006338:	e000      	b.n	800633c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800633a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800634c:	7ffb      	ldrb	r3, [r7, #31]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3720      	adds	r7, #32
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b08a      	sub	sp, #40	; 0x28
 800635a:	af00      	add	r7, sp, #0
 800635c:	60f8      	str	r0, [r7, #12]
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	607a      	str	r2, [r7, #4]
 8006362:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006364:	2301      	movs	r3, #1
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_SPI_TransmitReceive+0x26>
 8006378:	2302      	movs	r3, #2
 800637a:	e1fb      	b.n	8006774 <HAL_SPI_TransmitReceive+0x41e>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006384:	f7fc f8d4 	bl	8002530 <HAL_GetTick>
 8006388:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006390:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006398:	887b      	ldrh	r3, [r7, #2]
 800639a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800639c:	887b      	ldrh	r3, [r7, #2]
 800639e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063a0:	7efb      	ldrb	r3, [r7, #27]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d00e      	beq.n	80063c4 <HAL_SPI_TransmitReceive+0x6e>
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063ac:	d106      	bne.n	80063bc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d102      	bne.n	80063bc <HAL_SPI_TransmitReceive+0x66>
 80063b6:	7efb      	ldrb	r3, [r7, #27]
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d003      	beq.n	80063c4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80063bc:	2302      	movs	r3, #2
 80063be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80063c2:	e1cd      	b.n	8006760 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d005      	beq.n	80063d6 <HAL_SPI_TransmitReceive+0x80>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <HAL_SPI_TransmitReceive+0x80>
 80063d0:	887b      	ldrh	r3, [r7, #2]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d103      	bne.n	80063de <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80063dc:	e1c0      	b.n	8006760 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d003      	beq.n	80063f2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2205      	movs	r2, #5
 80063ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	887a      	ldrh	r2, [r7, #2]
 8006402:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	887a      	ldrh	r2, [r7, #2]
 800640a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	887a      	ldrh	r2, [r7, #2]
 8006418:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	887a      	ldrh	r2, [r7, #2]
 800641e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006434:	d802      	bhi.n	800643c <HAL_SPI_TransmitReceive+0xe6>
 8006436:	8a3b      	ldrh	r3, [r7, #16]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d908      	bls.n	800644e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800644a:	605a      	str	r2, [r3, #4]
 800644c:	e007      	b.n	800645e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800645c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006468:	2b40      	cmp	r3, #64	; 0x40
 800646a:	d007      	beq.n	800647c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800647a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006484:	d97c      	bls.n	8006580 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_SPI_TransmitReceive+0x13e>
 800648e:	8a7b      	ldrh	r3, [r7, #18]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d169      	bne.n	8006568 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	881a      	ldrh	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	1c9a      	adds	r2, r3, #2
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064b8:	e056      	b.n	8006568 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d11b      	bne.n	8006500 <HAL_SPI_TransmitReceive+0x1aa>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d016      	beq.n	8006500 <HAL_SPI_TransmitReceive+0x1aa>
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d113      	bne.n	8006500 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	881a      	ldrh	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	1c9a      	adds	r2, r3, #2
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b01      	cmp	r3, #1
 800650c:	d11c      	bne.n	8006548 <HAL_SPI_TransmitReceive+0x1f2>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006514:	b29b      	uxth	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d016      	beq.n	8006548 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	b292      	uxth	r2, r2
 8006526:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652c:	1c9a      	adds	r2, r3, #2
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006544:	2301      	movs	r3, #1
 8006546:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006548:	f7fb fff2 	bl	8002530 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006554:	429a      	cmp	r2, r3
 8006556:	d807      	bhi.n	8006568 <HAL_SPI_TransmitReceive+0x212>
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800655e:	d003      	beq.n	8006568 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006566:	e0fb      	b.n	8006760 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1a3      	bne.n	80064ba <HAL_SPI_TransmitReceive+0x164>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006578:	b29b      	uxth	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d19d      	bne.n	80064ba <HAL_SPI_TransmitReceive+0x164>
 800657e:	e0df      	b.n	8006740 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <HAL_SPI_TransmitReceive+0x23a>
 8006588:	8a7b      	ldrh	r3, [r7, #18]
 800658a:	2b01      	cmp	r3, #1
 800658c:	f040 80cb 	bne.w	8006726 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b01      	cmp	r3, #1
 8006598:	d912      	bls.n	80065c0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659e:	881a      	ldrh	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065aa:	1c9a      	adds	r2, r3, #2
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b02      	subs	r3, #2
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065be:	e0b2      	b.n	8006726 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	330c      	adds	r3, #12
 80065ca:	7812      	ldrb	r2, [r2, #0]
 80065cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065dc:	b29b      	uxth	r3, r3
 80065de:	3b01      	subs	r3, #1
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065e6:	e09e      	b.n	8006726 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d134      	bne.n	8006660 <HAL_SPI_TransmitReceive+0x30a>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d02f      	beq.n	8006660 <HAL_SPI_TransmitReceive+0x30a>
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	2b01      	cmp	r3, #1
 8006604:	d12c      	bne.n	8006660 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800660a:	b29b      	uxth	r3, r3
 800660c:	2b01      	cmp	r3, #1
 800660e:	d912      	bls.n	8006636 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	881a      	ldrh	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	1c9a      	adds	r2, r3, #2
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800662a:	b29b      	uxth	r3, r3
 800662c:	3b02      	subs	r3, #2
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006634:	e012      	b.n	800665c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	330c      	adds	r3, #12
 8006640:	7812      	ldrb	r2, [r2, #0]
 8006642:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b01      	cmp	r3, #1
 800666c:	d148      	bne.n	8006700 <HAL_SPI_TransmitReceive+0x3aa>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006674:	b29b      	uxth	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d042      	beq.n	8006700 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b01      	cmp	r3, #1
 8006684:	d923      	bls.n	80066ce <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006690:	b292      	uxth	r2, r2
 8006692:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006698:	1c9a      	adds	r2, r3, #2
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3b02      	subs	r3, #2
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d81f      	bhi.n	80066fc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066ca:	605a      	str	r2, [r3, #4]
 80066cc:	e016      	b.n	80066fc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f103 020c 	add.w	r2, r3, #12
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	7812      	ldrb	r2, [r2, #0]
 80066dc:	b2d2      	uxtb	r2, r2
 80066de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	3b01      	subs	r3, #1
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066fc:	2301      	movs	r3, #1
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006700:	f7fb ff16 	bl	8002530 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800670c:	429a      	cmp	r2, r3
 800670e:	d803      	bhi.n	8006718 <HAL_SPI_TransmitReceive+0x3c2>
 8006710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006716:	d102      	bne.n	800671e <HAL_SPI_TransmitReceive+0x3c8>
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	2b00      	cmp	r3, #0
 800671c:	d103      	bne.n	8006726 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006724:	e01c      	b.n	8006760 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672a:	b29b      	uxth	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	f47f af5b 	bne.w	80065e8 <HAL_SPI_TransmitReceive+0x292>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	f47f af54 	bne.w	80065e8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 f92f 	bl	80069a8 <SPI_EndRxTxTransaction>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d006      	beq.n	800675e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2220      	movs	r2, #32
 800675a:	661a      	str	r2, [r3, #96]	; 0x60
 800675c:	e000      	b.n	8006760 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800675e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006770:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006774:	4618      	mov	r0, r3
 8006776:	3728      	adds	r7, #40	; 0x28
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	4613      	mov	r3, r2
 800678a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800678c:	f7fb fed0 	bl	8002530 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	1a9b      	subs	r3, r3, r2
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	4413      	add	r3, r2
 800679a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800679c:	f7fb fec8 	bl	8002530 <HAL_GetTick>
 80067a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067a2:	4b39      	ldr	r3, [pc, #228]	; (8006888 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	015b      	lsls	r3, r3, #5
 80067a8:	0d1b      	lsrs	r3, r3, #20
 80067aa:	69fa      	ldr	r2, [r7, #28]
 80067ac:	fb02 f303 	mul.w	r3, r2, r3
 80067b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067b2:	e054      	b.n	800685e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ba:	d050      	beq.n	800685e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067bc:	f7fb feb8 	bl	8002530 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	69fa      	ldr	r2, [r7, #28]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d902      	bls.n	80067d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d13d      	bne.n	800684e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ea:	d111      	bne.n	8006810 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f4:	d004      	beq.n	8006800 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067fe:	d107      	bne.n	8006810 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800680e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006818:	d10f      	bne.n	800683a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006838:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e017      	b.n	800687e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	3b01      	subs	r3, #1
 800685c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	4013      	ands	r3, r2
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	429a      	cmp	r2, r3
 800686c:	bf0c      	ite	eq
 800686e:	2301      	moveq	r3, #1
 8006870:	2300      	movne	r3, #0
 8006872:	b2db      	uxtb	r3, r3
 8006874:	461a      	mov	r2, r3
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	429a      	cmp	r2, r3
 800687a:	d19b      	bne.n	80067b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3720      	adds	r7, #32
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	2000000c 	.word	0x2000000c

0800688c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800689a:	f7fb fe49 	bl	8002530 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	1a9b      	subs	r3, r3, r2
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	4413      	add	r3, r2
 80068a8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068aa:	f7fb fe41 	bl	8002530 <HAL_GetTick>
 80068ae:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80068b0:	4b3c      	ldr	r3, [pc, #240]	; (80069a4 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	00da      	lsls	r2, r3, #3
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	0d1b      	lsrs	r3, r3, #20
 80068c0:	69fa      	ldr	r2, [r7, #28]
 80068c2:	fb02 f303 	mul.w	r3, r2, r3
 80068c6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80068c8:	e05f      	b.n	800698a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80068d0:	d106      	bne.n	80068e0 <SPI_WaitFifoStateUntilTimeout+0x54>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d103      	bne.n	80068e0 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	330c      	adds	r3, #12
 80068de:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068e6:	d050      	beq.n	800698a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068e8:	f7fb fe22 	bl	8002530 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d902      	bls.n	80068fe <SPI_WaitFifoStateUntilTimeout+0x72>
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d13d      	bne.n	800697a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800690c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006916:	d111      	bne.n	800693c <SPI_WaitFifoStateUntilTimeout+0xb0>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006920:	d004      	beq.n	800692c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800692a:	d107      	bne.n	800693c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800693a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006944:	d10f      	bne.n	8006966 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006964:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e010      	b.n	800699c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	3b01      	subs	r3, #1
 8006988:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	4013      	ands	r3, r2
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	429a      	cmp	r2, r3
 8006998:	d197      	bne.n	80068ca <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3720      	adds	r7, #32
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	2000000c 	.word	0x2000000c

080069a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f7ff ff63 	bl	800688c <SPI_WaitFifoStateUntilTimeout>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d007      	beq.n	80069dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d0:	f043 0220 	orr.w	r2, r3, #32
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e027      	b.n	8006a2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2200      	movs	r2, #0
 80069e4:	2180      	movs	r1, #128	; 0x80
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f7ff fec8 	bl	800677c <SPI_WaitFlagStateUntilTimeout>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d007      	beq.n	8006a02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f6:	f043 0220 	orr.w	r2, r3, #32
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e014      	b.n	8006a2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f7ff ff3c 	bl	800688c <SPI_WaitFifoStateUntilTimeout>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d007      	beq.n	8006a2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a1e:	f043 0220 	orr.w	r2, r3, #32
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e000      	b.n	8006a2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e049      	b.n	8006ada <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d106      	bne.n	8006a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f841 	bl	8006ae2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	3304      	adds	r3, #4
 8006a70:	4619      	mov	r1, r3
 8006a72:	4610      	mov	r0, r2
 8006a74:	f000 f9f8 	bl	8006e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
	...

08006af8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d001      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e04f      	b.n	8006bb0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68da      	ldr	r2, [r3, #12]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0201 	orr.w	r2, r2, #1
 8006b26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a23      	ldr	r2, [pc, #140]	; (8006bbc <HAL_TIM_Base_Start_IT+0xc4>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01d      	beq.n	8006b6e <HAL_TIM_Base_Start_IT+0x76>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3a:	d018      	beq.n	8006b6e <HAL_TIM_Base_Start_IT+0x76>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a1f      	ldr	r2, [pc, #124]	; (8006bc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <HAL_TIM_Base_Start_IT+0x76>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a1e      	ldr	r2, [pc, #120]	; (8006bc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00e      	beq.n	8006b6e <HAL_TIM_Base_Start_IT+0x76>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a1c      	ldr	r2, [pc, #112]	; (8006bc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d009      	beq.n	8006b6e <HAL_TIM_Base_Start_IT+0x76>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a1b      	ldr	r2, [pc, #108]	; (8006bcc <HAL_TIM_Base_Start_IT+0xd4>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d004      	beq.n	8006b6e <HAL_TIM_Base_Start_IT+0x76>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a19      	ldr	r2, [pc, #100]	; (8006bd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d115      	bne.n	8006b9a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	4b17      	ldr	r3, [pc, #92]	; (8006bd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b76:	4013      	ands	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b06      	cmp	r3, #6
 8006b7e:	d015      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0xb4>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b86:	d011      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0201 	orr.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b98:	e008      	b.n	8006bac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f042 0201 	orr.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	e000      	b.n	8006bae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	40012c00 	.word	0x40012c00
 8006bc0:	40000400 	.word	0x40000400
 8006bc4:	40000800 	.word	0x40000800
 8006bc8:	40000c00 	.word	0x40000c00
 8006bcc:	40013400 	.word	0x40013400
 8006bd0:	40014000 	.word	0x40014000
 8006bd4:	00010007 	.word	0x00010007

08006bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d122      	bne.n	8006c34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d11b      	bne.n	8006c34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f06f 0202 	mvn.w	r2, #2
 8006c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f003 0303 	and.w	r3, r3, #3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f905 	bl	8006e2a <HAL_TIM_IC_CaptureCallback>
 8006c20:	e005      	b.n	8006c2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f8f7 	bl	8006e16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f908 	bl	8006e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	f003 0304 	and.w	r3, r3, #4
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d122      	bne.n	8006c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d11b      	bne.n	8006c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f06f 0204 	mvn.w	r2, #4
 8006c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f8db 	bl	8006e2a <HAL_TIM_IC_CaptureCallback>
 8006c74:	e005      	b.n	8006c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f8cd 	bl	8006e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f8de 	bl	8006e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	2b08      	cmp	r3, #8
 8006c94:	d122      	bne.n	8006cdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f003 0308 	and.w	r3, r3, #8
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d11b      	bne.n	8006cdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f06f 0208 	mvn.w	r2, #8
 8006cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2204      	movs	r2, #4
 8006cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	f003 0303 	and.w	r3, r3, #3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f8b1 	bl	8006e2a <HAL_TIM_IC_CaptureCallback>
 8006cc8:	e005      	b.n	8006cd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f8a3 	bl	8006e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f8b4 	bl	8006e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	f003 0310 	and.w	r3, r3, #16
 8006ce6:	2b10      	cmp	r3, #16
 8006ce8:	d122      	bne.n	8006d30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f003 0310 	and.w	r3, r3, #16
 8006cf4:	2b10      	cmp	r3, #16
 8006cf6:	d11b      	bne.n	8006d30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f06f 0210 	mvn.w	r2, #16
 8006d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2208      	movs	r2, #8
 8006d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f887 	bl	8006e2a <HAL_TIM_IC_CaptureCallback>
 8006d1c:	e005      	b.n	8006d2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f879 	bl	8006e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f88a 	bl	8006e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d10e      	bne.n	8006d5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d107      	bne.n	8006d5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f06f 0201 	mvn.w	r2, #1
 8006d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7fb f874 	bl	8001e44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d66:	2b80      	cmp	r3, #128	; 0x80
 8006d68:	d10e      	bne.n	8006d88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d74:	2b80      	cmp	r3, #128	; 0x80
 8006d76:	d107      	bne.n	8006d88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f914 	bl	8006fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d96:	d10e      	bne.n	8006db6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da2:	2b80      	cmp	r3, #128	; 0x80
 8006da4:	d107      	bne.n	8006db6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f907 	bl	8006fc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b40      	cmp	r3, #64	; 0x40
 8006dc2:	d10e      	bne.n	8006de2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dce:	2b40      	cmp	r3, #64	; 0x40
 8006dd0:	d107      	bne.n	8006de2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f838 	bl	8006e52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	d10e      	bne.n	8006e0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b20      	cmp	r3, #32
 8006dfc:	d107      	bne.n	8006e0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f06f 0220 	mvn.w	r2, #32
 8006e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f8c7 	bl	8006f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e0e:	bf00      	nop
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b083      	sub	sp, #12
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e32:	bf00      	nop
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e5a:	bf00      	nop
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
	...

08006e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a40      	ldr	r2, [pc, #256]	; (8006f7c <TIM_Base_SetConfig+0x114>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d013      	beq.n	8006ea8 <TIM_Base_SetConfig+0x40>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e86:	d00f      	beq.n	8006ea8 <TIM_Base_SetConfig+0x40>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a3d      	ldr	r2, [pc, #244]	; (8006f80 <TIM_Base_SetConfig+0x118>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d00b      	beq.n	8006ea8 <TIM_Base_SetConfig+0x40>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a3c      	ldr	r2, [pc, #240]	; (8006f84 <TIM_Base_SetConfig+0x11c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d007      	beq.n	8006ea8 <TIM_Base_SetConfig+0x40>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a3b      	ldr	r2, [pc, #236]	; (8006f88 <TIM_Base_SetConfig+0x120>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d003      	beq.n	8006ea8 <TIM_Base_SetConfig+0x40>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a3a      	ldr	r2, [pc, #232]	; (8006f8c <TIM_Base_SetConfig+0x124>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d108      	bne.n	8006eba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a2f      	ldr	r2, [pc, #188]	; (8006f7c <TIM_Base_SetConfig+0x114>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d01f      	beq.n	8006f02 <TIM_Base_SetConfig+0x9a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec8:	d01b      	beq.n	8006f02 <TIM_Base_SetConfig+0x9a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a2c      	ldr	r2, [pc, #176]	; (8006f80 <TIM_Base_SetConfig+0x118>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d017      	beq.n	8006f02 <TIM_Base_SetConfig+0x9a>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a2b      	ldr	r2, [pc, #172]	; (8006f84 <TIM_Base_SetConfig+0x11c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d013      	beq.n	8006f02 <TIM_Base_SetConfig+0x9a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a2a      	ldr	r2, [pc, #168]	; (8006f88 <TIM_Base_SetConfig+0x120>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00f      	beq.n	8006f02 <TIM_Base_SetConfig+0x9a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a29      	ldr	r2, [pc, #164]	; (8006f8c <TIM_Base_SetConfig+0x124>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d00b      	beq.n	8006f02 <TIM_Base_SetConfig+0x9a>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a28      	ldr	r2, [pc, #160]	; (8006f90 <TIM_Base_SetConfig+0x128>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d007      	beq.n	8006f02 <TIM_Base_SetConfig+0x9a>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a27      	ldr	r2, [pc, #156]	; (8006f94 <TIM_Base_SetConfig+0x12c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d003      	beq.n	8006f02 <TIM_Base_SetConfig+0x9a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a26      	ldr	r2, [pc, #152]	; (8006f98 <TIM_Base_SetConfig+0x130>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d108      	bne.n	8006f14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	689a      	ldr	r2, [r3, #8]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a10      	ldr	r2, [pc, #64]	; (8006f7c <TIM_Base_SetConfig+0x114>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00f      	beq.n	8006f60 <TIM_Base_SetConfig+0xf8>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a12      	ldr	r2, [pc, #72]	; (8006f8c <TIM_Base_SetConfig+0x124>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d00b      	beq.n	8006f60 <TIM_Base_SetConfig+0xf8>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a11      	ldr	r2, [pc, #68]	; (8006f90 <TIM_Base_SetConfig+0x128>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d007      	beq.n	8006f60 <TIM_Base_SetConfig+0xf8>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a10      	ldr	r2, [pc, #64]	; (8006f94 <TIM_Base_SetConfig+0x12c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d003      	beq.n	8006f60 <TIM_Base_SetConfig+0xf8>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a0f      	ldr	r2, [pc, #60]	; (8006f98 <TIM_Base_SetConfig+0x130>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d103      	bne.n	8006f68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	691a      	ldr	r2, [r3, #16]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	615a      	str	r2, [r3, #20]
}
 8006f6e:	bf00      	nop
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	40012c00 	.word	0x40012c00
 8006f80:	40000400 	.word	0x40000400
 8006f84:	40000800 	.word	0x40000800
 8006f88:	40000c00 	.word	0x40000c00
 8006f8c:	40013400 	.word	0x40013400
 8006f90:	40014000 	.word	0x40014000
 8006f94:	40014400 	.word	0x40014400
 8006f98:	40014800 	.word	0x40014800

08006f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e040      	b.n	800706c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d106      	bne.n	8007000 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7fb f876 	bl	80020ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2224      	movs	r2, #36	; 0x24
 8007004:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 0201 	bic.w	r2, r2, #1
 8007014:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f82c 	bl	8007074 <UART_SetConfig>
 800701c:	4603      	mov	r3, r0
 800701e:	2b01      	cmp	r3, #1
 8007020:	d101      	bne.n	8007026 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e022      	b.n	800706c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 faaa 	bl	8007588 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689a      	ldr	r2, [r3, #8]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0201 	orr.w	r2, r2, #1
 8007062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fb31 	bl	80076cc <UART_CheckIdleState>
 800706a:	4603      	mov	r3, r0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007074:	b5b0      	push	{r4, r5, r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	431a      	orrs	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	69db      	ldr	r3, [r3, #28]
 8007094:	4313      	orrs	r3, r2
 8007096:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	4bad      	ldr	r3, [pc, #692]	; (8007354 <UART_SetConfig+0x2e0>)
 80070a0:	4013      	ands	r3, r2
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	6812      	ldr	r2, [r2, #0]
 80070a6:	69f9      	ldr	r1, [r7, #28]
 80070a8:	430b      	orrs	r3, r1
 80070aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4aa2      	ldr	r2, [pc, #648]	; (8007358 <UART_SetConfig+0x2e4>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d004      	beq.n	80070dc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	69fa      	ldr	r2, [r7, #28]
 80070d8:	4313      	orrs	r3, r2
 80070da:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	69fa      	ldr	r2, [r7, #28]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a99      	ldr	r2, [pc, #612]	; (800735c <UART_SetConfig+0x2e8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d121      	bne.n	800713e <UART_SetConfig+0xca>
 80070fa:	4b99      	ldr	r3, [pc, #612]	; (8007360 <UART_SetConfig+0x2ec>)
 80070fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007100:	f003 0303 	and.w	r3, r3, #3
 8007104:	2b03      	cmp	r3, #3
 8007106:	d817      	bhi.n	8007138 <UART_SetConfig+0xc4>
 8007108:	a201      	add	r2, pc, #4	; (adr r2, 8007110 <UART_SetConfig+0x9c>)
 800710a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710e:	bf00      	nop
 8007110:	08007121 	.word	0x08007121
 8007114:	0800712d 	.word	0x0800712d
 8007118:	08007127 	.word	0x08007127
 800711c:	08007133 	.word	0x08007133
 8007120:	2301      	movs	r3, #1
 8007122:	76fb      	strb	r3, [r7, #27]
 8007124:	e0e7      	b.n	80072f6 <UART_SetConfig+0x282>
 8007126:	2302      	movs	r3, #2
 8007128:	76fb      	strb	r3, [r7, #27]
 800712a:	e0e4      	b.n	80072f6 <UART_SetConfig+0x282>
 800712c:	2304      	movs	r3, #4
 800712e:	76fb      	strb	r3, [r7, #27]
 8007130:	e0e1      	b.n	80072f6 <UART_SetConfig+0x282>
 8007132:	2308      	movs	r3, #8
 8007134:	76fb      	strb	r3, [r7, #27]
 8007136:	e0de      	b.n	80072f6 <UART_SetConfig+0x282>
 8007138:	2310      	movs	r3, #16
 800713a:	76fb      	strb	r3, [r7, #27]
 800713c:	e0db      	b.n	80072f6 <UART_SetConfig+0x282>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a88      	ldr	r2, [pc, #544]	; (8007364 <UART_SetConfig+0x2f0>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d132      	bne.n	80071ae <UART_SetConfig+0x13a>
 8007148:	4b85      	ldr	r3, [pc, #532]	; (8007360 <UART_SetConfig+0x2ec>)
 800714a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800714e:	f003 030c 	and.w	r3, r3, #12
 8007152:	2b0c      	cmp	r3, #12
 8007154:	d828      	bhi.n	80071a8 <UART_SetConfig+0x134>
 8007156:	a201      	add	r2, pc, #4	; (adr r2, 800715c <UART_SetConfig+0xe8>)
 8007158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715c:	08007191 	.word	0x08007191
 8007160:	080071a9 	.word	0x080071a9
 8007164:	080071a9 	.word	0x080071a9
 8007168:	080071a9 	.word	0x080071a9
 800716c:	0800719d 	.word	0x0800719d
 8007170:	080071a9 	.word	0x080071a9
 8007174:	080071a9 	.word	0x080071a9
 8007178:	080071a9 	.word	0x080071a9
 800717c:	08007197 	.word	0x08007197
 8007180:	080071a9 	.word	0x080071a9
 8007184:	080071a9 	.word	0x080071a9
 8007188:	080071a9 	.word	0x080071a9
 800718c:	080071a3 	.word	0x080071a3
 8007190:	2300      	movs	r3, #0
 8007192:	76fb      	strb	r3, [r7, #27]
 8007194:	e0af      	b.n	80072f6 <UART_SetConfig+0x282>
 8007196:	2302      	movs	r3, #2
 8007198:	76fb      	strb	r3, [r7, #27]
 800719a:	e0ac      	b.n	80072f6 <UART_SetConfig+0x282>
 800719c:	2304      	movs	r3, #4
 800719e:	76fb      	strb	r3, [r7, #27]
 80071a0:	e0a9      	b.n	80072f6 <UART_SetConfig+0x282>
 80071a2:	2308      	movs	r3, #8
 80071a4:	76fb      	strb	r3, [r7, #27]
 80071a6:	e0a6      	b.n	80072f6 <UART_SetConfig+0x282>
 80071a8:	2310      	movs	r3, #16
 80071aa:	76fb      	strb	r3, [r7, #27]
 80071ac:	e0a3      	b.n	80072f6 <UART_SetConfig+0x282>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a6d      	ldr	r2, [pc, #436]	; (8007368 <UART_SetConfig+0x2f4>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d120      	bne.n	80071fa <UART_SetConfig+0x186>
 80071b8:	4b69      	ldr	r3, [pc, #420]	; (8007360 <UART_SetConfig+0x2ec>)
 80071ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071c2:	2b30      	cmp	r3, #48	; 0x30
 80071c4:	d013      	beq.n	80071ee <UART_SetConfig+0x17a>
 80071c6:	2b30      	cmp	r3, #48	; 0x30
 80071c8:	d814      	bhi.n	80071f4 <UART_SetConfig+0x180>
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d009      	beq.n	80071e2 <UART_SetConfig+0x16e>
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	d810      	bhi.n	80071f4 <UART_SetConfig+0x180>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <UART_SetConfig+0x168>
 80071d6:	2b10      	cmp	r3, #16
 80071d8:	d006      	beq.n	80071e8 <UART_SetConfig+0x174>
 80071da:	e00b      	b.n	80071f4 <UART_SetConfig+0x180>
 80071dc:	2300      	movs	r3, #0
 80071de:	76fb      	strb	r3, [r7, #27]
 80071e0:	e089      	b.n	80072f6 <UART_SetConfig+0x282>
 80071e2:	2302      	movs	r3, #2
 80071e4:	76fb      	strb	r3, [r7, #27]
 80071e6:	e086      	b.n	80072f6 <UART_SetConfig+0x282>
 80071e8:	2304      	movs	r3, #4
 80071ea:	76fb      	strb	r3, [r7, #27]
 80071ec:	e083      	b.n	80072f6 <UART_SetConfig+0x282>
 80071ee:	2308      	movs	r3, #8
 80071f0:	76fb      	strb	r3, [r7, #27]
 80071f2:	e080      	b.n	80072f6 <UART_SetConfig+0x282>
 80071f4:	2310      	movs	r3, #16
 80071f6:	76fb      	strb	r3, [r7, #27]
 80071f8:	e07d      	b.n	80072f6 <UART_SetConfig+0x282>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a5b      	ldr	r2, [pc, #364]	; (800736c <UART_SetConfig+0x2f8>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d120      	bne.n	8007246 <UART_SetConfig+0x1d2>
 8007204:	4b56      	ldr	r3, [pc, #344]	; (8007360 <UART_SetConfig+0x2ec>)
 8007206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800720a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800720e:	2bc0      	cmp	r3, #192	; 0xc0
 8007210:	d013      	beq.n	800723a <UART_SetConfig+0x1c6>
 8007212:	2bc0      	cmp	r3, #192	; 0xc0
 8007214:	d814      	bhi.n	8007240 <UART_SetConfig+0x1cc>
 8007216:	2b80      	cmp	r3, #128	; 0x80
 8007218:	d009      	beq.n	800722e <UART_SetConfig+0x1ba>
 800721a:	2b80      	cmp	r3, #128	; 0x80
 800721c:	d810      	bhi.n	8007240 <UART_SetConfig+0x1cc>
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <UART_SetConfig+0x1b4>
 8007222:	2b40      	cmp	r3, #64	; 0x40
 8007224:	d006      	beq.n	8007234 <UART_SetConfig+0x1c0>
 8007226:	e00b      	b.n	8007240 <UART_SetConfig+0x1cc>
 8007228:	2300      	movs	r3, #0
 800722a:	76fb      	strb	r3, [r7, #27]
 800722c:	e063      	b.n	80072f6 <UART_SetConfig+0x282>
 800722e:	2302      	movs	r3, #2
 8007230:	76fb      	strb	r3, [r7, #27]
 8007232:	e060      	b.n	80072f6 <UART_SetConfig+0x282>
 8007234:	2304      	movs	r3, #4
 8007236:	76fb      	strb	r3, [r7, #27]
 8007238:	e05d      	b.n	80072f6 <UART_SetConfig+0x282>
 800723a:	2308      	movs	r3, #8
 800723c:	76fb      	strb	r3, [r7, #27]
 800723e:	e05a      	b.n	80072f6 <UART_SetConfig+0x282>
 8007240:	2310      	movs	r3, #16
 8007242:	76fb      	strb	r3, [r7, #27]
 8007244:	e057      	b.n	80072f6 <UART_SetConfig+0x282>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a49      	ldr	r2, [pc, #292]	; (8007370 <UART_SetConfig+0x2fc>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d125      	bne.n	800729c <UART_SetConfig+0x228>
 8007250:	4b43      	ldr	r3, [pc, #268]	; (8007360 <UART_SetConfig+0x2ec>)
 8007252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800725a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800725e:	d017      	beq.n	8007290 <UART_SetConfig+0x21c>
 8007260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007264:	d817      	bhi.n	8007296 <UART_SetConfig+0x222>
 8007266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800726a:	d00b      	beq.n	8007284 <UART_SetConfig+0x210>
 800726c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007270:	d811      	bhi.n	8007296 <UART_SetConfig+0x222>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <UART_SetConfig+0x20a>
 8007276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800727a:	d006      	beq.n	800728a <UART_SetConfig+0x216>
 800727c:	e00b      	b.n	8007296 <UART_SetConfig+0x222>
 800727e:	2300      	movs	r3, #0
 8007280:	76fb      	strb	r3, [r7, #27]
 8007282:	e038      	b.n	80072f6 <UART_SetConfig+0x282>
 8007284:	2302      	movs	r3, #2
 8007286:	76fb      	strb	r3, [r7, #27]
 8007288:	e035      	b.n	80072f6 <UART_SetConfig+0x282>
 800728a:	2304      	movs	r3, #4
 800728c:	76fb      	strb	r3, [r7, #27]
 800728e:	e032      	b.n	80072f6 <UART_SetConfig+0x282>
 8007290:	2308      	movs	r3, #8
 8007292:	76fb      	strb	r3, [r7, #27]
 8007294:	e02f      	b.n	80072f6 <UART_SetConfig+0x282>
 8007296:	2310      	movs	r3, #16
 8007298:	76fb      	strb	r3, [r7, #27]
 800729a:	e02c      	b.n	80072f6 <UART_SetConfig+0x282>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a2d      	ldr	r2, [pc, #180]	; (8007358 <UART_SetConfig+0x2e4>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d125      	bne.n	80072f2 <UART_SetConfig+0x27e>
 80072a6:	4b2e      	ldr	r3, [pc, #184]	; (8007360 <UART_SetConfig+0x2ec>)
 80072a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072b4:	d017      	beq.n	80072e6 <UART_SetConfig+0x272>
 80072b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072ba:	d817      	bhi.n	80072ec <UART_SetConfig+0x278>
 80072bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072c0:	d00b      	beq.n	80072da <UART_SetConfig+0x266>
 80072c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072c6:	d811      	bhi.n	80072ec <UART_SetConfig+0x278>
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <UART_SetConfig+0x260>
 80072cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072d0:	d006      	beq.n	80072e0 <UART_SetConfig+0x26c>
 80072d2:	e00b      	b.n	80072ec <UART_SetConfig+0x278>
 80072d4:	2300      	movs	r3, #0
 80072d6:	76fb      	strb	r3, [r7, #27]
 80072d8:	e00d      	b.n	80072f6 <UART_SetConfig+0x282>
 80072da:	2302      	movs	r3, #2
 80072dc:	76fb      	strb	r3, [r7, #27]
 80072de:	e00a      	b.n	80072f6 <UART_SetConfig+0x282>
 80072e0:	2304      	movs	r3, #4
 80072e2:	76fb      	strb	r3, [r7, #27]
 80072e4:	e007      	b.n	80072f6 <UART_SetConfig+0x282>
 80072e6:	2308      	movs	r3, #8
 80072e8:	76fb      	strb	r3, [r7, #27]
 80072ea:	e004      	b.n	80072f6 <UART_SetConfig+0x282>
 80072ec:	2310      	movs	r3, #16
 80072ee:	76fb      	strb	r3, [r7, #27]
 80072f0:	e001      	b.n	80072f6 <UART_SetConfig+0x282>
 80072f2:	2310      	movs	r3, #16
 80072f4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a17      	ldr	r2, [pc, #92]	; (8007358 <UART_SetConfig+0x2e4>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	f040 8087 	bne.w	8007410 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007302:	7efb      	ldrb	r3, [r7, #27]
 8007304:	2b08      	cmp	r3, #8
 8007306:	d837      	bhi.n	8007378 <UART_SetConfig+0x304>
 8007308:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <UART_SetConfig+0x29c>)
 800730a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730e:	bf00      	nop
 8007310:	08007335 	.word	0x08007335
 8007314:	08007379 	.word	0x08007379
 8007318:	0800733d 	.word	0x0800733d
 800731c:	08007379 	.word	0x08007379
 8007320:	08007343 	.word	0x08007343
 8007324:	08007379 	.word	0x08007379
 8007328:	08007379 	.word	0x08007379
 800732c:	08007379 	.word	0x08007379
 8007330:	0800734b 	.word	0x0800734b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007334:	f7fe f884 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 8007338:	6178      	str	r0, [r7, #20]
        break;
 800733a:	e022      	b.n	8007382 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800733c:	4b0d      	ldr	r3, [pc, #52]	; (8007374 <UART_SetConfig+0x300>)
 800733e:	617b      	str	r3, [r7, #20]
        break;
 8007340:	e01f      	b.n	8007382 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007342:	f7fd ffe5 	bl	8005310 <HAL_RCC_GetSysClockFreq>
 8007346:	6178      	str	r0, [r7, #20]
        break;
 8007348:	e01b      	b.n	8007382 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800734a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800734e:	617b      	str	r3, [r7, #20]
        break;
 8007350:	e017      	b.n	8007382 <UART_SetConfig+0x30e>
 8007352:	bf00      	nop
 8007354:	efff69f3 	.word	0xefff69f3
 8007358:	40008000 	.word	0x40008000
 800735c:	40013800 	.word	0x40013800
 8007360:	40021000 	.word	0x40021000
 8007364:	40004400 	.word	0x40004400
 8007368:	40004800 	.word	0x40004800
 800736c:	40004c00 	.word	0x40004c00
 8007370:	40005000 	.word	0x40005000
 8007374:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	76bb      	strb	r3, [r7, #26]
        break;
 8007380:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 80f1 	beq.w	800756c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	4613      	mov	r3, r2
 8007390:	005b      	lsls	r3, r3, #1
 8007392:	4413      	add	r3, r2
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	429a      	cmp	r2, r3
 8007398:	d305      	bcc.n	80073a6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d902      	bls.n	80073ac <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	76bb      	strb	r3, [r7, #26]
 80073aa:	e0df      	b.n	800756c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f04f 0100 	mov.w	r1, #0
 80073b4:	f04f 0200 	mov.w	r2, #0
 80073b8:	f04f 0300 	mov.w	r3, #0
 80073bc:	020b      	lsls	r3, r1, #8
 80073be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073c2:	0202      	lsls	r2, r0, #8
 80073c4:	6879      	ldr	r1, [r7, #4]
 80073c6:	6849      	ldr	r1, [r1, #4]
 80073c8:	0849      	lsrs	r1, r1, #1
 80073ca:	4608      	mov	r0, r1
 80073cc:	f04f 0100 	mov.w	r1, #0
 80073d0:	1814      	adds	r4, r2, r0
 80073d2:	eb43 0501 	adc.w	r5, r3, r1
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	461a      	mov	r2, r3
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	4620      	mov	r0, r4
 80073e2:	4629      	mov	r1, r5
 80073e4:	f7f9 fc50 	bl	8000c88 <__aeabi_uldivmod>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	4613      	mov	r3, r2
 80073ee:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073f6:	d308      	bcc.n	800740a <UART_SetConfig+0x396>
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073fe:	d204      	bcs.n	800740a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	60da      	str	r2, [r3, #12]
 8007408:	e0b0      	b.n	800756c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	76bb      	strb	r3, [r7, #26]
 800740e:	e0ad      	b.n	800756c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007418:	d15c      	bne.n	80074d4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800741a:	7efb      	ldrb	r3, [r7, #27]
 800741c:	2b08      	cmp	r3, #8
 800741e:	d828      	bhi.n	8007472 <UART_SetConfig+0x3fe>
 8007420:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <UART_SetConfig+0x3b4>)
 8007422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007426:	bf00      	nop
 8007428:	0800744d 	.word	0x0800744d
 800742c:	08007455 	.word	0x08007455
 8007430:	0800745d 	.word	0x0800745d
 8007434:	08007473 	.word	0x08007473
 8007438:	08007463 	.word	0x08007463
 800743c:	08007473 	.word	0x08007473
 8007440:	08007473 	.word	0x08007473
 8007444:	08007473 	.word	0x08007473
 8007448:	0800746b 	.word	0x0800746b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800744c:	f7fd fff8 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 8007450:	6178      	str	r0, [r7, #20]
        break;
 8007452:	e013      	b.n	800747c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007454:	f7fe f80a 	bl	800546c <HAL_RCC_GetPCLK2Freq>
 8007458:	6178      	str	r0, [r7, #20]
        break;
 800745a:	e00f      	b.n	800747c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800745c:	4b49      	ldr	r3, [pc, #292]	; (8007584 <UART_SetConfig+0x510>)
 800745e:	617b      	str	r3, [r7, #20]
        break;
 8007460:	e00c      	b.n	800747c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007462:	f7fd ff55 	bl	8005310 <HAL_RCC_GetSysClockFreq>
 8007466:	6178      	str	r0, [r7, #20]
        break;
 8007468:	e008      	b.n	800747c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800746a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800746e:	617b      	str	r3, [r7, #20]
        break;
 8007470:	e004      	b.n	800747c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	76bb      	strb	r3, [r7, #26]
        break;
 800747a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d074      	beq.n	800756c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	005a      	lsls	r2, r3, #1
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	085b      	lsrs	r3, r3, #1
 800748c:	441a      	add	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	fbb2 f3f3 	udiv	r3, r2, r3
 8007496:	b29b      	uxth	r3, r3
 8007498:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	2b0f      	cmp	r3, #15
 800749e:	d916      	bls.n	80074ce <UART_SetConfig+0x45a>
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a6:	d212      	bcs.n	80074ce <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	f023 030f 	bic.w	r3, r3, #15
 80074b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	085b      	lsrs	r3, r3, #1
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	b29a      	uxth	r2, r3
 80074be:	89fb      	ldrh	r3, [r7, #14]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	89fa      	ldrh	r2, [r7, #14]
 80074ca:	60da      	str	r2, [r3, #12]
 80074cc:	e04e      	b.n	800756c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	76bb      	strb	r3, [r7, #26]
 80074d2:	e04b      	b.n	800756c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074d4:	7efb      	ldrb	r3, [r7, #27]
 80074d6:	2b08      	cmp	r3, #8
 80074d8:	d827      	bhi.n	800752a <UART_SetConfig+0x4b6>
 80074da:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <UART_SetConfig+0x46c>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	08007505 	.word	0x08007505
 80074e4:	0800750d 	.word	0x0800750d
 80074e8:	08007515 	.word	0x08007515
 80074ec:	0800752b 	.word	0x0800752b
 80074f0:	0800751b 	.word	0x0800751b
 80074f4:	0800752b 	.word	0x0800752b
 80074f8:	0800752b 	.word	0x0800752b
 80074fc:	0800752b 	.word	0x0800752b
 8007500:	08007523 	.word	0x08007523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007504:	f7fd ff9c 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 8007508:	6178      	str	r0, [r7, #20]
        break;
 800750a:	e013      	b.n	8007534 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800750c:	f7fd ffae 	bl	800546c <HAL_RCC_GetPCLK2Freq>
 8007510:	6178      	str	r0, [r7, #20]
        break;
 8007512:	e00f      	b.n	8007534 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007514:	4b1b      	ldr	r3, [pc, #108]	; (8007584 <UART_SetConfig+0x510>)
 8007516:	617b      	str	r3, [r7, #20]
        break;
 8007518:	e00c      	b.n	8007534 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800751a:	f7fd fef9 	bl	8005310 <HAL_RCC_GetSysClockFreq>
 800751e:	6178      	str	r0, [r7, #20]
        break;
 8007520:	e008      	b.n	8007534 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007526:	617b      	str	r3, [r7, #20]
        break;
 8007528:	e004      	b.n	8007534 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	76bb      	strb	r3, [r7, #26]
        break;
 8007532:	bf00      	nop
    }

    if (pclk != 0U)
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d018      	beq.n	800756c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	085a      	lsrs	r2, r3, #1
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	441a      	add	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	fbb2 f3f3 	udiv	r3, r2, r3
 800754c:	b29b      	uxth	r3, r3
 800754e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2b0f      	cmp	r3, #15
 8007554:	d908      	bls.n	8007568 <UART_SetConfig+0x4f4>
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800755c:	d204      	bcs.n	8007568 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	60da      	str	r2, [r3, #12]
 8007566:	e001      	b.n	800756c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007578:	7ebb      	ldrb	r3, [r7, #26]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3720      	adds	r7, #32
 800757e:	46bd      	mov	sp, r7
 8007580:	bdb0      	pop	{r4, r5, r7, pc}
 8007582:	bf00      	nop
 8007584:	00f42400 	.word	0x00f42400

08007588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00a      	beq.n	80075f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00a      	beq.n	8007618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	f003 0310 	and.w	r3, r3, #16
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00a      	beq.n	800763a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d01a      	beq.n	800769e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007686:	d10a      	bne.n	800769e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	605a      	str	r2, [r3, #4]
  }
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af02      	add	r7, sp, #8
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80076da:	f7fa ff29 	bl	8002530 <HAL_GetTick>
 80076de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0308 	and.w	r3, r3, #8
 80076ea:	2b08      	cmp	r3, #8
 80076ec:	d10e      	bne.n	800770c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f82a 	bl	8007756 <UART_WaitOnFlagUntilTimeout>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e020      	b.n	800774e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0304 	and.w	r3, r3, #4
 8007716:	2b04      	cmp	r3, #4
 8007718:	d10e      	bne.n	8007738 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800771a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f814 	bl	8007756 <UART_WaitOnFlagUntilTimeout>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e00a      	b.n	800774e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2220      	movs	r2, #32
 800773c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2220      	movs	r2, #32
 8007742:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	60f8      	str	r0, [r7, #12]
 800775e:	60b9      	str	r1, [r7, #8]
 8007760:	603b      	str	r3, [r7, #0]
 8007762:	4613      	mov	r3, r2
 8007764:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007766:	e05d      	b.n	8007824 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800776e:	d059      	beq.n	8007824 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007770:	f7fa fede 	bl	8002530 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	69ba      	ldr	r2, [r7, #24]
 800777c:	429a      	cmp	r2, r3
 800777e:	d302      	bcc.n	8007786 <UART_WaitOnFlagUntilTimeout+0x30>
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d11b      	bne.n	80077be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007794:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689a      	ldr	r2, [r3, #8]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 0201 	bic.w	r2, r2, #1
 80077a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2220      	movs	r2, #32
 80077aa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2220      	movs	r2, #32
 80077b0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e042      	b.n	8007844 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d02b      	beq.n	8007824 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077da:	d123      	bne.n	8007824 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80077f4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 0201 	bic.w	r2, r2, #1
 8007804:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2220      	movs	r2, #32
 800780a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2220      	movs	r2, #32
 8007810:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2220      	movs	r2, #32
 8007816:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e00f      	b.n	8007844 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	69da      	ldr	r2, [r3, #28]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	4013      	ands	r3, r2
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	429a      	cmp	r2, r3
 8007832:	bf0c      	ite	eq
 8007834:	2301      	moveq	r3, #1
 8007836:	2300      	movne	r3, #0
 8007838:	b2db      	uxtb	r3, r3
 800783a:	461a      	mov	r2, r3
 800783c:	79fb      	ldrb	r3, [r7, #7]
 800783e:	429a      	cmp	r2, r3
 8007840:	d092      	beq.n	8007768 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800784c:	b480      	push	{r7}
 800784e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007850:	bf00      	nop
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
	...

0800785c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007862:	f3ef 8305 	mrs	r3, IPSR
 8007866:	60bb      	str	r3, [r7, #8]
  return(result);
 8007868:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10f      	bne.n	800788e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800786e:	f3ef 8310 	mrs	r3, PRIMASK
 8007872:	607b      	str	r3, [r7, #4]
  return(result);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d105      	bne.n	8007886 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800787a:	f3ef 8311 	mrs	r3, BASEPRI
 800787e:	603b      	str	r3, [r7, #0]
  return(result);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d007      	beq.n	8007896 <osKernelInitialize+0x3a>
 8007886:	4b0e      	ldr	r3, [pc, #56]	; (80078c0 <osKernelInitialize+0x64>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b02      	cmp	r3, #2
 800788c:	d103      	bne.n	8007896 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800788e:	f06f 0305 	mvn.w	r3, #5
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	e00c      	b.n	80078b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007896:	4b0a      	ldr	r3, [pc, #40]	; (80078c0 <osKernelInitialize+0x64>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d105      	bne.n	80078aa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800789e:	4b08      	ldr	r3, [pc, #32]	; (80078c0 <osKernelInitialize+0x64>)
 80078a0:	2201      	movs	r2, #1
 80078a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	e002      	b.n	80078b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80078aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80078b0:	68fb      	ldr	r3, [r7, #12]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	20000214 	.word	0x20000214

080078c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078ca:	f3ef 8305 	mrs	r3, IPSR
 80078ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80078d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10f      	bne.n	80078f6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d6:	f3ef 8310 	mrs	r3, PRIMASK
 80078da:	607b      	str	r3, [r7, #4]
  return(result);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d105      	bne.n	80078ee <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078e2:	f3ef 8311 	mrs	r3, BASEPRI
 80078e6:	603b      	str	r3, [r7, #0]
  return(result);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d007      	beq.n	80078fe <osKernelStart+0x3a>
 80078ee:	4b0f      	ldr	r3, [pc, #60]	; (800792c <osKernelStart+0x68>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d103      	bne.n	80078fe <osKernelStart+0x3a>
    stat = osErrorISR;
 80078f6:	f06f 0305 	mvn.w	r3, #5
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	e010      	b.n	8007920 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80078fe:	4b0b      	ldr	r3, [pc, #44]	; (800792c <osKernelStart+0x68>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d109      	bne.n	800791a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007906:	f7ff ffa1 	bl	800784c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800790a:	4b08      	ldr	r3, [pc, #32]	; (800792c <osKernelStart+0x68>)
 800790c:	2202      	movs	r2, #2
 800790e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007910:	f001 f888 	bl	8008a24 <vTaskStartScheduler>
      stat = osOK;
 8007914:	2300      	movs	r3, #0
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	e002      	b.n	8007920 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800791a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800791e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007920:	68fb      	ldr	r3, [r7, #12]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20000214 	.word	0x20000214

08007930 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007930:	b580      	push	{r7, lr}
 8007932:	b090      	sub	sp, #64	; 0x40
 8007934:	af04      	add	r7, sp, #16
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800793c:	2300      	movs	r3, #0
 800793e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007940:	f3ef 8305 	mrs	r3, IPSR
 8007944:	61fb      	str	r3, [r7, #28]
  return(result);
 8007946:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007948:	2b00      	cmp	r3, #0
 800794a:	f040 808f 	bne.w	8007a6c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800794e:	f3ef 8310 	mrs	r3, PRIMASK
 8007952:	61bb      	str	r3, [r7, #24]
  return(result);
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d105      	bne.n	8007966 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800795a:	f3ef 8311 	mrs	r3, BASEPRI
 800795e:	617b      	str	r3, [r7, #20]
  return(result);
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <osThreadNew+0x3e>
 8007966:	4b44      	ldr	r3, [pc, #272]	; (8007a78 <osThreadNew+0x148>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b02      	cmp	r3, #2
 800796c:	d07e      	beq.n	8007a6c <osThreadNew+0x13c>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d07b      	beq.n	8007a6c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007974:	2380      	movs	r3, #128	; 0x80
 8007976:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007978:	2318      	movs	r3, #24
 800797a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800797c:	2300      	movs	r3, #0
 800797e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007984:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d045      	beq.n	8007a18 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <osThreadNew+0x6a>
        name = attr->name;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d008      	beq.n	80079c0 <osThreadNew+0x90>
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	2b38      	cmp	r3, #56	; 0x38
 80079b2:	d805      	bhi.n	80079c0 <osThreadNew+0x90>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <osThreadNew+0x94>
        return (NULL);
 80079c0:	2300      	movs	r3, #0
 80079c2:	e054      	b.n	8007a6e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d003      	beq.n	80079d4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	089b      	lsrs	r3, r3, #2
 80079d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00e      	beq.n	80079fa <osThreadNew+0xca>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	2b5b      	cmp	r3, #91	; 0x5b
 80079e2:	d90a      	bls.n	80079fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d006      	beq.n	80079fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <osThreadNew+0xca>
        mem = 1;
 80079f4:	2301      	movs	r3, #1
 80079f6:	623b      	str	r3, [r7, #32]
 80079f8:	e010      	b.n	8007a1c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10c      	bne.n	8007a1c <osThreadNew+0xec>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d108      	bne.n	8007a1c <osThreadNew+0xec>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d104      	bne.n	8007a1c <osThreadNew+0xec>
          mem = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	623b      	str	r3, [r7, #32]
 8007a16:	e001      	b.n	8007a1c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d110      	bne.n	8007a44 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a2a:	9202      	str	r2, [sp, #8]
 8007a2c:	9301      	str	r3, [sp, #4]
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 fe1d 	bl	8008678 <xTaskCreateStatic>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	613b      	str	r3, [r7, #16]
 8007a42:	e013      	b.n	8007a6c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d110      	bne.n	8007a6c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	f107 0310 	add.w	r3, r7, #16
 8007a52:	9301      	str	r3, [sp, #4]
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 fe68 	bl	8008732 <xTaskCreate>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d001      	beq.n	8007a6c <osThreadNew+0x13c>
          hTask = NULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a6c:	693b      	ldr	r3, [r7, #16]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3730      	adds	r7, #48	; 0x30
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20000214 	.word	0x20000214

08007a7c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a84:	f3ef 8305 	mrs	r3, IPSR
 8007a88:	613b      	str	r3, [r7, #16]
  return(result);
 8007a8a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10f      	bne.n	8007ab0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a90:	f3ef 8310 	mrs	r3, PRIMASK
 8007a94:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d105      	bne.n	8007aa8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a9c:	f3ef 8311 	mrs	r3, BASEPRI
 8007aa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d007      	beq.n	8007ab8 <osDelay+0x3c>
 8007aa8:	4b0a      	ldr	r3, [pc, #40]	; (8007ad4 <osDelay+0x58>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d103      	bne.n	8007ab8 <osDelay+0x3c>
    stat = osErrorISR;
 8007ab0:	f06f 0305 	mvn.w	r3, #5
 8007ab4:	617b      	str	r3, [r7, #20]
 8007ab6:	e007      	b.n	8007ac8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 ff7a 	bl	80089bc <vTaskDelay>
    }
  }

  return (stat);
 8007ac8:	697b      	ldr	r3, [r7, #20]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000214 	.word	0x20000214

08007ad8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	4a07      	ldr	r2, [pc, #28]	; (8007b04 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ae8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	4a06      	ldr	r2, [pc, #24]	; (8007b08 <vApplicationGetIdleTaskMemory+0x30>)
 8007aee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2280      	movs	r2, #128	; 0x80
 8007af4:	601a      	str	r2, [r3, #0]
}
 8007af6:	bf00      	nop
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20000218 	.word	0x20000218
 8007b08:	20000274 	.word	0x20000274

08007b0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	4a07      	ldr	r2, [pc, #28]	; (8007b38 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	4a06      	ldr	r2, [pc, #24]	; (8007b3c <vApplicationGetTimerTaskMemory+0x30>)
 8007b22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b2a:	601a      	str	r2, [r3, #0]
}
 8007b2c:	bf00      	nop
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	20000474 	.word	0x20000474
 8007b3c:	200004d0 	.word	0x200004d0

08007b40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f103 0208 	add.w	r2, r3, #8
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f103 0208 	add.w	r2, r3, #8
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f103 0208 	add.w	r2, r3, #8
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b8e:	bf00      	nop
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	1c5a      	adds	r2, r3, #1
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	601a      	str	r2, [r3, #0]
}
 8007bd6:	bf00      	nop
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bf8:	d103      	bne.n	8007c02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	e00c      	b.n	8007c1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3308      	adds	r3, #8
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	e002      	b.n	8007c10 <vListInsert+0x2e>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d2f6      	bcs.n	8007c0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]
}
 8007c48:	bf00      	nop
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	6892      	ldr	r2, [r2, #8]
 8007c6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	6852      	ldr	r2, [r2, #4]
 8007c74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d103      	bne.n	8007c88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	1e5a      	subs	r2, r3, #1
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10a      	bne.n	8007cd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007cce:	bf00      	nop
 8007cd0:	e7fe      	b.n	8007cd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007cd2:	f002 f847 	bl	8009d64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cde:	68f9      	ldr	r1, [r7, #12]
 8007ce0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ce2:	fb01 f303 	mul.w	r3, r1, r3
 8007ce6:	441a      	add	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d02:	3b01      	subs	r3, #1
 8007d04:	68f9      	ldr	r1, [r7, #12]
 8007d06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d08:	fb01 f303 	mul.w	r3, r1, r3
 8007d0c:	441a      	add	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	22ff      	movs	r2, #255	; 0xff
 8007d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	22ff      	movs	r2, #255	; 0xff
 8007d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d114      	bne.n	8007d52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01a      	beq.n	8007d66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3310      	adds	r3, #16
 8007d34:	4618      	mov	r0, r3
 8007d36:	f001 f8ff 	bl	8008f38 <xTaskRemoveFromEventList>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d012      	beq.n	8007d66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d40:	4b0c      	ldr	r3, [pc, #48]	; (8007d74 <xQueueGenericReset+0xcc>)
 8007d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	e009      	b.n	8007d66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	3310      	adds	r3, #16
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff fef2 	bl	8007b40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	3324      	adds	r3, #36	; 0x24
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7ff feed 	bl	8007b40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d66:	f002 f82d 	bl	8009dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d6a:	2301      	movs	r3, #1
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	e000ed04 	.word	0xe000ed04

08007d78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b08e      	sub	sp, #56	; 0x38
 8007d7c:	af02      	add	r7, sp, #8
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
 8007d84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10a      	bne.n	8007da2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d9e:	bf00      	nop
 8007da0:	e7fe      	b.n	8007da0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10a      	bne.n	8007dbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dba:	bf00      	nop
 8007dbc:	e7fe      	b.n	8007dbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <xQueueGenericCreateStatic+0x52>
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <xQueueGenericCreateStatic+0x56>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <xQueueGenericCreateStatic+0x58>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	623b      	str	r3, [r7, #32]
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d102      	bne.n	8007df6 <xQueueGenericCreateStatic+0x7e>
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <xQueueGenericCreateStatic+0x82>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <xQueueGenericCreateStatic+0x84>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10a      	bne.n	8007e16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	61fb      	str	r3, [r7, #28]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e16:	2350      	movs	r3, #80	; 0x50
 8007e18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b50      	cmp	r3, #80	; 0x50
 8007e1e:	d00a      	beq.n	8007e36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	61bb      	str	r3, [r7, #24]
}
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00d      	beq.n	8007e5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	4613      	mov	r3, r2
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	68b9      	ldr	r1, [r7, #8]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 f805 	bl	8007e68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3730      	adds	r7, #48	; 0x30
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
 8007e74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d103      	bne.n	8007e84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	69ba      	ldr	r2, [r7, #24]
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	e002      	b.n	8007e8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e96:	2101      	movs	r1, #1
 8007e98:	69b8      	ldr	r0, [r7, #24]
 8007e9a:	f7ff ff05 	bl	8007ca8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	78fa      	ldrb	r2, [r7, #3]
 8007ea2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ea6:	bf00      	nop
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
	...

08007eb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08e      	sub	sp, #56	; 0x38
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10a      	bne.n	8007ee2 <xQueueGenericSend+0x32>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ede:	bf00      	nop
 8007ee0:	e7fe      	b.n	8007ee0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d103      	bne.n	8007ef0 <xQueueGenericSend+0x40>
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <xQueueGenericSend+0x44>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e000      	b.n	8007ef6 <xQueueGenericSend+0x46>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10a      	bne.n	8007f10 <xQueueGenericSend+0x60>
	__asm volatile
 8007efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f0c:	bf00      	nop
 8007f0e:	e7fe      	b.n	8007f0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d103      	bne.n	8007f1e <xQueueGenericSend+0x6e>
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <xQueueGenericSend+0x72>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e000      	b.n	8007f24 <xQueueGenericSend+0x74>
 8007f22:	2300      	movs	r3, #0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10a      	bne.n	8007f3e <xQueueGenericSend+0x8e>
	__asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	623b      	str	r3, [r7, #32]
}
 8007f3a:	bf00      	nop
 8007f3c:	e7fe      	b.n	8007f3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f3e:	f001 f9b9 	bl	80092b4 <xTaskGetSchedulerState>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d102      	bne.n	8007f4e <xQueueGenericSend+0x9e>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <xQueueGenericSend+0xa2>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e000      	b.n	8007f54 <xQueueGenericSend+0xa4>
 8007f52:	2300      	movs	r3, #0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <xQueueGenericSend+0xbe>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	61fb      	str	r3, [r7, #28]
}
 8007f6a:	bf00      	nop
 8007f6c:	e7fe      	b.n	8007f6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f6e:	f001 fef9 	bl	8009d64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d302      	bcc.n	8007f84 <xQueueGenericSend+0xd4>
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d129      	bne.n	8007fd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	68b9      	ldr	r1, [r7, #8]
 8007f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f8a:	f000 fa07 	bl	800839c <prvCopyDataToQueue>
 8007f8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d010      	beq.n	8007fba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	3324      	adds	r3, #36	; 0x24
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 ffcb 	bl	8008f38 <xTaskRemoveFromEventList>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d013      	beq.n	8007fd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fa8:	4b3f      	ldr	r3, [pc, #252]	; (80080a8 <xQueueGenericSend+0x1f8>)
 8007faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	e00a      	b.n	8007fd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d007      	beq.n	8007fd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fc0:	4b39      	ldr	r3, [pc, #228]	; (80080a8 <xQueueGenericSend+0x1f8>)
 8007fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fd0:	f001 fef8 	bl	8009dc4 <vPortExitCritical>
				return pdPASS;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e063      	b.n	80080a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d103      	bne.n	8007fe6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fde:	f001 fef1 	bl	8009dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e05c      	b.n	80080a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d106      	bne.n	8007ffa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fec:	f107 0314 	add.w	r3, r7, #20
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f001 f805 	bl	8009000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ffa:	f001 fee3 	bl	8009dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ffe:	f000 fd77 	bl	8008af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008002:	f001 feaf 	bl	8009d64 <vPortEnterCritical>
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800800c:	b25b      	sxtb	r3, r3
 800800e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008012:	d103      	bne.n	800801c <xQueueGenericSend+0x16c>
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008022:	b25b      	sxtb	r3, r3
 8008024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008028:	d103      	bne.n	8008032 <xQueueGenericSend+0x182>
 800802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008032:	f001 fec7 	bl	8009dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008036:	1d3a      	adds	r2, r7, #4
 8008038:	f107 0314 	add.w	r3, r7, #20
 800803c:	4611      	mov	r1, r2
 800803e:	4618      	mov	r0, r3
 8008040:	f000 fff4 	bl	800902c <xTaskCheckForTimeOut>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d124      	bne.n	8008094 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800804a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800804c:	f000 fa9e 	bl	800858c <prvIsQueueFull>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d018      	beq.n	8008088 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008058:	3310      	adds	r3, #16
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	4611      	mov	r1, r2
 800805e:	4618      	mov	r0, r3
 8008060:	f000 ff1a 	bl	8008e98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008066:	f000 fa29 	bl	80084bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800806a:	f000 fd4f 	bl	8008b0c <xTaskResumeAll>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	f47f af7c 	bne.w	8007f6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008076:	4b0c      	ldr	r3, [pc, #48]	; (80080a8 <xQueueGenericSend+0x1f8>)
 8008078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	e772      	b.n	8007f6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800808a:	f000 fa17 	bl	80084bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800808e:	f000 fd3d 	bl	8008b0c <xTaskResumeAll>
 8008092:	e76c      	b.n	8007f6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008096:	f000 fa11 	bl	80084bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800809a:	f000 fd37 	bl	8008b0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800809e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3738      	adds	r7, #56	; 0x38
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	e000ed04 	.word	0xe000ed04

080080ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b08e      	sub	sp, #56	; 0x38
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
 80080b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10a      	bne.n	80080da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80080c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080d6:	bf00      	nop
 80080d8:	e7fe      	b.n	80080d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d103      	bne.n	80080e8 <xQueueGenericSendFromISR+0x3c>
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <xQueueGenericSendFromISR+0x40>
 80080e8:	2301      	movs	r3, #1
 80080ea:	e000      	b.n	80080ee <xQueueGenericSendFromISR+0x42>
 80080ec:	2300      	movs	r3, #0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10a      	bne.n	8008108 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	623b      	str	r3, [r7, #32]
}
 8008104:	bf00      	nop
 8008106:	e7fe      	b.n	8008106 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2b02      	cmp	r3, #2
 800810c:	d103      	bne.n	8008116 <xQueueGenericSendFromISR+0x6a>
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008112:	2b01      	cmp	r3, #1
 8008114:	d101      	bne.n	800811a <xQueueGenericSendFromISR+0x6e>
 8008116:	2301      	movs	r3, #1
 8008118:	e000      	b.n	800811c <xQueueGenericSendFromISR+0x70>
 800811a:	2300      	movs	r3, #0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10a      	bne.n	8008136 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	61fb      	str	r3, [r7, #28]
}
 8008132:	bf00      	nop
 8008134:	e7fe      	b.n	8008134 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008136:	f001 fef7 	bl	8009f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800813a:	f3ef 8211 	mrs	r2, BASEPRI
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	61ba      	str	r2, [r7, #24]
 8008150:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008152:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008154:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815e:	429a      	cmp	r2, r3
 8008160:	d302      	bcc.n	8008168 <xQueueGenericSendFromISR+0xbc>
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	2b02      	cmp	r3, #2
 8008166:	d12c      	bne.n	80081c2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800816e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	68b9      	ldr	r1, [r7, #8]
 8008176:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008178:	f000 f910 	bl	800839c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800817c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008184:	d112      	bne.n	80081ac <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818a:	2b00      	cmp	r3, #0
 800818c:	d016      	beq.n	80081bc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	3324      	adds	r3, #36	; 0x24
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fed0 	bl	8008f38 <xTaskRemoveFromEventList>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00e      	beq.n	80081bc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00b      	beq.n	80081bc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	e007      	b.n	80081bc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081b0:	3301      	adds	r3, #1
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	b25a      	sxtb	r2, r3
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081bc:	2301      	movs	r3, #1
 80081be:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80081c0:	e001      	b.n	80081c6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081c2:	2300      	movs	r3, #0
 80081c4:	637b      	str	r3, [r7, #52]	; 0x34
 80081c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80081d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3738      	adds	r7, #56	; 0x38
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08c      	sub	sp, #48	; 0x30
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80081e8:	2300      	movs	r3, #0
 80081ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10a      	bne.n	800820c <xQueueReceive+0x30>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	623b      	str	r3, [r7, #32]
}
 8008208:	bf00      	nop
 800820a:	e7fe      	b.n	800820a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d103      	bne.n	800821a <xQueueReceive+0x3e>
 8008212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <xQueueReceive+0x42>
 800821a:	2301      	movs	r3, #1
 800821c:	e000      	b.n	8008220 <xQueueReceive+0x44>
 800821e:	2300      	movs	r3, #0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10a      	bne.n	800823a <xQueueReceive+0x5e>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	61fb      	str	r3, [r7, #28]
}
 8008236:	bf00      	nop
 8008238:	e7fe      	b.n	8008238 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800823a:	f001 f83b 	bl	80092b4 <xTaskGetSchedulerState>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d102      	bne.n	800824a <xQueueReceive+0x6e>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <xQueueReceive+0x72>
 800824a:	2301      	movs	r3, #1
 800824c:	e000      	b.n	8008250 <xQueueReceive+0x74>
 800824e:	2300      	movs	r3, #0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10a      	bne.n	800826a <xQueueReceive+0x8e>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	61bb      	str	r3, [r7, #24]
}
 8008266:	bf00      	nop
 8008268:	e7fe      	b.n	8008268 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800826a:	f001 fd7b 	bl	8009d64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008272:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	2b00      	cmp	r3, #0
 8008278:	d01f      	beq.n	80082ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800827a:	68b9      	ldr	r1, [r7, #8]
 800827c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800827e:	f000 f8f7 	bl	8008470 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	1e5a      	subs	r2, r3, #1
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00f      	beq.n	80082b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008294:	3310      	adds	r3, #16
 8008296:	4618      	mov	r0, r3
 8008298:	f000 fe4e 	bl	8008f38 <xTaskRemoveFromEventList>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d007      	beq.n	80082b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082a2:	4b3d      	ldr	r3, [pc, #244]	; (8008398 <xQueueReceive+0x1bc>)
 80082a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082b2:	f001 fd87 	bl	8009dc4 <vPortExitCritical>
				return pdPASS;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e069      	b.n	800838e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d103      	bne.n	80082c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082c0:	f001 fd80 	bl	8009dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082c4:	2300      	movs	r3, #0
 80082c6:	e062      	b.n	800838e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d106      	bne.n	80082dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082ce:	f107 0310 	add.w	r3, r7, #16
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fe94 	bl	8009000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082d8:	2301      	movs	r3, #1
 80082da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082dc:	f001 fd72 	bl	8009dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082e0:	f000 fc06 	bl	8008af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082e4:	f001 fd3e 	bl	8009d64 <vPortEnterCritical>
 80082e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082ee:	b25b      	sxtb	r3, r3
 80082f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082f4:	d103      	bne.n	80082fe <xQueueReceive+0x122>
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008304:	b25b      	sxtb	r3, r3
 8008306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800830a:	d103      	bne.n	8008314 <xQueueReceive+0x138>
 800830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830e:	2200      	movs	r2, #0
 8008310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008314:	f001 fd56 	bl	8009dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008318:	1d3a      	adds	r2, r7, #4
 800831a:	f107 0310 	add.w	r3, r7, #16
 800831e:	4611      	mov	r1, r2
 8008320:	4618      	mov	r0, r3
 8008322:	f000 fe83 	bl	800902c <xTaskCheckForTimeOut>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d123      	bne.n	8008374 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800832c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800832e:	f000 f917 	bl	8008560 <prvIsQueueEmpty>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d017      	beq.n	8008368 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833a:	3324      	adds	r3, #36	; 0x24
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	4611      	mov	r1, r2
 8008340:	4618      	mov	r0, r3
 8008342:	f000 fda9 	bl	8008e98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008348:	f000 f8b8 	bl	80084bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800834c:	f000 fbde 	bl	8008b0c <xTaskResumeAll>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d189      	bne.n	800826a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008356:	4b10      	ldr	r3, [pc, #64]	; (8008398 <xQueueReceive+0x1bc>)
 8008358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	e780      	b.n	800826a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800836a:	f000 f8a7 	bl	80084bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800836e:	f000 fbcd 	bl	8008b0c <xTaskResumeAll>
 8008372:	e77a      	b.n	800826a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008376:	f000 f8a1 	bl	80084bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800837a:	f000 fbc7 	bl	8008b0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800837e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008380:	f000 f8ee 	bl	8008560 <prvIsQueueEmpty>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	f43f af6f 	beq.w	800826a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800838c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800838e:	4618      	mov	r0, r3
 8008390:	3730      	adds	r7, #48	; 0x30
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	e000ed04 	.word	0xe000ed04

0800839c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083a8:	2300      	movs	r3, #0
 80083aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10d      	bne.n	80083d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d14d      	bne.n	800845e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 ff92 	bl	80092f0 <xTaskPriorityDisinherit>
 80083cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	609a      	str	r2, [r3, #8]
 80083d4:	e043      	b.n	800845e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d119      	bne.n	8008410 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6858      	ldr	r0, [r3, #4]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e4:	461a      	mov	r2, r3
 80083e6:	68b9      	ldr	r1, [r7, #8]
 80083e8:	f001 ffe2 	bl	800a3b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	685a      	ldr	r2, [r3, #4]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f4:	441a      	add	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	429a      	cmp	r2, r3
 8008404:	d32b      	bcc.n	800845e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	605a      	str	r2, [r3, #4]
 800840e:	e026      	b.n	800845e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	68d8      	ldr	r0, [r3, #12]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008418:	461a      	mov	r2, r3
 800841a:	68b9      	ldr	r1, [r7, #8]
 800841c:	f001 ffc8 	bl	800a3b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008428:	425b      	negs	r3, r3
 800842a:	441a      	add	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	68da      	ldr	r2, [r3, #12]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	429a      	cmp	r2, r3
 800843a:	d207      	bcs.n	800844c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008444:	425b      	negs	r3, r3
 8008446:	441a      	add	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b02      	cmp	r3, #2
 8008450:	d105      	bne.n	800845e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	3b01      	subs	r3, #1
 800845c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008466:	697b      	ldr	r3, [r7, #20]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3718      	adds	r7, #24
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847e:	2b00      	cmp	r3, #0
 8008480:	d018      	beq.n	80084b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	441a      	add	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68da      	ldr	r2, [r3, #12]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	429a      	cmp	r2, r3
 800849a:	d303      	bcc.n	80084a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68d9      	ldr	r1, [r3, #12]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ac:	461a      	mov	r2, r3
 80084ae:	6838      	ldr	r0, [r7, #0]
 80084b0:	f001 ff7e 	bl	800a3b0 <memcpy>
	}
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084c4:	f001 fc4e 	bl	8009d64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084d0:	e011      	b.n	80084f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d012      	beq.n	8008500 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3324      	adds	r3, #36	; 0x24
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fd2a 	bl	8008f38 <xTaskRemoveFromEventList>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d001      	beq.n	80084ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084ea:	f000 fe01 	bl	80090f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	dce9      	bgt.n	80084d2 <prvUnlockQueue+0x16>
 80084fe:	e000      	b.n	8008502 <prvUnlockQueue+0x46>
					break;
 8008500:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	22ff      	movs	r2, #255	; 0xff
 8008506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800850a:	f001 fc5b 	bl	8009dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800850e:	f001 fc29 	bl	8009d64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008518:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800851a:	e011      	b.n	8008540 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d012      	beq.n	800854a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3310      	adds	r3, #16
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fd05 	bl	8008f38 <xTaskRemoveFromEventList>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008534:	f000 fddc 	bl	80090f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008538:	7bbb      	ldrb	r3, [r7, #14]
 800853a:	3b01      	subs	r3, #1
 800853c:	b2db      	uxtb	r3, r3
 800853e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008544:	2b00      	cmp	r3, #0
 8008546:	dce9      	bgt.n	800851c <prvUnlockQueue+0x60>
 8008548:	e000      	b.n	800854c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800854a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	22ff      	movs	r2, #255	; 0xff
 8008550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008554:	f001 fc36 	bl	8009dc4 <vPortExitCritical>
}
 8008558:	bf00      	nop
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008568:	f001 fbfc 	bl	8009d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008570:	2b00      	cmp	r3, #0
 8008572:	d102      	bne.n	800857a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008574:	2301      	movs	r3, #1
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	e001      	b.n	800857e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800857a:	2300      	movs	r3, #0
 800857c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800857e:	f001 fc21 	bl	8009dc4 <vPortExitCritical>

	return xReturn;
 8008582:	68fb      	ldr	r3, [r7, #12]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008594:	f001 fbe6 	bl	8009d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d102      	bne.n	80085aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085a4:	2301      	movs	r3, #1
 80085a6:	60fb      	str	r3, [r7, #12]
 80085a8:	e001      	b.n	80085ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085aa:	2300      	movs	r3, #0
 80085ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085ae:	f001 fc09 	bl	8009dc4 <vPortExitCritical>

	return xReturn;
 80085b2:	68fb      	ldr	r3, [r7, #12]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085c6:	2300      	movs	r3, #0
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	e014      	b.n	80085f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085cc:	4a0f      	ldr	r2, [pc, #60]	; (800860c <vQueueAddToRegistry+0x50>)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10b      	bne.n	80085f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80085d8:	490c      	ldr	r1, [pc, #48]	; (800860c <vQueueAddToRegistry+0x50>)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80085e2:	4a0a      	ldr	r2, [pc, #40]	; (800860c <vQueueAddToRegistry+0x50>)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	4413      	add	r3, r2
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80085ee:	e006      	b.n	80085fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3301      	adds	r3, #1
 80085f4:	60fb      	str	r3, [r7, #12]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2b07      	cmp	r3, #7
 80085fa:	d9e7      	bls.n	80085cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80085fc:	bf00      	nop
 80085fe:	bf00      	nop
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	20001f28 	.word	0x20001f28

08008610 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008620:	f001 fba0 	bl	8009d64 <vPortEnterCritical>
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800862a:	b25b      	sxtb	r3, r3
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008630:	d103      	bne.n	800863a <vQueueWaitForMessageRestricted+0x2a>
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008640:	b25b      	sxtb	r3, r3
 8008642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008646:	d103      	bne.n	8008650 <vQueueWaitForMessageRestricted+0x40>
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008650:	f001 fbb8 	bl	8009dc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008658:	2b00      	cmp	r3, #0
 800865a:	d106      	bne.n	800866a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	3324      	adds	r3, #36	; 0x24
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	68b9      	ldr	r1, [r7, #8]
 8008664:	4618      	mov	r0, r3
 8008666:	f000 fc3b 	bl	8008ee0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800866a:	6978      	ldr	r0, [r7, #20]
 800866c:	f7ff ff26 	bl	80084bc <prvUnlockQueue>
	}
 8008670:	bf00      	nop
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08e      	sub	sp, #56	; 0x38
 800867c:	af04      	add	r7, sp, #16
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
 8008684:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10a      	bne.n	80086a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	623b      	str	r3, [r7, #32]
}
 800869e:	bf00      	nop
 80086a0:	e7fe      	b.n	80086a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10a      	bne.n	80086be <xTaskCreateStatic+0x46>
	__asm volatile
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	61fb      	str	r3, [r7, #28]
}
 80086ba:	bf00      	nop
 80086bc:	e7fe      	b.n	80086bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086be:	235c      	movs	r3, #92	; 0x5c
 80086c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	2b5c      	cmp	r3, #92	; 0x5c
 80086c6:	d00a      	beq.n	80086de <xTaskCreateStatic+0x66>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	61bb      	str	r3, [r7, #24]
}
 80086da:	bf00      	nop
 80086dc:	e7fe      	b.n	80086dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d01e      	beq.n	8008724 <xTaskCreateStatic+0xac>
 80086e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d01b      	beq.n	8008724 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	2202      	movs	r2, #2
 80086fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086fe:	2300      	movs	r3, #0
 8008700:	9303      	str	r3, [sp, #12]
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	9302      	str	r3, [sp, #8]
 8008706:	f107 0314 	add.w	r3, r7, #20
 800870a:	9301      	str	r3, [sp, #4]
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 f850 	bl	80087bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800871c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800871e:	f000 f8dd 	bl	80088dc <prvAddNewTaskToReadyList>
 8008722:	e001      	b.n	8008728 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008724:	2300      	movs	r3, #0
 8008726:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008728:	697b      	ldr	r3, [r7, #20]
	}
 800872a:	4618      	mov	r0, r3
 800872c:	3728      	adds	r7, #40	; 0x28
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008732:	b580      	push	{r7, lr}
 8008734:	b08c      	sub	sp, #48	; 0x30
 8008736:	af04      	add	r7, sp, #16
 8008738:	60f8      	str	r0, [r7, #12]
 800873a:	60b9      	str	r1, [r7, #8]
 800873c:	603b      	str	r3, [r7, #0]
 800873e:	4613      	mov	r3, r2
 8008740:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008742:	88fb      	ldrh	r3, [r7, #6]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4618      	mov	r0, r3
 8008748:	f001 fc2e 	bl	8009fa8 <pvPortMalloc>
 800874c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00e      	beq.n	8008772 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008754:	205c      	movs	r0, #92	; 0x5c
 8008756:	f001 fc27 	bl	8009fa8 <pvPortMalloc>
 800875a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	631a      	str	r2, [r3, #48]	; 0x30
 8008768:	e005      	b.n	8008776 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800876a:	6978      	ldr	r0, [r7, #20]
 800876c:	f001 fce0 	bl	800a130 <vPortFree>
 8008770:	e001      	b.n	8008776 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008772:	2300      	movs	r3, #0
 8008774:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d017      	beq.n	80087ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008784:	88fa      	ldrh	r2, [r7, #6]
 8008786:	2300      	movs	r3, #0
 8008788:	9303      	str	r3, [sp, #12]
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	9302      	str	r3, [sp, #8]
 800878e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	68b9      	ldr	r1, [r7, #8]
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 f80e 	bl	80087bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087a0:	69f8      	ldr	r0, [r7, #28]
 80087a2:	f000 f89b 	bl	80088dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087a6:	2301      	movs	r3, #1
 80087a8:	61bb      	str	r3, [r7, #24]
 80087aa:	e002      	b.n	80087b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087b2:	69bb      	ldr	r3, [r7, #24]
	}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3720      	adds	r7, #32
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	461a      	mov	r2, r3
 80087d4:	21a5      	movs	r1, #165	; 0xa5
 80087d6:	f001 fdf9 	bl	800a3cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087e4:	3b01      	subs	r3, #1
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4413      	add	r3, r2
 80087ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	f023 0307 	bic.w	r3, r3, #7
 80087f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00a      	beq.n	8008814 <prvInitialiseNewTask+0x58>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	617b      	str	r3, [r7, #20]
}
 8008810:	bf00      	nop
 8008812:	e7fe      	b.n	8008812 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d01f      	beq.n	800885a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800881a:	2300      	movs	r3, #0
 800881c:	61fb      	str	r3, [r7, #28]
 800881e:	e012      	b.n	8008846 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	4413      	add	r3, r2
 8008826:	7819      	ldrb	r1, [r3, #0]
 8008828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	4413      	add	r3, r2
 800882e:	3334      	adds	r3, #52	; 0x34
 8008830:	460a      	mov	r2, r1
 8008832:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	4413      	add	r3, r2
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d006      	beq.n	800884e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	3301      	adds	r3, #1
 8008844:	61fb      	str	r3, [r7, #28]
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	2b0f      	cmp	r3, #15
 800884a:	d9e9      	bls.n	8008820 <prvInitialiseNewTask+0x64>
 800884c:	e000      	b.n	8008850 <prvInitialiseNewTask+0x94>
			{
				break;
 800884e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008858:	e003      	b.n	8008862 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	2b37      	cmp	r3, #55	; 0x37
 8008866:	d901      	bls.n	800886c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008868:	2337      	movs	r3, #55	; 0x37
 800886a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008870:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008876:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887a:	2200      	movs	r2, #0
 800887c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	3304      	adds	r3, #4
 8008882:	4618      	mov	r0, r3
 8008884:	f7ff f97c 	bl	8007b80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	3318      	adds	r3, #24
 800888c:	4618      	mov	r0, r3
 800888e:	f7ff f977 	bl	8007b80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008896:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	2200      	movs	r2, #0
 80088ac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	68f9      	ldr	r1, [r7, #12]
 80088ba:	69b8      	ldr	r0, [r7, #24]
 80088bc:	f001 f928 	bl	8009b10 <pxPortInitialiseStack>
 80088c0:	4602      	mov	r2, r0
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d002      	beq.n	80088d2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088d2:	bf00      	nop
 80088d4:	3720      	adds	r7, #32
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088e4:	f001 fa3e 	bl	8009d64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088e8:	4b2d      	ldr	r3, [pc, #180]	; (80089a0 <prvAddNewTaskToReadyList+0xc4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3301      	adds	r3, #1
 80088ee:	4a2c      	ldr	r2, [pc, #176]	; (80089a0 <prvAddNewTaskToReadyList+0xc4>)
 80088f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088f2:	4b2c      	ldr	r3, [pc, #176]	; (80089a4 <prvAddNewTaskToReadyList+0xc8>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d109      	bne.n	800890e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088fa:	4a2a      	ldr	r2, [pc, #168]	; (80089a4 <prvAddNewTaskToReadyList+0xc8>)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008900:	4b27      	ldr	r3, [pc, #156]	; (80089a0 <prvAddNewTaskToReadyList+0xc4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d110      	bne.n	800892a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008908:	f000 fc16 	bl	8009138 <prvInitialiseTaskLists>
 800890c:	e00d      	b.n	800892a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800890e:	4b26      	ldr	r3, [pc, #152]	; (80089a8 <prvAddNewTaskToReadyList+0xcc>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d109      	bne.n	800892a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008916:	4b23      	ldr	r3, [pc, #140]	; (80089a4 <prvAddNewTaskToReadyList+0xc8>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008920:	429a      	cmp	r2, r3
 8008922:	d802      	bhi.n	800892a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008924:	4a1f      	ldr	r2, [pc, #124]	; (80089a4 <prvAddNewTaskToReadyList+0xc8>)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800892a:	4b20      	ldr	r3, [pc, #128]	; (80089ac <prvAddNewTaskToReadyList+0xd0>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	3301      	adds	r3, #1
 8008930:	4a1e      	ldr	r2, [pc, #120]	; (80089ac <prvAddNewTaskToReadyList+0xd0>)
 8008932:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008934:	4b1d      	ldr	r3, [pc, #116]	; (80089ac <prvAddNewTaskToReadyList+0xd0>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008940:	4b1b      	ldr	r3, [pc, #108]	; (80089b0 <prvAddNewTaskToReadyList+0xd4>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	429a      	cmp	r2, r3
 8008946:	d903      	bls.n	8008950 <prvAddNewTaskToReadyList+0x74>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894c:	4a18      	ldr	r2, [pc, #96]	; (80089b0 <prvAddNewTaskToReadyList+0xd4>)
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008954:	4613      	mov	r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4a15      	ldr	r2, [pc, #84]	; (80089b4 <prvAddNewTaskToReadyList+0xd8>)
 800895e:	441a      	add	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3304      	adds	r3, #4
 8008964:	4619      	mov	r1, r3
 8008966:	4610      	mov	r0, r2
 8008968:	f7ff f917 	bl	8007b9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800896c:	f001 fa2a 	bl	8009dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008970:	4b0d      	ldr	r3, [pc, #52]	; (80089a8 <prvAddNewTaskToReadyList+0xcc>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00e      	beq.n	8008996 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008978:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <prvAddNewTaskToReadyList+0xc8>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008982:	429a      	cmp	r2, r3
 8008984:	d207      	bcs.n	8008996 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008986:	4b0c      	ldr	r3, [pc, #48]	; (80089b8 <prvAddNewTaskToReadyList+0xdc>)
 8008988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008996:	bf00      	nop
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	20000da4 	.word	0x20000da4
 80089a4:	200008d0 	.word	0x200008d0
 80089a8:	20000db0 	.word	0x20000db0
 80089ac:	20000dc0 	.word	0x20000dc0
 80089b0:	20000dac 	.word	0x20000dac
 80089b4:	200008d4 	.word	0x200008d4
 80089b8:	e000ed04 	.word	0xe000ed04

080089bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089c4:	2300      	movs	r3, #0
 80089c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d017      	beq.n	80089fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089ce:	4b13      	ldr	r3, [pc, #76]	; (8008a1c <vTaskDelay+0x60>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00a      	beq.n	80089ec <vTaskDelay+0x30>
	__asm volatile
 80089d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089da:	f383 8811 	msr	BASEPRI, r3
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	60bb      	str	r3, [r7, #8]
}
 80089e8:	bf00      	nop
 80089ea:	e7fe      	b.n	80089ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80089ec:	f000 f880 	bl	8008af0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089f0:	2100      	movs	r1, #0
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fcea 	bl	80093cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089f8:	f000 f888 	bl	8008b0c <xTaskResumeAll>
 80089fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d107      	bne.n	8008a14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008a04:	4b06      	ldr	r3, [pc, #24]	; (8008a20 <vTaskDelay+0x64>)
 8008a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a0a:	601a      	str	r2, [r3, #0]
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a14:	bf00      	nop
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	20000dcc 	.word	0x20000dcc
 8008a20:	e000ed04 	.word	0xe000ed04

08008a24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b08a      	sub	sp, #40	; 0x28
 8008a28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a32:	463a      	mov	r2, r7
 8008a34:	1d39      	adds	r1, r7, #4
 8008a36:	f107 0308 	add.w	r3, r7, #8
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7ff f84c 	bl	8007ad8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	9202      	str	r2, [sp, #8]
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	460a      	mov	r2, r1
 8008a52:	4921      	ldr	r1, [pc, #132]	; (8008ad8 <vTaskStartScheduler+0xb4>)
 8008a54:	4821      	ldr	r0, [pc, #132]	; (8008adc <vTaskStartScheduler+0xb8>)
 8008a56:	f7ff fe0f 	bl	8008678 <xTaskCreateStatic>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	4a20      	ldr	r2, [pc, #128]	; (8008ae0 <vTaskStartScheduler+0xbc>)
 8008a5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a60:	4b1f      	ldr	r3, [pc, #124]	; (8008ae0 <vTaskStartScheduler+0xbc>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	617b      	str	r3, [r7, #20]
 8008a6c:	e001      	b.n	8008a72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d102      	bne.n	8008a7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a78:	f000 fcfc 	bl	8009474 <xTimerCreateTimerTask>
 8008a7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d116      	bne.n	8008ab2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	613b      	str	r3, [r7, #16]
}
 8008a96:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a98:	4b12      	ldr	r3, [pc, #72]	; (8008ae4 <vTaskStartScheduler+0xc0>)
 8008a9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008aa0:	4b11      	ldr	r3, [pc, #68]	; (8008ae8 <vTaskStartScheduler+0xc4>)
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008aa6:	4b11      	ldr	r3, [pc, #68]	; (8008aec <vTaskStartScheduler+0xc8>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008aac:	f001 f8b8 	bl	8009c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ab0:	e00e      	b.n	8008ad0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ab8:	d10a      	bne.n	8008ad0 <vTaskStartScheduler+0xac>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	60fb      	str	r3, [r7, #12]
}
 8008acc:	bf00      	nop
 8008ace:	e7fe      	b.n	8008ace <vTaskStartScheduler+0xaa>
}
 8008ad0:	bf00      	nop
 8008ad2:	3718      	adds	r7, #24
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	0800ecd0 	.word	0x0800ecd0
 8008adc:	08009109 	.word	0x08009109
 8008ae0:	20000dc8 	.word	0x20000dc8
 8008ae4:	20000dc4 	.word	0x20000dc4
 8008ae8:	20000db0 	.word	0x20000db0
 8008aec:	20000da8 	.word	0x20000da8

08008af0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008af0:	b480      	push	{r7}
 8008af2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008af4:	4b04      	ldr	r3, [pc, #16]	; (8008b08 <vTaskSuspendAll+0x18>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3301      	adds	r3, #1
 8008afa:	4a03      	ldr	r2, [pc, #12]	; (8008b08 <vTaskSuspendAll+0x18>)
 8008afc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008afe:	bf00      	nop
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	20000dcc 	.word	0x20000dcc

08008b0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b12:	2300      	movs	r3, #0
 8008b14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b16:	2300      	movs	r3, #0
 8008b18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b1a:	4b42      	ldr	r3, [pc, #264]	; (8008c24 <xTaskResumeAll+0x118>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10a      	bne.n	8008b38 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	603b      	str	r3, [r7, #0]
}
 8008b34:	bf00      	nop
 8008b36:	e7fe      	b.n	8008b36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b38:	f001 f914 	bl	8009d64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b3c:	4b39      	ldr	r3, [pc, #228]	; (8008c24 <xTaskResumeAll+0x118>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	4a38      	ldr	r2, [pc, #224]	; (8008c24 <xTaskResumeAll+0x118>)
 8008b44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b46:	4b37      	ldr	r3, [pc, #220]	; (8008c24 <xTaskResumeAll+0x118>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d162      	bne.n	8008c14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b4e:	4b36      	ldr	r3, [pc, #216]	; (8008c28 <xTaskResumeAll+0x11c>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d05e      	beq.n	8008c14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b56:	e02f      	b.n	8008bb8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b58:	4b34      	ldr	r3, [pc, #208]	; (8008c2c <xTaskResumeAll+0x120>)
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3318      	adds	r3, #24
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7ff f875 	bl	8007c54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7ff f870 	bl	8007c54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b78:	4b2d      	ldr	r3, [pc, #180]	; (8008c30 <xTaskResumeAll+0x124>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d903      	bls.n	8008b88 <xTaskResumeAll+0x7c>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b84:	4a2a      	ldr	r2, [pc, #168]	; (8008c30 <xTaskResumeAll+0x124>)
 8008b86:	6013      	str	r3, [r2, #0]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4a27      	ldr	r2, [pc, #156]	; (8008c34 <xTaskResumeAll+0x128>)
 8008b96:	441a      	add	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	4610      	mov	r0, r2
 8008ba0:	f7fe fffb 	bl	8007b9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba8:	4b23      	ldr	r3, [pc, #140]	; (8008c38 <xTaskResumeAll+0x12c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d302      	bcc.n	8008bb8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008bb2:	4b22      	ldr	r3, [pc, #136]	; (8008c3c <xTaskResumeAll+0x130>)
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bb8:	4b1c      	ldr	r3, [pc, #112]	; (8008c2c <xTaskResumeAll+0x120>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1cb      	bne.n	8008b58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008bc6:	f000 fb55 	bl	8009274 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008bca:	4b1d      	ldr	r3, [pc, #116]	; (8008c40 <xTaskResumeAll+0x134>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d010      	beq.n	8008bf8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008bd6:	f000 f847 	bl	8008c68 <xTaskIncrementTick>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008be0:	4b16      	ldr	r3, [pc, #88]	; (8008c3c <xTaskResumeAll+0x130>)
 8008be2:	2201      	movs	r2, #1
 8008be4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	3b01      	subs	r3, #1
 8008bea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1f1      	bne.n	8008bd6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008bf2:	4b13      	ldr	r3, [pc, #76]	; (8008c40 <xTaskResumeAll+0x134>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008bf8:	4b10      	ldr	r3, [pc, #64]	; (8008c3c <xTaskResumeAll+0x130>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d009      	beq.n	8008c14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c00:	2301      	movs	r3, #1
 8008c02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c04:	4b0f      	ldr	r3, [pc, #60]	; (8008c44 <xTaskResumeAll+0x138>)
 8008c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c14:	f001 f8d6 	bl	8009dc4 <vPortExitCritical>

	return xAlreadyYielded;
 8008c18:	68bb      	ldr	r3, [r7, #8]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20000dcc 	.word	0x20000dcc
 8008c28:	20000da4 	.word	0x20000da4
 8008c2c:	20000d64 	.word	0x20000d64
 8008c30:	20000dac 	.word	0x20000dac
 8008c34:	200008d4 	.word	0x200008d4
 8008c38:	200008d0 	.word	0x200008d0
 8008c3c:	20000db8 	.word	0x20000db8
 8008c40:	20000db4 	.word	0x20000db4
 8008c44:	e000ed04 	.word	0xe000ed04

08008c48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c4e:	4b05      	ldr	r3, [pc, #20]	; (8008c64 <xTaskGetTickCount+0x1c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c54:	687b      	ldr	r3, [r7, #4]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	20000da8 	.word	0x20000da8

08008c68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c72:	4b4f      	ldr	r3, [pc, #316]	; (8008db0 <xTaskIncrementTick+0x148>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f040 8089 	bne.w	8008d8e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c7c:	4b4d      	ldr	r3, [pc, #308]	; (8008db4 <xTaskIncrementTick+0x14c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	3301      	adds	r3, #1
 8008c82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c84:	4a4b      	ldr	r2, [pc, #300]	; (8008db4 <xTaskIncrementTick+0x14c>)
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d120      	bne.n	8008cd2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c90:	4b49      	ldr	r3, [pc, #292]	; (8008db8 <xTaskIncrementTick+0x150>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00a      	beq.n	8008cb0 <xTaskIncrementTick+0x48>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	603b      	str	r3, [r7, #0]
}
 8008cac:	bf00      	nop
 8008cae:	e7fe      	b.n	8008cae <xTaskIncrementTick+0x46>
 8008cb0:	4b41      	ldr	r3, [pc, #260]	; (8008db8 <xTaskIncrementTick+0x150>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	60fb      	str	r3, [r7, #12]
 8008cb6:	4b41      	ldr	r3, [pc, #260]	; (8008dbc <xTaskIncrementTick+0x154>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a3f      	ldr	r2, [pc, #252]	; (8008db8 <xTaskIncrementTick+0x150>)
 8008cbc:	6013      	str	r3, [r2, #0]
 8008cbe:	4a3f      	ldr	r2, [pc, #252]	; (8008dbc <xTaskIncrementTick+0x154>)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6013      	str	r3, [r2, #0]
 8008cc4:	4b3e      	ldr	r3, [pc, #248]	; (8008dc0 <xTaskIncrementTick+0x158>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	4a3d      	ldr	r2, [pc, #244]	; (8008dc0 <xTaskIncrementTick+0x158>)
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	f000 fad1 	bl	8009274 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008cd2:	4b3c      	ldr	r3, [pc, #240]	; (8008dc4 <xTaskIncrementTick+0x15c>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d349      	bcc.n	8008d70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cdc:	4b36      	ldr	r3, [pc, #216]	; (8008db8 <xTaskIncrementTick+0x150>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d104      	bne.n	8008cf0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ce6:	4b37      	ldr	r3, [pc, #220]	; (8008dc4 <xTaskIncrementTick+0x15c>)
 8008ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cec:	601a      	str	r2, [r3, #0]
					break;
 8008cee:	e03f      	b.n	8008d70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cf0:	4b31      	ldr	r3, [pc, #196]	; (8008db8 <xTaskIncrementTick+0x150>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d00:	693a      	ldr	r2, [r7, #16]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d203      	bcs.n	8008d10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d08:	4a2e      	ldr	r2, [pc, #184]	; (8008dc4 <xTaskIncrementTick+0x15c>)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d0e:	e02f      	b.n	8008d70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	3304      	adds	r3, #4
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fe ff9d 	bl	8007c54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d004      	beq.n	8008d2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	3318      	adds	r3, #24
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fe ff94 	bl	8007c54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d30:	4b25      	ldr	r3, [pc, #148]	; (8008dc8 <xTaskIncrementTick+0x160>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d903      	bls.n	8008d40 <xTaskIncrementTick+0xd8>
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3c:	4a22      	ldr	r2, [pc, #136]	; (8008dc8 <xTaskIncrementTick+0x160>)
 8008d3e:	6013      	str	r3, [r2, #0]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d44:	4613      	mov	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4a1f      	ldr	r2, [pc, #124]	; (8008dcc <xTaskIncrementTick+0x164>)
 8008d4e:	441a      	add	r2, r3
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	3304      	adds	r3, #4
 8008d54:	4619      	mov	r1, r3
 8008d56:	4610      	mov	r0, r2
 8008d58:	f7fe ff1f 	bl	8007b9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d60:	4b1b      	ldr	r3, [pc, #108]	; (8008dd0 <xTaskIncrementTick+0x168>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d3b8      	bcc.n	8008cdc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d6e:	e7b5      	b.n	8008cdc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d70:	4b17      	ldr	r3, [pc, #92]	; (8008dd0 <xTaskIncrementTick+0x168>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d76:	4915      	ldr	r1, [pc, #84]	; (8008dcc <xTaskIncrementTick+0x164>)
 8008d78:	4613      	mov	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4413      	add	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	440b      	add	r3, r1
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d907      	bls.n	8008d98 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	617b      	str	r3, [r7, #20]
 8008d8c:	e004      	b.n	8008d98 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008d8e:	4b11      	ldr	r3, [pc, #68]	; (8008dd4 <xTaskIncrementTick+0x16c>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3301      	adds	r3, #1
 8008d94:	4a0f      	ldr	r2, [pc, #60]	; (8008dd4 <xTaskIncrementTick+0x16c>)
 8008d96:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008d98:	4b0f      	ldr	r3, [pc, #60]	; (8008dd8 <xTaskIncrementTick+0x170>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d001      	beq.n	8008da4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8008da0:	2301      	movs	r3, #1
 8008da2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008da4:	697b      	ldr	r3, [r7, #20]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3718      	adds	r7, #24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	20000dcc 	.word	0x20000dcc
 8008db4:	20000da8 	.word	0x20000da8
 8008db8:	20000d5c 	.word	0x20000d5c
 8008dbc:	20000d60 	.word	0x20000d60
 8008dc0:	20000dbc 	.word	0x20000dbc
 8008dc4:	20000dc4 	.word	0x20000dc4
 8008dc8:	20000dac 	.word	0x20000dac
 8008dcc:	200008d4 	.word	0x200008d4
 8008dd0:	200008d0 	.word	0x200008d0
 8008dd4:	20000db4 	.word	0x20000db4
 8008dd8:	20000db8 	.word	0x20000db8

08008ddc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008de2:	4b28      	ldr	r3, [pc, #160]	; (8008e84 <vTaskSwitchContext+0xa8>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008dea:	4b27      	ldr	r3, [pc, #156]	; (8008e88 <vTaskSwitchContext+0xac>)
 8008dec:	2201      	movs	r2, #1
 8008dee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008df0:	e041      	b.n	8008e76 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008df2:	4b25      	ldr	r3, [pc, #148]	; (8008e88 <vTaskSwitchContext+0xac>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008df8:	4b24      	ldr	r3, [pc, #144]	; (8008e8c <vTaskSwitchContext+0xb0>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	60fb      	str	r3, [r7, #12]
 8008dfe:	e010      	b.n	8008e22 <vTaskSwitchContext+0x46>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10a      	bne.n	8008e1c <vTaskSwitchContext+0x40>
	__asm volatile
 8008e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0a:	f383 8811 	msr	BASEPRI, r3
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	607b      	str	r3, [r7, #4]
}
 8008e18:	bf00      	nop
 8008e1a:	e7fe      	b.n	8008e1a <vTaskSwitchContext+0x3e>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	60fb      	str	r3, [r7, #12]
 8008e22:	491b      	ldr	r1, [pc, #108]	; (8008e90 <vTaskSwitchContext+0xb4>)
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	4613      	mov	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4413      	add	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	440b      	add	r3, r1
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d0e4      	beq.n	8008e00 <vTaskSwitchContext+0x24>
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	4613      	mov	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4a13      	ldr	r2, [pc, #76]	; (8008e90 <vTaskSwitchContext+0xb4>)
 8008e42:	4413      	add	r3, r2
 8008e44:	60bb      	str	r3, [r7, #8]
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	605a      	str	r2, [r3, #4]
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	3308      	adds	r3, #8
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d104      	bne.n	8008e66 <vTaskSwitchContext+0x8a>
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	605a      	str	r2, [r3, #4]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	4a09      	ldr	r2, [pc, #36]	; (8008e94 <vTaskSwitchContext+0xb8>)
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	4a06      	ldr	r2, [pc, #24]	; (8008e8c <vTaskSwitchContext+0xb0>)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6013      	str	r3, [r2, #0]
}
 8008e76:	bf00      	nop
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20000dcc 	.word	0x20000dcc
 8008e88:	20000db8 	.word	0x20000db8
 8008e8c:	20000dac 	.word	0x20000dac
 8008e90:	200008d4 	.word	0x200008d4
 8008e94:	200008d0 	.word	0x200008d0

08008e98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10a      	bne.n	8008ebe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	60fb      	str	r3, [r7, #12]
}
 8008eba:	bf00      	nop
 8008ebc:	e7fe      	b.n	8008ebc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ebe:	4b07      	ldr	r3, [pc, #28]	; (8008edc <vTaskPlaceOnEventList+0x44>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3318      	adds	r3, #24
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f7fe fe8b 	bl	8007be2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ecc:	2101      	movs	r1, #1
 8008ece:	6838      	ldr	r0, [r7, #0]
 8008ed0:	f000 fa7c 	bl	80093cc <prvAddCurrentTaskToDelayedList>
}
 8008ed4:	bf00      	nop
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	200008d0 	.word	0x200008d0

08008ee0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10a      	bne.n	8008f08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	617b      	str	r3, [r7, #20]
}
 8008f04:	bf00      	nop
 8008f06:	e7fe      	b.n	8008f06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f08:	4b0a      	ldr	r3, [pc, #40]	; (8008f34 <vTaskPlaceOnEventListRestricted+0x54>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3318      	adds	r3, #24
 8008f0e:	4619      	mov	r1, r3
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f7fe fe42 	bl	8007b9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f22:	6879      	ldr	r1, [r7, #4]
 8008f24:	68b8      	ldr	r0, [r7, #8]
 8008f26:	f000 fa51 	bl	80093cc <prvAddCurrentTaskToDelayedList>
	}
 8008f2a:	bf00      	nop
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	200008d0 	.word	0x200008d0

08008f38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d10a      	bne.n	8008f64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	60fb      	str	r3, [r7, #12]
}
 8008f60:	bf00      	nop
 8008f62:	e7fe      	b.n	8008f62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	3318      	adds	r3, #24
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe fe73 	bl	8007c54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f6e:	4b1e      	ldr	r3, [pc, #120]	; (8008fe8 <xTaskRemoveFromEventList+0xb0>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d11d      	bne.n	8008fb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	3304      	adds	r3, #4
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe fe6a 	bl	8007c54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f84:	4b19      	ldr	r3, [pc, #100]	; (8008fec <xTaskRemoveFromEventList+0xb4>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d903      	bls.n	8008f94 <xTaskRemoveFromEventList+0x5c>
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f90:	4a16      	ldr	r2, [pc, #88]	; (8008fec <xTaskRemoveFromEventList+0xb4>)
 8008f92:	6013      	str	r3, [r2, #0]
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f98:	4613      	mov	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4413      	add	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4a13      	ldr	r2, [pc, #76]	; (8008ff0 <xTaskRemoveFromEventList+0xb8>)
 8008fa2:	441a      	add	r2, r3
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4610      	mov	r0, r2
 8008fac:	f7fe fdf5 	bl	8007b9a <vListInsertEnd>
 8008fb0:	e005      	b.n	8008fbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	3318      	adds	r3, #24
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	480e      	ldr	r0, [pc, #56]	; (8008ff4 <xTaskRemoveFromEventList+0xbc>)
 8008fba:	f7fe fdee 	bl	8007b9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc2:	4b0d      	ldr	r3, [pc, #52]	; (8008ff8 <xTaskRemoveFromEventList+0xc0>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d905      	bls.n	8008fd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008fd0:	4b0a      	ldr	r3, [pc, #40]	; (8008ffc <xTaskRemoveFromEventList+0xc4>)
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	e001      	b.n	8008fdc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008fdc:	697b      	ldr	r3, [r7, #20]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20000dcc 	.word	0x20000dcc
 8008fec:	20000dac 	.word	0x20000dac
 8008ff0:	200008d4 	.word	0x200008d4
 8008ff4:	20000d64 	.word	0x20000d64
 8008ff8:	200008d0 	.word	0x200008d0
 8008ffc:	20000db8 	.word	0x20000db8

08009000 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009008:	4b06      	ldr	r3, [pc, #24]	; (8009024 <vTaskInternalSetTimeOutState+0x24>)
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009010:	4b05      	ldr	r3, [pc, #20]	; (8009028 <vTaskInternalSetTimeOutState+0x28>)
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	605a      	str	r2, [r3, #4]
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr
 8009024:	20000dbc 	.word	0x20000dbc
 8009028:	20000da8 	.word	0x20000da8

0800902c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b088      	sub	sp, #32
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10a      	bne.n	8009052 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	613b      	str	r3, [r7, #16]
}
 800904e:	bf00      	nop
 8009050:	e7fe      	b.n	8009050 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10a      	bne.n	800906e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	60fb      	str	r3, [r7, #12]
}
 800906a:	bf00      	nop
 800906c:	e7fe      	b.n	800906c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800906e:	f000 fe79 	bl	8009d64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009072:	4b1d      	ldr	r3, [pc, #116]	; (80090e8 <xTaskCheckForTimeOut+0xbc>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	69ba      	ldr	r2, [r7, #24]
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800908a:	d102      	bne.n	8009092 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800908c:	2300      	movs	r3, #0
 800908e:	61fb      	str	r3, [r7, #28]
 8009090:	e023      	b.n	80090da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	4b15      	ldr	r3, [pc, #84]	; (80090ec <xTaskCheckForTimeOut+0xc0>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	429a      	cmp	r2, r3
 800909c:	d007      	beq.n	80090ae <xTaskCheckForTimeOut+0x82>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d302      	bcc.n	80090ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80090a8:	2301      	movs	r3, #1
 80090aa:	61fb      	str	r3, [r7, #28]
 80090ac:	e015      	b.n	80090da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d20b      	bcs.n	80090d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	1ad2      	subs	r2, r2, r3
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7ff ff9b 	bl	8009000 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80090ca:	2300      	movs	r3, #0
 80090cc:	61fb      	str	r3, [r7, #28]
 80090ce:	e004      	b.n	80090da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	2200      	movs	r2, #0
 80090d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80090d6:	2301      	movs	r3, #1
 80090d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090da:	f000 fe73 	bl	8009dc4 <vPortExitCritical>

	return xReturn;
 80090de:	69fb      	ldr	r3, [r7, #28]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3720      	adds	r7, #32
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	20000da8 	.word	0x20000da8
 80090ec:	20000dbc 	.word	0x20000dbc

080090f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80090f0:	b480      	push	{r7}
 80090f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80090f4:	4b03      	ldr	r3, [pc, #12]	; (8009104 <vTaskMissedYield+0x14>)
 80090f6:	2201      	movs	r2, #1
 80090f8:	601a      	str	r2, [r3, #0]
}
 80090fa:	bf00      	nop
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	20000db8 	.word	0x20000db8

08009108 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009110:	f000 f852 	bl	80091b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009114:	4b06      	ldr	r3, [pc, #24]	; (8009130 <prvIdleTask+0x28>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d9f9      	bls.n	8009110 <prvIdleTask+0x8>
			{
				taskYIELD();
 800911c:	4b05      	ldr	r3, [pc, #20]	; (8009134 <prvIdleTask+0x2c>)
 800911e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800912c:	e7f0      	b.n	8009110 <prvIdleTask+0x8>
 800912e:	bf00      	nop
 8009130:	200008d4 	.word	0x200008d4
 8009134:	e000ed04 	.word	0xe000ed04

08009138 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800913e:	2300      	movs	r3, #0
 8009140:	607b      	str	r3, [r7, #4]
 8009142:	e00c      	b.n	800915e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	4613      	mov	r3, r2
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	4413      	add	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4a12      	ldr	r2, [pc, #72]	; (8009198 <prvInitialiseTaskLists+0x60>)
 8009150:	4413      	add	r3, r2
 8009152:	4618      	mov	r0, r3
 8009154:	f7fe fcf4 	bl	8007b40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	3301      	adds	r3, #1
 800915c:	607b      	str	r3, [r7, #4]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2b37      	cmp	r3, #55	; 0x37
 8009162:	d9ef      	bls.n	8009144 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009164:	480d      	ldr	r0, [pc, #52]	; (800919c <prvInitialiseTaskLists+0x64>)
 8009166:	f7fe fceb 	bl	8007b40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800916a:	480d      	ldr	r0, [pc, #52]	; (80091a0 <prvInitialiseTaskLists+0x68>)
 800916c:	f7fe fce8 	bl	8007b40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009170:	480c      	ldr	r0, [pc, #48]	; (80091a4 <prvInitialiseTaskLists+0x6c>)
 8009172:	f7fe fce5 	bl	8007b40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009176:	480c      	ldr	r0, [pc, #48]	; (80091a8 <prvInitialiseTaskLists+0x70>)
 8009178:	f7fe fce2 	bl	8007b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800917c:	480b      	ldr	r0, [pc, #44]	; (80091ac <prvInitialiseTaskLists+0x74>)
 800917e:	f7fe fcdf 	bl	8007b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009182:	4b0b      	ldr	r3, [pc, #44]	; (80091b0 <prvInitialiseTaskLists+0x78>)
 8009184:	4a05      	ldr	r2, [pc, #20]	; (800919c <prvInitialiseTaskLists+0x64>)
 8009186:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009188:	4b0a      	ldr	r3, [pc, #40]	; (80091b4 <prvInitialiseTaskLists+0x7c>)
 800918a:	4a05      	ldr	r2, [pc, #20]	; (80091a0 <prvInitialiseTaskLists+0x68>)
 800918c:	601a      	str	r2, [r3, #0]
}
 800918e:	bf00      	nop
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	200008d4 	.word	0x200008d4
 800919c:	20000d34 	.word	0x20000d34
 80091a0:	20000d48 	.word	0x20000d48
 80091a4:	20000d64 	.word	0x20000d64
 80091a8:	20000d78 	.word	0x20000d78
 80091ac:	20000d90 	.word	0x20000d90
 80091b0:	20000d5c 	.word	0x20000d5c
 80091b4:	20000d60 	.word	0x20000d60

080091b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091be:	e019      	b.n	80091f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80091c0:	f000 fdd0 	bl	8009d64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c4:	4b10      	ldr	r3, [pc, #64]	; (8009208 <prvCheckTasksWaitingTermination+0x50>)
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	3304      	adds	r3, #4
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fe fd3f 	bl	8007c54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091d6:	4b0d      	ldr	r3, [pc, #52]	; (800920c <prvCheckTasksWaitingTermination+0x54>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3b01      	subs	r3, #1
 80091dc:	4a0b      	ldr	r2, [pc, #44]	; (800920c <prvCheckTasksWaitingTermination+0x54>)
 80091de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091e0:	4b0b      	ldr	r3, [pc, #44]	; (8009210 <prvCheckTasksWaitingTermination+0x58>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3b01      	subs	r3, #1
 80091e6:	4a0a      	ldr	r2, [pc, #40]	; (8009210 <prvCheckTasksWaitingTermination+0x58>)
 80091e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80091ea:	f000 fdeb 	bl	8009dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f810 	bl	8009214 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091f4:	4b06      	ldr	r3, [pc, #24]	; (8009210 <prvCheckTasksWaitingTermination+0x58>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e1      	bne.n	80091c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091fc:	bf00      	nop
 80091fe:	bf00      	nop
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	20000d78 	.word	0x20000d78
 800920c:	20000da4 	.word	0x20000da4
 8009210:	20000d8c 	.word	0x20000d8c

08009214 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009222:	2b00      	cmp	r3, #0
 8009224:	d108      	bne.n	8009238 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922a:	4618      	mov	r0, r3
 800922c:	f000 ff80 	bl	800a130 <vPortFree>
				vPortFree( pxTCB );
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 ff7d 	bl	800a130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009236:	e018      	b.n	800926a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800923e:	2b01      	cmp	r3, #1
 8009240:	d103      	bne.n	800924a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 ff74 	bl	800a130 <vPortFree>
	}
 8009248:	e00f      	b.n	800926a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009250:	2b02      	cmp	r3, #2
 8009252:	d00a      	beq.n	800926a <prvDeleteTCB+0x56>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	60fb      	str	r3, [r7, #12]
}
 8009266:	bf00      	nop
 8009268:	e7fe      	b.n	8009268 <prvDeleteTCB+0x54>
	}
 800926a:	bf00      	nop
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
	...

08009274 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800927a:	4b0c      	ldr	r3, [pc, #48]	; (80092ac <prvResetNextTaskUnblockTime+0x38>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d104      	bne.n	800928e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009284:	4b0a      	ldr	r3, [pc, #40]	; (80092b0 <prvResetNextTaskUnblockTime+0x3c>)
 8009286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800928a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800928c:	e008      	b.n	80092a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800928e:	4b07      	ldr	r3, [pc, #28]	; (80092ac <prvResetNextTaskUnblockTime+0x38>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	4a04      	ldr	r2, [pc, #16]	; (80092b0 <prvResetNextTaskUnblockTime+0x3c>)
 800929e:	6013      	str	r3, [r2, #0]
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	20000d5c 	.word	0x20000d5c
 80092b0:	20000dc4 	.word	0x20000dc4

080092b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80092ba:	4b0b      	ldr	r3, [pc, #44]	; (80092e8 <xTaskGetSchedulerState+0x34>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d102      	bne.n	80092c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092c2:	2301      	movs	r3, #1
 80092c4:	607b      	str	r3, [r7, #4]
 80092c6:	e008      	b.n	80092da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092c8:	4b08      	ldr	r3, [pc, #32]	; (80092ec <xTaskGetSchedulerState+0x38>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d102      	bne.n	80092d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092d0:	2302      	movs	r3, #2
 80092d2:	607b      	str	r3, [r7, #4]
 80092d4:	e001      	b.n	80092da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80092d6:	2300      	movs	r3, #0
 80092d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092da:	687b      	ldr	r3, [r7, #4]
	}
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	20000db0 	.word	0x20000db0
 80092ec:	20000dcc 	.word	0x20000dcc

080092f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80092fc:	2300      	movs	r3, #0
 80092fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d056      	beq.n	80093b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009306:	4b2e      	ldr	r3, [pc, #184]	; (80093c0 <xTaskPriorityDisinherit+0xd0>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	429a      	cmp	r2, r3
 800930e:	d00a      	beq.n	8009326 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	60fb      	str	r3, [r7, #12]
}
 8009322:	bf00      	nop
 8009324:	e7fe      	b.n	8009324 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10a      	bne.n	8009344 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	60bb      	str	r3, [r7, #8]
}
 8009340:	bf00      	nop
 8009342:	e7fe      	b.n	8009342 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009348:	1e5a      	subs	r2, r3, #1
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009356:	429a      	cmp	r2, r3
 8009358:	d02c      	beq.n	80093b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800935e:	2b00      	cmp	r3, #0
 8009360:	d128      	bne.n	80093b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	3304      	adds	r3, #4
 8009366:	4618      	mov	r0, r3
 8009368:	f7fe fc74 	bl	8007c54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009378:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009384:	4b0f      	ldr	r3, [pc, #60]	; (80093c4 <xTaskPriorityDisinherit+0xd4>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	429a      	cmp	r2, r3
 800938a:	d903      	bls.n	8009394 <xTaskPriorityDisinherit+0xa4>
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009390:	4a0c      	ldr	r2, [pc, #48]	; (80093c4 <xTaskPriorityDisinherit+0xd4>)
 8009392:	6013      	str	r3, [r2, #0]
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009398:	4613      	mov	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4413      	add	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4a09      	ldr	r2, [pc, #36]	; (80093c8 <xTaskPriorityDisinherit+0xd8>)
 80093a2:	441a      	add	r2, r3
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	3304      	adds	r3, #4
 80093a8:	4619      	mov	r1, r3
 80093aa:	4610      	mov	r0, r2
 80093ac:	f7fe fbf5 	bl	8007b9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80093b0:	2301      	movs	r3, #1
 80093b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093b4:	697b      	ldr	r3, [r7, #20]
	}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	200008d0 	.word	0x200008d0
 80093c4:	20000dac 	.word	0x20000dac
 80093c8:	200008d4 	.word	0x200008d4

080093cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093d6:	4b21      	ldr	r3, [pc, #132]	; (800945c <prvAddCurrentTaskToDelayedList+0x90>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093dc:	4b20      	ldr	r3, [pc, #128]	; (8009460 <prvAddCurrentTaskToDelayedList+0x94>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3304      	adds	r3, #4
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe fc36 	bl	8007c54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093ee:	d10a      	bne.n	8009406 <prvAddCurrentTaskToDelayedList+0x3a>
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d007      	beq.n	8009406 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093f6:	4b1a      	ldr	r3, [pc, #104]	; (8009460 <prvAddCurrentTaskToDelayedList+0x94>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3304      	adds	r3, #4
 80093fc:	4619      	mov	r1, r3
 80093fe:	4819      	ldr	r0, [pc, #100]	; (8009464 <prvAddCurrentTaskToDelayedList+0x98>)
 8009400:	f7fe fbcb 	bl	8007b9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009404:	e026      	b.n	8009454 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4413      	add	r3, r2
 800940c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800940e:	4b14      	ldr	r3, [pc, #80]	; (8009460 <prvAddCurrentTaskToDelayedList+0x94>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	429a      	cmp	r2, r3
 800941c:	d209      	bcs.n	8009432 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800941e:	4b12      	ldr	r3, [pc, #72]	; (8009468 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	4b0f      	ldr	r3, [pc, #60]	; (8009460 <prvAddCurrentTaskToDelayedList+0x94>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	3304      	adds	r3, #4
 8009428:	4619      	mov	r1, r3
 800942a:	4610      	mov	r0, r2
 800942c:	f7fe fbd9 	bl	8007be2 <vListInsert>
}
 8009430:	e010      	b.n	8009454 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009432:	4b0e      	ldr	r3, [pc, #56]	; (800946c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	4b0a      	ldr	r3, [pc, #40]	; (8009460 <prvAddCurrentTaskToDelayedList+0x94>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3304      	adds	r3, #4
 800943c:	4619      	mov	r1, r3
 800943e:	4610      	mov	r0, r2
 8009440:	f7fe fbcf 	bl	8007be2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009444:	4b0a      	ldr	r3, [pc, #40]	; (8009470 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	429a      	cmp	r2, r3
 800944c:	d202      	bcs.n	8009454 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800944e:	4a08      	ldr	r2, [pc, #32]	; (8009470 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	6013      	str	r3, [r2, #0]
}
 8009454:	bf00      	nop
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	20000da8 	.word	0x20000da8
 8009460:	200008d0 	.word	0x200008d0
 8009464:	20000d90 	.word	0x20000d90
 8009468:	20000d60 	.word	0x20000d60
 800946c:	20000d5c 	.word	0x20000d5c
 8009470:	20000dc4 	.word	0x20000dc4

08009474 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b08a      	sub	sp, #40	; 0x28
 8009478:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800947a:	2300      	movs	r3, #0
 800947c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800947e:	f000 fb07 	bl	8009a90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009482:	4b1c      	ldr	r3, [pc, #112]	; (80094f4 <xTimerCreateTimerTask+0x80>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d021      	beq.n	80094ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800948a:	2300      	movs	r3, #0
 800948c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800948e:	2300      	movs	r3, #0
 8009490:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009492:	1d3a      	adds	r2, r7, #4
 8009494:	f107 0108 	add.w	r1, r7, #8
 8009498:	f107 030c 	add.w	r3, r7, #12
 800949c:	4618      	mov	r0, r3
 800949e:	f7fe fb35 	bl	8007b0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80094a2:	6879      	ldr	r1, [r7, #4]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	9202      	str	r2, [sp, #8]
 80094aa:	9301      	str	r3, [sp, #4]
 80094ac:	2302      	movs	r3, #2
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	2300      	movs	r3, #0
 80094b2:	460a      	mov	r2, r1
 80094b4:	4910      	ldr	r1, [pc, #64]	; (80094f8 <xTimerCreateTimerTask+0x84>)
 80094b6:	4811      	ldr	r0, [pc, #68]	; (80094fc <xTimerCreateTimerTask+0x88>)
 80094b8:	f7ff f8de 	bl	8008678 <xTaskCreateStatic>
 80094bc:	4603      	mov	r3, r0
 80094be:	4a10      	ldr	r2, [pc, #64]	; (8009500 <xTimerCreateTimerTask+0x8c>)
 80094c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80094c2:	4b0f      	ldr	r3, [pc, #60]	; (8009500 <xTimerCreateTimerTask+0x8c>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80094ca:	2301      	movs	r3, #1
 80094cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10a      	bne.n	80094ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80094d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d8:	f383 8811 	msr	BASEPRI, r3
 80094dc:	f3bf 8f6f 	isb	sy
 80094e0:	f3bf 8f4f 	dsb	sy
 80094e4:	613b      	str	r3, [r7, #16]
}
 80094e6:	bf00      	nop
 80094e8:	e7fe      	b.n	80094e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80094ea:	697b      	ldr	r3, [r7, #20]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3718      	adds	r7, #24
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	20000e00 	.word	0x20000e00
 80094f8:	0800ecd8 	.word	0x0800ecd8
 80094fc:	08009639 	.word	0x08009639
 8009500:	20000e04 	.word	0x20000e04

08009504 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b08a      	sub	sp, #40	; 0x28
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
 8009510:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009512:	2300      	movs	r3, #0
 8009514:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10a      	bne.n	8009532 <xTimerGenericCommand+0x2e>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	623b      	str	r3, [r7, #32]
}
 800952e:	bf00      	nop
 8009530:	e7fe      	b.n	8009530 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009532:	4b1a      	ldr	r3, [pc, #104]	; (800959c <xTimerGenericCommand+0x98>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d02a      	beq.n	8009590 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	2b05      	cmp	r3, #5
 800954a:	dc18      	bgt.n	800957e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800954c:	f7ff feb2 	bl	80092b4 <xTaskGetSchedulerState>
 8009550:	4603      	mov	r3, r0
 8009552:	2b02      	cmp	r3, #2
 8009554:	d109      	bne.n	800956a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009556:	4b11      	ldr	r3, [pc, #68]	; (800959c <xTimerGenericCommand+0x98>)
 8009558:	6818      	ldr	r0, [r3, #0]
 800955a:	f107 0110 	add.w	r1, r7, #16
 800955e:	2300      	movs	r3, #0
 8009560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009562:	f7fe fca5 	bl	8007eb0 <xQueueGenericSend>
 8009566:	6278      	str	r0, [r7, #36]	; 0x24
 8009568:	e012      	b.n	8009590 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800956a:	4b0c      	ldr	r3, [pc, #48]	; (800959c <xTimerGenericCommand+0x98>)
 800956c:	6818      	ldr	r0, [r3, #0]
 800956e:	f107 0110 	add.w	r1, r7, #16
 8009572:	2300      	movs	r3, #0
 8009574:	2200      	movs	r2, #0
 8009576:	f7fe fc9b 	bl	8007eb0 <xQueueGenericSend>
 800957a:	6278      	str	r0, [r7, #36]	; 0x24
 800957c:	e008      	b.n	8009590 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800957e:	4b07      	ldr	r3, [pc, #28]	; (800959c <xTimerGenericCommand+0x98>)
 8009580:	6818      	ldr	r0, [r3, #0]
 8009582:	f107 0110 	add.w	r1, r7, #16
 8009586:	2300      	movs	r3, #0
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	f7fe fd8f 	bl	80080ac <xQueueGenericSendFromISR>
 800958e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009592:	4618      	mov	r0, r3
 8009594:	3728      	adds	r7, #40	; 0x28
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	20000e00 	.word	0x20000e00

080095a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b088      	sub	sp, #32
 80095a4:	af02      	add	r7, sp, #8
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095aa:	4b22      	ldr	r3, [pc, #136]	; (8009634 <prvProcessExpiredTimer+0x94>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	3304      	adds	r3, #4
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fe fb4b 	bl	8007c54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095c4:	f003 0304 	and.w	r3, r3, #4
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d022      	beq.n	8009612 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	699a      	ldr	r2, [r3, #24]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	18d1      	adds	r1, r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	6978      	ldr	r0, [r7, #20]
 80095da:	f000 f8d1 	bl	8009780 <prvInsertTimerInActiveList>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d01f      	beq.n	8009624 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095e4:	2300      	movs	r3, #0
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	2300      	movs	r3, #0
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	2100      	movs	r1, #0
 80095ee:	6978      	ldr	r0, [r7, #20]
 80095f0:	f7ff ff88 	bl	8009504 <xTimerGenericCommand>
 80095f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d113      	bne.n	8009624 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	60fb      	str	r3, [r7, #12]
}
 800960e:	bf00      	nop
 8009610:	e7fe      	b.n	8009610 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009618:	f023 0301 	bic.w	r3, r3, #1
 800961c:	b2da      	uxtb	r2, r3
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	6a1b      	ldr	r3, [r3, #32]
 8009628:	6978      	ldr	r0, [r7, #20]
 800962a:	4798      	blx	r3
}
 800962c:	bf00      	nop
 800962e:	3718      	adds	r7, #24
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	20000df8 	.word	0x20000df8

08009638 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009640:	f107 0308 	add.w	r3, r7, #8
 8009644:	4618      	mov	r0, r3
 8009646:	f000 f857 	bl	80096f8 <prvGetNextExpireTime>
 800964a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	4619      	mov	r1, r3
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f000 f803 	bl	800965c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009656:	f000 f8d5 	bl	8009804 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800965a:	e7f1      	b.n	8009640 <prvTimerTask+0x8>

0800965c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009666:	f7ff fa43 	bl	8008af0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800966a:	f107 0308 	add.w	r3, r7, #8
 800966e:	4618      	mov	r0, r3
 8009670:	f000 f866 	bl	8009740 <prvSampleTimeNow>
 8009674:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d130      	bne.n	80096de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10a      	bne.n	8009698 <prvProcessTimerOrBlockTask+0x3c>
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	429a      	cmp	r2, r3
 8009688:	d806      	bhi.n	8009698 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800968a:	f7ff fa3f 	bl	8008b0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800968e:	68f9      	ldr	r1, [r7, #12]
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7ff ff85 	bl	80095a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009696:	e024      	b.n	80096e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d008      	beq.n	80096b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800969e:	4b13      	ldr	r3, [pc, #76]	; (80096ec <prvProcessTimerOrBlockTask+0x90>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <prvProcessTimerOrBlockTask+0x50>
 80096a8:	2301      	movs	r3, #1
 80096aa:	e000      	b.n	80096ae <prvProcessTimerOrBlockTask+0x52>
 80096ac:	2300      	movs	r3, #0
 80096ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096b0:	4b0f      	ldr	r3, [pc, #60]	; (80096f0 <prvProcessTimerOrBlockTask+0x94>)
 80096b2:	6818      	ldr	r0, [r3, #0]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	683a      	ldr	r2, [r7, #0]
 80096bc:	4619      	mov	r1, r3
 80096be:	f7fe ffa7 	bl	8008610 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80096c2:	f7ff fa23 	bl	8008b0c <xTaskResumeAll>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10a      	bne.n	80096e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80096cc:	4b09      	ldr	r3, [pc, #36]	; (80096f4 <prvProcessTimerOrBlockTask+0x98>)
 80096ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d2:	601a      	str	r2, [r3, #0]
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	f3bf 8f6f 	isb	sy
}
 80096dc:	e001      	b.n	80096e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80096de:	f7ff fa15 	bl	8008b0c <xTaskResumeAll>
}
 80096e2:	bf00      	nop
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	20000dfc 	.word	0x20000dfc
 80096f0:	20000e00 	.word	0x20000e00
 80096f4:	e000ed04 	.word	0xe000ed04

080096f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009700:	4b0e      	ldr	r3, [pc, #56]	; (800973c <prvGetNextExpireTime+0x44>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <prvGetNextExpireTime+0x16>
 800970a:	2201      	movs	r2, #1
 800970c:	e000      	b.n	8009710 <prvGetNextExpireTime+0x18>
 800970e:	2200      	movs	r2, #0
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d105      	bne.n	8009728 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800971c:	4b07      	ldr	r3, [pc, #28]	; (800973c <prvGetNextExpireTime+0x44>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	60fb      	str	r3, [r7, #12]
 8009726:	e001      	b.n	800972c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009728:	2300      	movs	r3, #0
 800972a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800972c:	68fb      	ldr	r3, [r7, #12]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	20000df8 	.word	0x20000df8

08009740 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009748:	f7ff fa7e 	bl	8008c48 <xTaskGetTickCount>
 800974c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800974e:	4b0b      	ldr	r3, [pc, #44]	; (800977c <prvSampleTimeNow+0x3c>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	429a      	cmp	r2, r3
 8009756:	d205      	bcs.n	8009764 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009758:	f000 f936 	bl	80099c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	601a      	str	r2, [r3, #0]
 8009762:	e002      	b.n	800976a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800976a:	4a04      	ldr	r2, [pc, #16]	; (800977c <prvSampleTimeNow+0x3c>)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009770:	68fb      	ldr	r3, [r7, #12]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	20000e08 	.word	0x20000e08

08009780 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
 800978c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800978e:	2300      	movs	r3, #0
 8009790:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d812      	bhi.n	80097cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	1ad2      	subs	r2, r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d302      	bcc.n	80097ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80097b4:	2301      	movs	r3, #1
 80097b6:	617b      	str	r3, [r7, #20]
 80097b8:	e01b      	b.n	80097f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80097ba:	4b10      	ldr	r3, [pc, #64]	; (80097fc <prvInsertTimerInActiveList+0x7c>)
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	3304      	adds	r3, #4
 80097c2:	4619      	mov	r1, r3
 80097c4:	4610      	mov	r0, r2
 80097c6:	f7fe fa0c 	bl	8007be2 <vListInsert>
 80097ca:	e012      	b.n	80097f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d206      	bcs.n	80097e2 <prvInsertTimerInActiveList+0x62>
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d302      	bcc.n	80097e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80097dc:	2301      	movs	r3, #1
 80097de:	617b      	str	r3, [r7, #20]
 80097e0:	e007      	b.n	80097f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097e2:	4b07      	ldr	r3, [pc, #28]	; (8009800 <prvInsertTimerInActiveList+0x80>)
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	3304      	adds	r3, #4
 80097ea:	4619      	mov	r1, r3
 80097ec:	4610      	mov	r0, r2
 80097ee:	f7fe f9f8 	bl	8007be2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80097f2:	697b      	ldr	r3, [r7, #20]
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3718      	adds	r7, #24
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	20000dfc 	.word	0x20000dfc
 8009800:	20000df8 	.word	0x20000df8

08009804 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b08e      	sub	sp, #56	; 0x38
 8009808:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800980a:	e0ca      	b.n	80099a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	da18      	bge.n	8009844 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009812:	1d3b      	adds	r3, r7, #4
 8009814:	3304      	adds	r3, #4
 8009816:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981a:	2b00      	cmp	r3, #0
 800981c:	d10a      	bne.n	8009834 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800981e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	61fb      	str	r3, [r7, #28]
}
 8009830:	bf00      	nop
 8009832:	e7fe      	b.n	8009832 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800983a:	6850      	ldr	r0, [r2, #4]
 800983c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800983e:	6892      	ldr	r2, [r2, #8]
 8009840:	4611      	mov	r1, r2
 8009842:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	f2c0 80aa 	blt.w	80099a0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d004      	beq.n	8009862 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	3304      	adds	r3, #4
 800985c:	4618      	mov	r0, r3
 800985e:	f7fe f9f9 	bl	8007c54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009862:	463b      	mov	r3, r7
 8009864:	4618      	mov	r0, r3
 8009866:	f7ff ff6b 	bl	8009740 <prvSampleTimeNow>
 800986a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b09      	cmp	r3, #9
 8009870:	f200 8097 	bhi.w	80099a2 <prvProcessReceivedCommands+0x19e>
 8009874:	a201      	add	r2, pc, #4	; (adr r2, 800987c <prvProcessReceivedCommands+0x78>)
 8009876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987a:	bf00      	nop
 800987c:	080098a5 	.word	0x080098a5
 8009880:	080098a5 	.word	0x080098a5
 8009884:	080098a5 	.word	0x080098a5
 8009888:	08009919 	.word	0x08009919
 800988c:	0800992d 	.word	0x0800992d
 8009890:	08009977 	.word	0x08009977
 8009894:	080098a5 	.word	0x080098a5
 8009898:	080098a5 	.word	0x080098a5
 800989c:	08009919 	.word	0x08009919
 80098a0:	0800992d 	.word	0x0800992d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098aa:	f043 0301 	orr.w	r3, r3, #1
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	18d1      	adds	r1, r2, r3
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098c4:	f7ff ff5c 	bl	8009780 <prvInsertTimerInActiveList>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d069      	beq.n	80099a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	6a1b      	ldr	r3, [r3, #32]
 80098d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098dc:	f003 0304 	and.w	r3, r3, #4
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d05e      	beq.n	80099a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	441a      	add	r2, r3
 80098ec:	2300      	movs	r3, #0
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	2300      	movs	r3, #0
 80098f2:	2100      	movs	r1, #0
 80098f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098f6:	f7ff fe05 	bl	8009504 <xTimerGenericCommand>
 80098fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d14f      	bne.n	80099a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	61bb      	str	r3, [r7, #24]
}
 8009914:	bf00      	nop
 8009916:	e7fe      	b.n	8009916 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800991e:	f023 0301 	bic.w	r3, r3, #1
 8009922:	b2da      	uxtb	r2, r3
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800992a:	e03a      	b.n	80099a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009932:	f043 0301 	orr.w	r3, r3, #1
 8009936:	b2da      	uxtb	r2, r3
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009942:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10a      	bne.n	8009962 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800994c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	617b      	str	r3, [r7, #20]
}
 800995e:	bf00      	nop
 8009960:	e7fe      	b.n	8009960 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009964:	699a      	ldr	r2, [r3, #24]
 8009966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009968:	18d1      	adds	r1, r2, r3
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800996e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009970:	f7ff ff06 	bl	8009780 <prvInsertTimerInActiveList>
					break;
 8009974:	e015      	b.n	80099a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800997c:	f003 0302 	and.w	r3, r3, #2
 8009980:	2b00      	cmp	r3, #0
 8009982:	d103      	bne.n	800998c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009986:	f000 fbd3 	bl	800a130 <vPortFree>
 800998a:	e00a      	b.n	80099a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009992:	f023 0301 	bic.w	r3, r3, #1
 8009996:	b2da      	uxtb	r2, r3
 8009998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800999e:	e000      	b.n	80099a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80099a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099a2:	4b08      	ldr	r3, [pc, #32]	; (80099c4 <prvProcessReceivedCommands+0x1c0>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	1d39      	adds	r1, r7, #4
 80099a8:	2200      	movs	r2, #0
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe fc16 	bl	80081dc <xQueueReceive>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f47f af2a 	bne.w	800980c <prvProcessReceivedCommands+0x8>
	}
}
 80099b8:	bf00      	nop
 80099ba:	bf00      	nop
 80099bc:	3730      	adds	r7, #48	; 0x30
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	20000e00 	.word	0x20000e00

080099c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b088      	sub	sp, #32
 80099cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099ce:	e048      	b.n	8009a62 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099d0:	4b2d      	ldr	r3, [pc, #180]	; (8009a88 <prvSwitchTimerLists+0xc0>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099da:	4b2b      	ldr	r3, [pc, #172]	; (8009a88 <prvSwitchTimerLists+0xc0>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	3304      	adds	r3, #4
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7fe f933 	bl	8007c54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099fc:	f003 0304 	and.w	r3, r3, #4
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d02e      	beq.n	8009a62 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d90e      	bls.n	8009a34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a22:	4b19      	ldr	r3, [pc, #100]	; (8009a88 <prvSwitchTimerLists+0xc0>)
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	3304      	adds	r3, #4
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	4610      	mov	r0, r2
 8009a2e:	f7fe f8d8 	bl	8007be2 <vListInsert>
 8009a32:	e016      	b.n	8009a62 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a34:	2300      	movs	r3, #0
 8009a36:	9300      	str	r3, [sp, #0]
 8009a38:	2300      	movs	r3, #0
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f7ff fd60 	bl	8009504 <xTimerGenericCommand>
 8009a44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10a      	bne.n	8009a62 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a50:	f383 8811 	msr	BASEPRI, r3
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	f3bf 8f4f 	dsb	sy
 8009a5c:	603b      	str	r3, [r7, #0]
}
 8009a5e:	bf00      	nop
 8009a60:	e7fe      	b.n	8009a60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a62:	4b09      	ldr	r3, [pc, #36]	; (8009a88 <prvSwitchTimerLists+0xc0>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1b1      	bne.n	80099d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009a6c:	4b06      	ldr	r3, [pc, #24]	; (8009a88 <prvSwitchTimerLists+0xc0>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a72:	4b06      	ldr	r3, [pc, #24]	; (8009a8c <prvSwitchTimerLists+0xc4>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a04      	ldr	r2, [pc, #16]	; (8009a88 <prvSwitchTimerLists+0xc0>)
 8009a78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a7a:	4a04      	ldr	r2, [pc, #16]	; (8009a8c <prvSwitchTimerLists+0xc4>)
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	6013      	str	r3, [r2, #0]
}
 8009a80:	bf00      	nop
 8009a82:	3718      	adds	r7, #24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	20000df8 	.word	0x20000df8
 8009a8c:	20000dfc 	.word	0x20000dfc

08009a90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a96:	f000 f965 	bl	8009d64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a9a:	4b15      	ldr	r3, [pc, #84]	; (8009af0 <prvCheckForValidListAndQueue+0x60>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d120      	bne.n	8009ae4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009aa2:	4814      	ldr	r0, [pc, #80]	; (8009af4 <prvCheckForValidListAndQueue+0x64>)
 8009aa4:	f7fe f84c 	bl	8007b40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009aa8:	4813      	ldr	r0, [pc, #76]	; (8009af8 <prvCheckForValidListAndQueue+0x68>)
 8009aaa:	f7fe f849 	bl	8007b40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009aae:	4b13      	ldr	r3, [pc, #76]	; (8009afc <prvCheckForValidListAndQueue+0x6c>)
 8009ab0:	4a10      	ldr	r2, [pc, #64]	; (8009af4 <prvCheckForValidListAndQueue+0x64>)
 8009ab2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ab4:	4b12      	ldr	r3, [pc, #72]	; (8009b00 <prvCheckForValidListAndQueue+0x70>)
 8009ab6:	4a10      	ldr	r2, [pc, #64]	; (8009af8 <prvCheckForValidListAndQueue+0x68>)
 8009ab8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009aba:	2300      	movs	r3, #0
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	4b11      	ldr	r3, [pc, #68]	; (8009b04 <prvCheckForValidListAndQueue+0x74>)
 8009ac0:	4a11      	ldr	r2, [pc, #68]	; (8009b08 <prvCheckForValidListAndQueue+0x78>)
 8009ac2:	2110      	movs	r1, #16
 8009ac4:	200a      	movs	r0, #10
 8009ac6:	f7fe f957 	bl	8007d78 <xQueueGenericCreateStatic>
 8009aca:	4603      	mov	r3, r0
 8009acc:	4a08      	ldr	r2, [pc, #32]	; (8009af0 <prvCheckForValidListAndQueue+0x60>)
 8009ace:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ad0:	4b07      	ldr	r3, [pc, #28]	; (8009af0 <prvCheckForValidListAndQueue+0x60>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d005      	beq.n	8009ae4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ad8:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <prvCheckForValidListAndQueue+0x60>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	490b      	ldr	r1, [pc, #44]	; (8009b0c <prvCheckForValidListAndQueue+0x7c>)
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fe fd6c 	bl	80085bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ae4:	f000 f96e 	bl	8009dc4 <vPortExitCritical>
}
 8009ae8:	bf00      	nop
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20000e00 	.word	0x20000e00
 8009af4:	20000dd0 	.word	0x20000dd0
 8009af8:	20000de4 	.word	0x20000de4
 8009afc:	20000df8 	.word	0x20000df8
 8009b00:	20000dfc 	.word	0x20000dfc
 8009b04:	20000eac 	.word	0x20000eac
 8009b08:	20000e0c 	.word	0x20000e0c
 8009b0c:	0800ece0 	.word	0x0800ece0

08009b10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	3b04      	subs	r3, #4
 8009b20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	3b04      	subs	r3, #4
 8009b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	f023 0201 	bic.w	r2, r3, #1
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3b04      	subs	r3, #4
 8009b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b40:	4a0c      	ldr	r2, [pc, #48]	; (8009b74 <pxPortInitialiseStack+0x64>)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3b14      	subs	r3, #20
 8009b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	3b04      	subs	r3, #4
 8009b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f06f 0202 	mvn.w	r2, #2
 8009b5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	3b20      	subs	r3, #32
 8009b64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b66:	68fb      	ldr	r3, [r7, #12]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3714      	adds	r7, #20
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr
 8009b74:	08009b79 	.word	0x08009b79

08009b78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b82:	4b12      	ldr	r3, [pc, #72]	; (8009bcc <prvTaskExitError+0x54>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b8a:	d00a      	beq.n	8009ba2 <prvTaskExitError+0x2a>
	__asm volatile
 8009b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	60fb      	str	r3, [r7, #12]
}
 8009b9e:	bf00      	nop
 8009ba0:	e7fe      	b.n	8009ba0 <prvTaskExitError+0x28>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	60bb      	str	r3, [r7, #8]
}
 8009bb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009bb6:	bf00      	nop
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d0fc      	beq.n	8009bb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009bbe:	bf00      	nop
 8009bc0:	bf00      	nop
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	20000018 	.word	0x20000018

08009bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009bd0:	4b07      	ldr	r3, [pc, #28]	; (8009bf0 <pxCurrentTCBConst2>)
 8009bd2:	6819      	ldr	r1, [r3, #0]
 8009bd4:	6808      	ldr	r0, [r1, #0]
 8009bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bda:	f380 8809 	msr	PSP, r0
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f04f 0000 	mov.w	r0, #0
 8009be6:	f380 8811 	msr	BASEPRI, r0
 8009bea:	4770      	bx	lr
 8009bec:	f3af 8000 	nop.w

08009bf0 <pxCurrentTCBConst2>:
 8009bf0:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009bf4:	bf00      	nop
 8009bf6:	bf00      	nop

08009bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009bf8:	4808      	ldr	r0, [pc, #32]	; (8009c1c <prvPortStartFirstTask+0x24>)
 8009bfa:	6800      	ldr	r0, [r0, #0]
 8009bfc:	6800      	ldr	r0, [r0, #0]
 8009bfe:	f380 8808 	msr	MSP, r0
 8009c02:	f04f 0000 	mov.w	r0, #0
 8009c06:	f380 8814 	msr	CONTROL, r0
 8009c0a:	b662      	cpsie	i
 8009c0c:	b661      	cpsie	f
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	df00      	svc	0
 8009c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c1a:	bf00      	nop
 8009c1c:	e000ed08 	.word	0xe000ed08

08009c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c26:	4b46      	ldr	r3, [pc, #280]	; (8009d40 <xPortStartScheduler+0x120>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a46      	ldr	r2, [pc, #280]	; (8009d44 <xPortStartScheduler+0x124>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d10a      	bne.n	8009c46 <xPortStartScheduler+0x26>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	613b      	str	r3, [r7, #16]
}
 8009c42:	bf00      	nop
 8009c44:	e7fe      	b.n	8009c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c46:	4b3e      	ldr	r3, [pc, #248]	; (8009d40 <xPortStartScheduler+0x120>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a3f      	ldr	r2, [pc, #252]	; (8009d48 <xPortStartScheduler+0x128>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d10a      	bne.n	8009c66 <xPortStartScheduler+0x46>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	60fb      	str	r3, [r7, #12]
}
 8009c62:	bf00      	nop
 8009c64:	e7fe      	b.n	8009c64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c66:	4b39      	ldr	r3, [pc, #228]	; (8009d4c <xPortStartScheduler+0x12c>)
 8009c68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	22ff      	movs	r2, #255	; 0xff
 8009c76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c80:	78fb      	ldrb	r3, [r7, #3]
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c88:	b2da      	uxtb	r2, r3
 8009c8a:	4b31      	ldr	r3, [pc, #196]	; (8009d50 <xPortStartScheduler+0x130>)
 8009c8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c8e:	4b31      	ldr	r3, [pc, #196]	; (8009d54 <xPortStartScheduler+0x134>)
 8009c90:	2207      	movs	r2, #7
 8009c92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c94:	e009      	b.n	8009caa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009c96:	4b2f      	ldr	r3, [pc, #188]	; (8009d54 <xPortStartScheduler+0x134>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	4a2d      	ldr	r2, [pc, #180]	; (8009d54 <xPortStartScheduler+0x134>)
 8009c9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ca0:	78fb      	ldrb	r3, [r7, #3]
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	005b      	lsls	r3, r3, #1
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009caa:	78fb      	ldrb	r3, [r7, #3]
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb2:	2b80      	cmp	r3, #128	; 0x80
 8009cb4:	d0ef      	beq.n	8009c96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009cb6:	4b27      	ldr	r3, [pc, #156]	; (8009d54 <xPortStartScheduler+0x134>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f1c3 0307 	rsb	r3, r3, #7
 8009cbe:	2b04      	cmp	r3, #4
 8009cc0:	d00a      	beq.n	8009cd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	60bb      	str	r3, [r7, #8]
}
 8009cd4:	bf00      	nop
 8009cd6:	e7fe      	b.n	8009cd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009cd8:	4b1e      	ldr	r3, [pc, #120]	; (8009d54 <xPortStartScheduler+0x134>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	021b      	lsls	r3, r3, #8
 8009cde:	4a1d      	ldr	r2, [pc, #116]	; (8009d54 <xPortStartScheduler+0x134>)
 8009ce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ce2:	4b1c      	ldr	r3, [pc, #112]	; (8009d54 <xPortStartScheduler+0x134>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cea:	4a1a      	ldr	r2, [pc, #104]	; (8009d54 <xPortStartScheduler+0x134>)
 8009cec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	b2da      	uxtb	r2, r3
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009cf6:	4b18      	ldr	r3, [pc, #96]	; (8009d58 <xPortStartScheduler+0x138>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a17      	ldr	r2, [pc, #92]	; (8009d58 <xPortStartScheduler+0x138>)
 8009cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d02:	4b15      	ldr	r3, [pc, #84]	; (8009d58 <xPortStartScheduler+0x138>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a14      	ldr	r2, [pc, #80]	; (8009d58 <xPortStartScheduler+0x138>)
 8009d08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d0e:	f000 f8dd 	bl	8009ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d12:	4b12      	ldr	r3, [pc, #72]	; (8009d5c <xPortStartScheduler+0x13c>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d18:	f000 f8fc 	bl	8009f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d1c:	4b10      	ldr	r3, [pc, #64]	; (8009d60 <xPortStartScheduler+0x140>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a0f      	ldr	r2, [pc, #60]	; (8009d60 <xPortStartScheduler+0x140>)
 8009d22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009d26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d28:	f7ff ff66 	bl	8009bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d2c:	f7ff f856 	bl	8008ddc <vTaskSwitchContext>
	prvTaskExitError();
 8009d30:	f7ff ff22 	bl	8009b78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	e000ed00 	.word	0xe000ed00
 8009d44:	410fc271 	.word	0x410fc271
 8009d48:	410fc270 	.word	0x410fc270
 8009d4c:	e000e400 	.word	0xe000e400
 8009d50:	20000efc 	.word	0x20000efc
 8009d54:	20000f00 	.word	0x20000f00
 8009d58:	e000ed20 	.word	0xe000ed20
 8009d5c:	20000018 	.word	0x20000018
 8009d60:	e000ef34 	.word	0xe000ef34

08009d64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
	__asm volatile
 8009d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6e:	f383 8811 	msr	BASEPRI, r3
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	607b      	str	r3, [r7, #4]
}
 8009d7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d7e:	4b0f      	ldr	r3, [pc, #60]	; (8009dbc <vPortEnterCritical+0x58>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	3301      	adds	r3, #1
 8009d84:	4a0d      	ldr	r2, [pc, #52]	; (8009dbc <vPortEnterCritical+0x58>)
 8009d86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d88:	4b0c      	ldr	r3, [pc, #48]	; (8009dbc <vPortEnterCritical+0x58>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d10f      	bne.n	8009db0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d90:	4b0b      	ldr	r3, [pc, #44]	; (8009dc0 <vPortEnterCritical+0x5c>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00a      	beq.n	8009db0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9e:	f383 8811 	msr	BASEPRI, r3
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	603b      	str	r3, [r7, #0]
}
 8009dac:	bf00      	nop
 8009dae:	e7fe      	b.n	8009dae <vPortEnterCritical+0x4a>
	}
}
 8009db0:	bf00      	nop
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	20000018 	.word	0x20000018
 8009dc0:	e000ed04 	.word	0xe000ed04

08009dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009dca:	4b12      	ldr	r3, [pc, #72]	; (8009e14 <vPortExitCritical+0x50>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d10a      	bne.n	8009de8 <vPortExitCritical+0x24>
	__asm volatile
 8009dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd6:	f383 8811 	msr	BASEPRI, r3
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	607b      	str	r3, [r7, #4]
}
 8009de4:	bf00      	nop
 8009de6:	e7fe      	b.n	8009de6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009de8:	4b0a      	ldr	r3, [pc, #40]	; (8009e14 <vPortExitCritical+0x50>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	4a09      	ldr	r2, [pc, #36]	; (8009e14 <vPortExitCritical+0x50>)
 8009df0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009df2:	4b08      	ldr	r3, [pc, #32]	; (8009e14 <vPortExitCritical+0x50>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d105      	bne.n	8009e06 <vPortExitCritical+0x42>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	f383 8811 	msr	BASEPRI, r3
}
 8009e04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e06:	bf00      	nop
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	20000018 	.word	0x20000018
	...

08009e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e20:	f3ef 8009 	mrs	r0, PSP
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	4b15      	ldr	r3, [pc, #84]	; (8009e80 <pxCurrentTCBConst>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	f01e 0f10 	tst.w	lr, #16
 8009e30:	bf08      	it	eq
 8009e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3a:	6010      	str	r0, [r2, #0]
 8009e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e44:	f380 8811 	msr	BASEPRI, r0
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f7fe ffc4 	bl	8008ddc <vTaskSwitchContext>
 8009e54:	f04f 0000 	mov.w	r0, #0
 8009e58:	f380 8811 	msr	BASEPRI, r0
 8009e5c:	bc09      	pop	{r0, r3}
 8009e5e:	6819      	ldr	r1, [r3, #0]
 8009e60:	6808      	ldr	r0, [r1, #0]
 8009e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e66:	f01e 0f10 	tst.w	lr, #16
 8009e6a:	bf08      	it	eq
 8009e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e70:	f380 8809 	msr	PSP, r0
 8009e74:	f3bf 8f6f 	isb	sy
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	f3af 8000 	nop.w

08009e80 <pxCurrentTCBConst>:
 8009e80:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e84:	bf00      	nop
 8009e86:	bf00      	nop

08009e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	607b      	str	r3, [r7, #4]
}
 8009ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ea2:	f7fe fee1 	bl	8008c68 <xTaskIncrementTick>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d003      	beq.n	8009eb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009eac:	4b06      	ldr	r3, [pc, #24]	; (8009ec8 <SysTick_Handler+0x40>)
 8009eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	f383 8811 	msr	BASEPRI, r3
}
 8009ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ec0:	bf00      	nop
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	e000ed04 	.word	0xe000ed04

08009ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009ecc:	b480      	push	{r7}
 8009ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ed0:	4b0b      	ldr	r3, [pc, #44]	; (8009f00 <vPortSetupTimerInterrupt+0x34>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ed6:	4b0b      	ldr	r3, [pc, #44]	; (8009f04 <vPortSetupTimerInterrupt+0x38>)
 8009ed8:	2200      	movs	r2, #0
 8009eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009edc:	4b0a      	ldr	r3, [pc, #40]	; (8009f08 <vPortSetupTimerInterrupt+0x3c>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a0a      	ldr	r2, [pc, #40]	; (8009f0c <vPortSetupTimerInterrupt+0x40>)
 8009ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee6:	099b      	lsrs	r3, r3, #6
 8009ee8:	4a09      	ldr	r2, [pc, #36]	; (8009f10 <vPortSetupTimerInterrupt+0x44>)
 8009eea:	3b01      	subs	r3, #1
 8009eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009eee:	4b04      	ldr	r3, [pc, #16]	; (8009f00 <vPortSetupTimerInterrupt+0x34>)
 8009ef0:	2207      	movs	r2, #7
 8009ef2:	601a      	str	r2, [r3, #0]
}
 8009ef4:	bf00      	nop
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	e000e010 	.word	0xe000e010
 8009f04:	e000e018 	.word	0xe000e018
 8009f08:	2000000c 	.word	0x2000000c
 8009f0c:	10624dd3 	.word	0x10624dd3
 8009f10:	e000e014 	.word	0xe000e014

08009f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009f24 <vPortEnableVFP+0x10>
 8009f18:	6801      	ldr	r1, [r0, #0]
 8009f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f1e:	6001      	str	r1, [r0, #0]
 8009f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f22:	bf00      	nop
 8009f24:	e000ed88 	.word	0xe000ed88

08009f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f2e:	f3ef 8305 	mrs	r3, IPSR
 8009f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2b0f      	cmp	r3, #15
 8009f38:	d914      	bls.n	8009f64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f3a:	4a17      	ldr	r2, [pc, #92]	; (8009f98 <vPortValidateInterruptPriority+0x70>)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	4413      	add	r3, r2
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f44:	4b15      	ldr	r3, [pc, #84]	; (8009f9c <vPortValidateInterruptPriority+0x74>)
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	7afa      	ldrb	r2, [r7, #11]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d20a      	bcs.n	8009f64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	607b      	str	r3, [r7, #4]
}
 8009f60:	bf00      	nop
 8009f62:	e7fe      	b.n	8009f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f64:	4b0e      	ldr	r3, [pc, #56]	; (8009fa0 <vPortValidateInterruptPriority+0x78>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009f6c:	4b0d      	ldr	r3, [pc, #52]	; (8009fa4 <vPortValidateInterruptPriority+0x7c>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d90a      	bls.n	8009f8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	603b      	str	r3, [r7, #0]
}
 8009f86:	bf00      	nop
 8009f88:	e7fe      	b.n	8009f88 <vPortValidateInterruptPriority+0x60>
	}
 8009f8a:	bf00      	nop
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	e000e3f0 	.word	0xe000e3f0
 8009f9c:	20000efc 	.word	0x20000efc
 8009fa0:	e000ed0c 	.word	0xe000ed0c
 8009fa4:	20000f00 	.word	0x20000f00

08009fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08a      	sub	sp, #40	; 0x28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009fb4:	f7fe fd9c 	bl	8008af0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009fb8:	4b58      	ldr	r3, [pc, #352]	; (800a11c <pvPortMalloc+0x174>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d101      	bne.n	8009fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009fc0:	f000 f910 	bl	800a1e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009fc4:	4b56      	ldr	r3, [pc, #344]	; (800a120 <pvPortMalloc+0x178>)
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4013      	ands	r3, r2
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f040 808e 	bne.w	800a0ee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d01d      	beq.n	800a014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009fd8:	2208      	movs	r2, #8
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4413      	add	r3, r2
 8009fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f003 0307 	and.w	r3, r3, #7
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d014      	beq.n	800a014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f023 0307 	bic.w	r3, r3, #7
 8009ff0:	3308      	adds	r3, #8
 8009ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f003 0307 	and.w	r3, r3, #7
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00a      	beq.n	800a014 <pvPortMalloc+0x6c>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	617b      	str	r3, [r7, #20]
}
 800a010:	bf00      	nop
 800a012:	e7fe      	b.n	800a012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d069      	beq.n	800a0ee <pvPortMalloc+0x146>
 800a01a:	4b42      	ldr	r3, [pc, #264]	; (800a124 <pvPortMalloc+0x17c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	429a      	cmp	r2, r3
 800a022:	d864      	bhi.n	800a0ee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a024:	4b40      	ldr	r3, [pc, #256]	; (800a128 <pvPortMalloc+0x180>)
 800a026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a028:	4b3f      	ldr	r3, [pc, #252]	; (800a128 <pvPortMalloc+0x180>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a02e:	e004      	b.n	800a03a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	429a      	cmp	r2, r3
 800a042:	d903      	bls.n	800a04c <pvPortMalloc+0xa4>
 800a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1f1      	bne.n	800a030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a04c:	4b33      	ldr	r3, [pc, #204]	; (800a11c <pvPortMalloc+0x174>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a052:	429a      	cmp	r2, r3
 800a054:	d04b      	beq.n	800a0ee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a056:	6a3b      	ldr	r3, [r7, #32]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2208      	movs	r2, #8
 800a05c:	4413      	add	r3, r2
 800a05e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	6a3b      	ldr	r3, [r7, #32]
 800a066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06a:	685a      	ldr	r2, [r3, #4]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	1ad2      	subs	r2, r2, r3
 800a070:	2308      	movs	r3, #8
 800a072:	005b      	lsls	r3, r3, #1
 800a074:	429a      	cmp	r2, r3
 800a076:	d91f      	bls.n	800a0b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4413      	add	r3, r2
 800a07e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	f003 0307 	and.w	r3, r3, #7
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00a      	beq.n	800a0a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08e:	f383 8811 	msr	BASEPRI, r3
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	613b      	str	r3, [r7, #16]
}
 800a09c:	bf00      	nop
 800a09e:	e7fe      	b.n	800a09e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	1ad2      	subs	r2, r2, r3
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a0b2:	69b8      	ldr	r0, [r7, #24]
 800a0b4:	f000 f8f8 	bl	800a2a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a0b8:	4b1a      	ldr	r3, [pc, #104]	; (800a124 <pvPortMalloc+0x17c>)
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	4a18      	ldr	r2, [pc, #96]	; (800a124 <pvPortMalloc+0x17c>)
 800a0c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0c6:	4b17      	ldr	r3, [pc, #92]	; (800a124 <pvPortMalloc+0x17c>)
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	4b18      	ldr	r3, [pc, #96]	; (800a12c <pvPortMalloc+0x184>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d203      	bcs.n	800a0da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a0d2:	4b14      	ldr	r3, [pc, #80]	; (800a124 <pvPortMalloc+0x17c>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a15      	ldr	r2, [pc, #84]	; (800a12c <pvPortMalloc+0x184>)
 800a0d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0dc:	685a      	ldr	r2, [r3, #4]
 800a0de:	4b10      	ldr	r3, [pc, #64]	; (800a120 <pvPortMalloc+0x178>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	431a      	orrs	r2, r3
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a0ee:	f7fe fd0d 	bl	8008b0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	f003 0307 	and.w	r3, r3, #7
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00a      	beq.n	800a112 <pvPortMalloc+0x16a>
	__asm volatile
 800a0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a100:	f383 8811 	msr	BASEPRI, r3
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	60fb      	str	r3, [r7, #12]
}
 800a10e:	bf00      	nop
 800a110:	e7fe      	b.n	800a110 <pvPortMalloc+0x168>
	return pvReturn;
 800a112:	69fb      	ldr	r3, [r7, #28]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3728      	adds	r7, #40	; 0x28
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	20001cb8 	.word	0x20001cb8
 800a120:	20001cc4 	.word	0x20001cc4
 800a124:	20001cbc 	.word	0x20001cbc
 800a128:	20001cb0 	.word	0x20001cb0
 800a12c:	20001cc0 	.word	0x20001cc0

0800a130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d048      	beq.n	800a1d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a142:	2308      	movs	r3, #8
 800a144:	425b      	negs	r3, r3
 800a146:	697a      	ldr	r2, [r7, #20]
 800a148:	4413      	add	r3, r2
 800a14a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	4b21      	ldr	r3, [pc, #132]	; (800a1dc <vPortFree+0xac>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4013      	ands	r3, r2
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10a      	bne.n	800a174 <vPortFree+0x44>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	60fb      	str	r3, [r7, #12]
}
 800a170:	bf00      	nop
 800a172:	e7fe      	b.n	800a172 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00a      	beq.n	800a192 <vPortFree+0x62>
	__asm volatile
 800a17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a180:	f383 8811 	msr	BASEPRI, r3
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	60bb      	str	r3, [r7, #8]
}
 800a18e:	bf00      	nop
 800a190:	e7fe      	b.n	800a190 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	685a      	ldr	r2, [r3, #4]
 800a196:	4b11      	ldr	r3, [pc, #68]	; (800a1dc <vPortFree+0xac>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4013      	ands	r3, r2
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d019      	beq.n	800a1d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d115      	bne.n	800a1d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	4b0b      	ldr	r3, [pc, #44]	; (800a1dc <vPortFree+0xac>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	43db      	mvns	r3, r3
 800a1b2:	401a      	ands	r2, r3
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a1b8:	f7fe fc9a 	bl	8008af0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	685a      	ldr	r2, [r3, #4]
 800a1c0:	4b07      	ldr	r3, [pc, #28]	; (800a1e0 <vPortFree+0xb0>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	4a06      	ldr	r2, [pc, #24]	; (800a1e0 <vPortFree+0xb0>)
 800a1c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1ca:	6938      	ldr	r0, [r7, #16]
 800a1cc:	f000 f86c 	bl	800a2a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a1d0:	f7fe fc9c 	bl	8008b0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a1d4:	bf00      	nop
 800a1d6:	3718      	adds	r7, #24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	20001cc4 	.word	0x20001cc4
 800a1e0:	20001cbc 	.word	0x20001cbc

0800a1e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a1ea:	f640 53ac 	movw	r3, #3500	; 0xdac
 800a1ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a1f0:	4b27      	ldr	r3, [pc, #156]	; (800a290 <prvHeapInit+0xac>)
 800a1f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f003 0307 	and.w	r3, r3, #7
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00c      	beq.n	800a218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3307      	adds	r3, #7
 800a202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f023 0307 	bic.w	r3, r3, #7
 800a20a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	1ad3      	subs	r3, r2, r3
 800a212:	4a1f      	ldr	r2, [pc, #124]	; (800a290 <prvHeapInit+0xac>)
 800a214:	4413      	add	r3, r2
 800a216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a21c:	4a1d      	ldr	r2, [pc, #116]	; (800a294 <prvHeapInit+0xb0>)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a222:	4b1c      	ldr	r3, [pc, #112]	; (800a294 <prvHeapInit+0xb0>)
 800a224:	2200      	movs	r2, #0
 800a226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	4413      	add	r3, r2
 800a22e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a230:	2208      	movs	r2, #8
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	1a9b      	subs	r3, r3, r2
 800a236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f023 0307 	bic.w	r3, r3, #7
 800a23e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	4a15      	ldr	r2, [pc, #84]	; (800a298 <prvHeapInit+0xb4>)
 800a244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a246:	4b14      	ldr	r3, [pc, #80]	; (800a298 <prvHeapInit+0xb4>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2200      	movs	r2, #0
 800a24c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a24e:	4b12      	ldr	r3, [pc, #72]	; (800a298 <prvHeapInit+0xb4>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2200      	movs	r2, #0
 800a254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	1ad2      	subs	r2, r2, r3
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a264:	4b0c      	ldr	r3, [pc, #48]	; (800a298 <prvHeapInit+0xb4>)
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	4a0a      	ldr	r2, [pc, #40]	; (800a29c <prvHeapInit+0xb8>)
 800a272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	4a09      	ldr	r2, [pc, #36]	; (800a2a0 <prvHeapInit+0xbc>)
 800a27a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a27c:	4b09      	ldr	r3, [pc, #36]	; (800a2a4 <prvHeapInit+0xc0>)
 800a27e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a282:	601a      	str	r2, [r3, #0]
}
 800a284:	bf00      	nop
 800a286:	3714      	adds	r7, #20
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	20000f04 	.word	0x20000f04
 800a294:	20001cb0 	.word	0x20001cb0
 800a298:	20001cb8 	.word	0x20001cb8
 800a29c:	20001cc0 	.word	0x20001cc0
 800a2a0:	20001cbc 	.word	0x20001cbc
 800a2a4:	20001cc4 	.word	0x20001cc4

0800a2a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2b0:	4b28      	ldr	r3, [pc, #160]	; (800a354 <prvInsertBlockIntoFreeList+0xac>)
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	e002      	b.n	800a2bc <prvInsertBlockIntoFreeList+0x14>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	60fb      	str	r3, [r7, #12]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d8f7      	bhi.n	800a2b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d108      	bne.n	800a2ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	441a      	add	r2, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	441a      	add	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d118      	bne.n	800a330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	4b15      	ldr	r3, [pc, #84]	; (800a358 <prvInsertBlockIntoFreeList+0xb0>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	429a      	cmp	r2, r3
 800a308:	d00d      	beq.n	800a326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	441a      	add	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	601a      	str	r2, [r3, #0]
 800a324:	e008      	b.n	800a338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a326:	4b0c      	ldr	r3, [pc, #48]	; (800a358 <prvInsertBlockIntoFreeList+0xb0>)
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	e003      	b.n	800a338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d002      	beq.n	800a346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a346:	bf00      	nop
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	20001cb0 	.word	0x20001cb0
 800a358:	20001cb8 	.word	0x20001cb8

0800a35c <__errno>:
 800a35c:	4b01      	ldr	r3, [pc, #4]	; (800a364 <__errno+0x8>)
 800a35e:	6818      	ldr	r0, [r3, #0]
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop
 800a364:	2000001c 	.word	0x2000001c

0800a368 <__libc_init_array>:
 800a368:	b570      	push	{r4, r5, r6, lr}
 800a36a:	4d0d      	ldr	r5, [pc, #52]	; (800a3a0 <__libc_init_array+0x38>)
 800a36c:	4c0d      	ldr	r4, [pc, #52]	; (800a3a4 <__libc_init_array+0x3c>)
 800a36e:	1b64      	subs	r4, r4, r5
 800a370:	10a4      	asrs	r4, r4, #2
 800a372:	2600      	movs	r6, #0
 800a374:	42a6      	cmp	r6, r4
 800a376:	d109      	bne.n	800a38c <__libc_init_array+0x24>
 800a378:	4d0b      	ldr	r5, [pc, #44]	; (800a3a8 <__libc_init_array+0x40>)
 800a37a:	4c0c      	ldr	r4, [pc, #48]	; (800a3ac <__libc_init_array+0x44>)
 800a37c:	f004 fc72 	bl	800ec64 <_init>
 800a380:	1b64      	subs	r4, r4, r5
 800a382:	10a4      	asrs	r4, r4, #2
 800a384:	2600      	movs	r6, #0
 800a386:	42a6      	cmp	r6, r4
 800a388:	d105      	bne.n	800a396 <__libc_init_array+0x2e>
 800a38a:	bd70      	pop	{r4, r5, r6, pc}
 800a38c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a390:	4798      	blx	r3
 800a392:	3601      	adds	r6, #1
 800a394:	e7ee      	b.n	800a374 <__libc_init_array+0xc>
 800a396:	f855 3b04 	ldr.w	r3, [r5], #4
 800a39a:	4798      	blx	r3
 800a39c:	3601      	adds	r6, #1
 800a39e:	e7f2      	b.n	800a386 <__libc_init_array+0x1e>
 800a3a0:	0800f25c 	.word	0x0800f25c
 800a3a4:	0800f25c 	.word	0x0800f25c
 800a3a8:	0800f25c 	.word	0x0800f25c
 800a3ac:	0800f260 	.word	0x0800f260

0800a3b0 <memcpy>:
 800a3b0:	440a      	add	r2, r1
 800a3b2:	4291      	cmp	r1, r2
 800a3b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a3b8:	d100      	bne.n	800a3bc <memcpy+0xc>
 800a3ba:	4770      	bx	lr
 800a3bc:	b510      	push	{r4, lr}
 800a3be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3c6:	4291      	cmp	r1, r2
 800a3c8:	d1f9      	bne.n	800a3be <memcpy+0xe>
 800a3ca:	bd10      	pop	{r4, pc}

0800a3cc <memset>:
 800a3cc:	4402      	add	r2, r0
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d100      	bne.n	800a3d6 <memset+0xa>
 800a3d4:	4770      	bx	lr
 800a3d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a3da:	e7f9      	b.n	800a3d0 <memset+0x4>

0800a3dc <__cvt>:
 800a3dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e0:	ec55 4b10 	vmov	r4, r5, d0
 800a3e4:	2d00      	cmp	r5, #0
 800a3e6:	460e      	mov	r6, r1
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	462b      	mov	r3, r5
 800a3ec:	bfbb      	ittet	lt
 800a3ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a3f2:	461d      	movlt	r5, r3
 800a3f4:	2300      	movge	r3, #0
 800a3f6:	232d      	movlt	r3, #45	; 0x2d
 800a3f8:	700b      	strb	r3, [r1, #0]
 800a3fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a400:	4691      	mov	r9, r2
 800a402:	f023 0820 	bic.w	r8, r3, #32
 800a406:	bfbc      	itt	lt
 800a408:	4622      	movlt	r2, r4
 800a40a:	4614      	movlt	r4, r2
 800a40c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a410:	d005      	beq.n	800a41e <__cvt+0x42>
 800a412:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a416:	d100      	bne.n	800a41a <__cvt+0x3e>
 800a418:	3601      	adds	r6, #1
 800a41a:	2102      	movs	r1, #2
 800a41c:	e000      	b.n	800a420 <__cvt+0x44>
 800a41e:	2103      	movs	r1, #3
 800a420:	ab03      	add	r3, sp, #12
 800a422:	9301      	str	r3, [sp, #4]
 800a424:	ab02      	add	r3, sp, #8
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	ec45 4b10 	vmov	d0, r4, r5
 800a42c:	4653      	mov	r3, sl
 800a42e:	4632      	mov	r2, r6
 800a430:	f001 fdb6 	bl	800bfa0 <_dtoa_r>
 800a434:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a438:	4607      	mov	r7, r0
 800a43a:	d102      	bne.n	800a442 <__cvt+0x66>
 800a43c:	f019 0f01 	tst.w	r9, #1
 800a440:	d022      	beq.n	800a488 <__cvt+0xac>
 800a442:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a446:	eb07 0906 	add.w	r9, r7, r6
 800a44a:	d110      	bne.n	800a46e <__cvt+0x92>
 800a44c:	783b      	ldrb	r3, [r7, #0]
 800a44e:	2b30      	cmp	r3, #48	; 0x30
 800a450:	d10a      	bne.n	800a468 <__cvt+0x8c>
 800a452:	2200      	movs	r2, #0
 800a454:	2300      	movs	r3, #0
 800a456:	4620      	mov	r0, r4
 800a458:	4629      	mov	r1, r5
 800a45a:	f7f6 fb35 	bl	8000ac8 <__aeabi_dcmpeq>
 800a45e:	b918      	cbnz	r0, 800a468 <__cvt+0x8c>
 800a460:	f1c6 0601 	rsb	r6, r6, #1
 800a464:	f8ca 6000 	str.w	r6, [sl]
 800a468:	f8da 3000 	ldr.w	r3, [sl]
 800a46c:	4499      	add	r9, r3
 800a46e:	2200      	movs	r2, #0
 800a470:	2300      	movs	r3, #0
 800a472:	4620      	mov	r0, r4
 800a474:	4629      	mov	r1, r5
 800a476:	f7f6 fb27 	bl	8000ac8 <__aeabi_dcmpeq>
 800a47a:	b108      	cbz	r0, 800a480 <__cvt+0xa4>
 800a47c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a480:	2230      	movs	r2, #48	; 0x30
 800a482:	9b03      	ldr	r3, [sp, #12]
 800a484:	454b      	cmp	r3, r9
 800a486:	d307      	bcc.n	800a498 <__cvt+0xbc>
 800a488:	9b03      	ldr	r3, [sp, #12]
 800a48a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a48c:	1bdb      	subs	r3, r3, r7
 800a48e:	4638      	mov	r0, r7
 800a490:	6013      	str	r3, [r2, #0]
 800a492:	b004      	add	sp, #16
 800a494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a498:	1c59      	adds	r1, r3, #1
 800a49a:	9103      	str	r1, [sp, #12]
 800a49c:	701a      	strb	r2, [r3, #0]
 800a49e:	e7f0      	b.n	800a482 <__cvt+0xa6>

0800a4a0 <__exponent>:
 800a4a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2900      	cmp	r1, #0
 800a4a6:	bfb8      	it	lt
 800a4a8:	4249      	neglt	r1, r1
 800a4aa:	f803 2b02 	strb.w	r2, [r3], #2
 800a4ae:	bfb4      	ite	lt
 800a4b0:	222d      	movlt	r2, #45	; 0x2d
 800a4b2:	222b      	movge	r2, #43	; 0x2b
 800a4b4:	2909      	cmp	r1, #9
 800a4b6:	7042      	strb	r2, [r0, #1]
 800a4b8:	dd2a      	ble.n	800a510 <__exponent+0x70>
 800a4ba:	f10d 0407 	add.w	r4, sp, #7
 800a4be:	46a4      	mov	ip, r4
 800a4c0:	270a      	movs	r7, #10
 800a4c2:	46a6      	mov	lr, r4
 800a4c4:	460a      	mov	r2, r1
 800a4c6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a4ca:	fb07 1516 	mls	r5, r7, r6, r1
 800a4ce:	3530      	adds	r5, #48	; 0x30
 800a4d0:	2a63      	cmp	r2, #99	; 0x63
 800a4d2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a4d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a4da:	4631      	mov	r1, r6
 800a4dc:	dcf1      	bgt.n	800a4c2 <__exponent+0x22>
 800a4de:	3130      	adds	r1, #48	; 0x30
 800a4e0:	f1ae 0502 	sub.w	r5, lr, #2
 800a4e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a4e8:	1c44      	adds	r4, r0, #1
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	4561      	cmp	r1, ip
 800a4ee:	d30a      	bcc.n	800a506 <__exponent+0x66>
 800a4f0:	f10d 0209 	add.w	r2, sp, #9
 800a4f4:	eba2 020e 	sub.w	r2, r2, lr
 800a4f8:	4565      	cmp	r5, ip
 800a4fa:	bf88      	it	hi
 800a4fc:	2200      	movhi	r2, #0
 800a4fe:	4413      	add	r3, r2
 800a500:	1a18      	subs	r0, r3, r0
 800a502:	b003      	add	sp, #12
 800a504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a506:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a50a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a50e:	e7ed      	b.n	800a4ec <__exponent+0x4c>
 800a510:	2330      	movs	r3, #48	; 0x30
 800a512:	3130      	adds	r1, #48	; 0x30
 800a514:	7083      	strb	r3, [r0, #2]
 800a516:	70c1      	strb	r1, [r0, #3]
 800a518:	1d03      	adds	r3, r0, #4
 800a51a:	e7f1      	b.n	800a500 <__exponent+0x60>

0800a51c <_printf_float>:
 800a51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a520:	ed2d 8b02 	vpush	{d8}
 800a524:	b08d      	sub	sp, #52	; 0x34
 800a526:	460c      	mov	r4, r1
 800a528:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a52c:	4616      	mov	r6, r2
 800a52e:	461f      	mov	r7, r3
 800a530:	4605      	mov	r5, r0
 800a532:	f002 fe91 	bl	800d258 <_localeconv_r>
 800a536:	f8d0 a000 	ldr.w	sl, [r0]
 800a53a:	4650      	mov	r0, sl
 800a53c:	f7f5 fe48 	bl	80001d0 <strlen>
 800a540:	2300      	movs	r3, #0
 800a542:	930a      	str	r3, [sp, #40]	; 0x28
 800a544:	6823      	ldr	r3, [r4, #0]
 800a546:	9305      	str	r3, [sp, #20]
 800a548:	f8d8 3000 	ldr.w	r3, [r8]
 800a54c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a550:	3307      	adds	r3, #7
 800a552:	f023 0307 	bic.w	r3, r3, #7
 800a556:	f103 0208 	add.w	r2, r3, #8
 800a55a:	f8c8 2000 	str.w	r2, [r8]
 800a55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a562:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a566:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a56a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a56e:	9307      	str	r3, [sp, #28]
 800a570:	f8cd 8018 	str.w	r8, [sp, #24]
 800a574:	ee08 0a10 	vmov	s16, r0
 800a578:	4b9f      	ldr	r3, [pc, #636]	; (800a7f8 <_printf_float+0x2dc>)
 800a57a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a57e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a582:	f7f6 fad3 	bl	8000b2c <__aeabi_dcmpun>
 800a586:	bb88      	cbnz	r0, 800a5ec <_printf_float+0xd0>
 800a588:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a58c:	4b9a      	ldr	r3, [pc, #616]	; (800a7f8 <_printf_float+0x2dc>)
 800a58e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a592:	f7f6 faad 	bl	8000af0 <__aeabi_dcmple>
 800a596:	bb48      	cbnz	r0, 800a5ec <_printf_float+0xd0>
 800a598:	2200      	movs	r2, #0
 800a59a:	2300      	movs	r3, #0
 800a59c:	4640      	mov	r0, r8
 800a59e:	4649      	mov	r1, r9
 800a5a0:	f7f6 fa9c 	bl	8000adc <__aeabi_dcmplt>
 800a5a4:	b110      	cbz	r0, 800a5ac <_printf_float+0x90>
 800a5a6:	232d      	movs	r3, #45	; 0x2d
 800a5a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5ac:	4b93      	ldr	r3, [pc, #588]	; (800a7fc <_printf_float+0x2e0>)
 800a5ae:	4894      	ldr	r0, [pc, #592]	; (800a800 <_printf_float+0x2e4>)
 800a5b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a5b4:	bf94      	ite	ls
 800a5b6:	4698      	movls	r8, r3
 800a5b8:	4680      	movhi	r8, r0
 800a5ba:	2303      	movs	r3, #3
 800a5bc:	6123      	str	r3, [r4, #16]
 800a5be:	9b05      	ldr	r3, [sp, #20]
 800a5c0:	f023 0204 	bic.w	r2, r3, #4
 800a5c4:	6022      	str	r2, [r4, #0]
 800a5c6:	f04f 0900 	mov.w	r9, #0
 800a5ca:	9700      	str	r7, [sp, #0]
 800a5cc:	4633      	mov	r3, r6
 800a5ce:	aa0b      	add	r2, sp, #44	; 0x2c
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	f000 f9d8 	bl	800a988 <_printf_common>
 800a5d8:	3001      	adds	r0, #1
 800a5da:	f040 8090 	bne.w	800a6fe <_printf_float+0x1e2>
 800a5de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5e2:	b00d      	add	sp, #52	; 0x34
 800a5e4:	ecbd 8b02 	vpop	{d8}
 800a5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ec:	4642      	mov	r2, r8
 800a5ee:	464b      	mov	r3, r9
 800a5f0:	4640      	mov	r0, r8
 800a5f2:	4649      	mov	r1, r9
 800a5f4:	f7f6 fa9a 	bl	8000b2c <__aeabi_dcmpun>
 800a5f8:	b140      	cbz	r0, 800a60c <_printf_float+0xf0>
 800a5fa:	464b      	mov	r3, r9
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	bfbc      	itt	lt
 800a600:	232d      	movlt	r3, #45	; 0x2d
 800a602:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a606:	487f      	ldr	r0, [pc, #508]	; (800a804 <_printf_float+0x2e8>)
 800a608:	4b7f      	ldr	r3, [pc, #508]	; (800a808 <_printf_float+0x2ec>)
 800a60a:	e7d1      	b.n	800a5b0 <_printf_float+0x94>
 800a60c:	6863      	ldr	r3, [r4, #4]
 800a60e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a612:	9206      	str	r2, [sp, #24]
 800a614:	1c5a      	adds	r2, r3, #1
 800a616:	d13f      	bne.n	800a698 <_printf_float+0x17c>
 800a618:	2306      	movs	r3, #6
 800a61a:	6063      	str	r3, [r4, #4]
 800a61c:	9b05      	ldr	r3, [sp, #20]
 800a61e:	6861      	ldr	r1, [r4, #4]
 800a620:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a624:	2300      	movs	r3, #0
 800a626:	9303      	str	r3, [sp, #12]
 800a628:	ab0a      	add	r3, sp, #40	; 0x28
 800a62a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a62e:	ab09      	add	r3, sp, #36	; 0x24
 800a630:	ec49 8b10 	vmov	d0, r8, r9
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	6022      	str	r2, [r4, #0]
 800a638:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a63c:	4628      	mov	r0, r5
 800a63e:	f7ff fecd 	bl	800a3dc <__cvt>
 800a642:	9b06      	ldr	r3, [sp, #24]
 800a644:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a646:	2b47      	cmp	r3, #71	; 0x47
 800a648:	4680      	mov	r8, r0
 800a64a:	d108      	bne.n	800a65e <_printf_float+0x142>
 800a64c:	1cc8      	adds	r0, r1, #3
 800a64e:	db02      	blt.n	800a656 <_printf_float+0x13a>
 800a650:	6863      	ldr	r3, [r4, #4]
 800a652:	4299      	cmp	r1, r3
 800a654:	dd41      	ble.n	800a6da <_printf_float+0x1be>
 800a656:	f1ab 0b02 	sub.w	fp, fp, #2
 800a65a:	fa5f fb8b 	uxtb.w	fp, fp
 800a65e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a662:	d820      	bhi.n	800a6a6 <_printf_float+0x18a>
 800a664:	3901      	subs	r1, #1
 800a666:	465a      	mov	r2, fp
 800a668:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a66c:	9109      	str	r1, [sp, #36]	; 0x24
 800a66e:	f7ff ff17 	bl	800a4a0 <__exponent>
 800a672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a674:	1813      	adds	r3, r2, r0
 800a676:	2a01      	cmp	r2, #1
 800a678:	4681      	mov	r9, r0
 800a67a:	6123      	str	r3, [r4, #16]
 800a67c:	dc02      	bgt.n	800a684 <_printf_float+0x168>
 800a67e:	6822      	ldr	r2, [r4, #0]
 800a680:	07d2      	lsls	r2, r2, #31
 800a682:	d501      	bpl.n	800a688 <_printf_float+0x16c>
 800a684:	3301      	adds	r3, #1
 800a686:	6123      	str	r3, [r4, #16]
 800a688:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d09c      	beq.n	800a5ca <_printf_float+0xae>
 800a690:	232d      	movs	r3, #45	; 0x2d
 800a692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a696:	e798      	b.n	800a5ca <_printf_float+0xae>
 800a698:	9a06      	ldr	r2, [sp, #24]
 800a69a:	2a47      	cmp	r2, #71	; 0x47
 800a69c:	d1be      	bne.n	800a61c <_printf_float+0x100>
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1bc      	bne.n	800a61c <_printf_float+0x100>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e7b9      	b.n	800a61a <_printf_float+0xfe>
 800a6a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a6aa:	d118      	bne.n	800a6de <_printf_float+0x1c2>
 800a6ac:	2900      	cmp	r1, #0
 800a6ae:	6863      	ldr	r3, [r4, #4]
 800a6b0:	dd0b      	ble.n	800a6ca <_printf_float+0x1ae>
 800a6b2:	6121      	str	r1, [r4, #16]
 800a6b4:	b913      	cbnz	r3, 800a6bc <_printf_float+0x1a0>
 800a6b6:	6822      	ldr	r2, [r4, #0]
 800a6b8:	07d0      	lsls	r0, r2, #31
 800a6ba:	d502      	bpl.n	800a6c2 <_printf_float+0x1a6>
 800a6bc:	3301      	adds	r3, #1
 800a6be:	440b      	add	r3, r1
 800a6c0:	6123      	str	r3, [r4, #16]
 800a6c2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a6c4:	f04f 0900 	mov.w	r9, #0
 800a6c8:	e7de      	b.n	800a688 <_printf_float+0x16c>
 800a6ca:	b913      	cbnz	r3, 800a6d2 <_printf_float+0x1b6>
 800a6cc:	6822      	ldr	r2, [r4, #0]
 800a6ce:	07d2      	lsls	r2, r2, #31
 800a6d0:	d501      	bpl.n	800a6d6 <_printf_float+0x1ba>
 800a6d2:	3302      	adds	r3, #2
 800a6d4:	e7f4      	b.n	800a6c0 <_printf_float+0x1a4>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e7f2      	b.n	800a6c0 <_printf_float+0x1a4>
 800a6da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a6de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6e0:	4299      	cmp	r1, r3
 800a6e2:	db05      	blt.n	800a6f0 <_printf_float+0x1d4>
 800a6e4:	6823      	ldr	r3, [r4, #0]
 800a6e6:	6121      	str	r1, [r4, #16]
 800a6e8:	07d8      	lsls	r0, r3, #31
 800a6ea:	d5ea      	bpl.n	800a6c2 <_printf_float+0x1a6>
 800a6ec:	1c4b      	adds	r3, r1, #1
 800a6ee:	e7e7      	b.n	800a6c0 <_printf_float+0x1a4>
 800a6f0:	2900      	cmp	r1, #0
 800a6f2:	bfd4      	ite	le
 800a6f4:	f1c1 0202 	rsble	r2, r1, #2
 800a6f8:	2201      	movgt	r2, #1
 800a6fa:	4413      	add	r3, r2
 800a6fc:	e7e0      	b.n	800a6c0 <_printf_float+0x1a4>
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	055a      	lsls	r2, r3, #21
 800a702:	d407      	bmi.n	800a714 <_printf_float+0x1f8>
 800a704:	6923      	ldr	r3, [r4, #16]
 800a706:	4642      	mov	r2, r8
 800a708:	4631      	mov	r1, r6
 800a70a:	4628      	mov	r0, r5
 800a70c:	47b8      	blx	r7
 800a70e:	3001      	adds	r0, #1
 800a710:	d12c      	bne.n	800a76c <_printf_float+0x250>
 800a712:	e764      	b.n	800a5de <_printf_float+0xc2>
 800a714:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a718:	f240 80e0 	bls.w	800a8dc <_printf_float+0x3c0>
 800a71c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a720:	2200      	movs	r2, #0
 800a722:	2300      	movs	r3, #0
 800a724:	f7f6 f9d0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a728:	2800      	cmp	r0, #0
 800a72a:	d034      	beq.n	800a796 <_printf_float+0x27a>
 800a72c:	4a37      	ldr	r2, [pc, #220]	; (800a80c <_printf_float+0x2f0>)
 800a72e:	2301      	movs	r3, #1
 800a730:	4631      	mov	r1, r6
 800a732:	4628      	mov	r0, r5
 800a734:	47b8      	blx	r7
 800a736:	3001      	adds	r0, #1
 800a738:	f43f af51 	beq.w	800a5de <_printf_float+0xc2>
 800a73c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a740:	429a      	cmp	r2, r3
 800a742:	db02      	blt.n	800a74a <_printf_float+0x22e>
 800a744:	6823      	ldr	r3, [r4, #0]
 800a746:	07d8      	lsls	r0, r3, #31
 800a748:	d510      	bpl.n	800a76c <_printf_float+0x250>
 800a74a:	ee18 3a10 	vmov	r3, s16
 800a74e:	4652      	mov	r2, sl
 800a750:	4631      	mov	r1, r6
 800a752:	4628      	mov	r0, r5
 800a754:	47b8      	blx	r7
 800a756:	3001      	adds	r0, #1
 800a758:	f43f af41 	beq.w	800a5de <_printf_float+0xc2>
 800a75c:	f04f 0800 	mov.w	r8, #0
 800a760:	f104 091a 	add.w	r9, r4, #26
 800a764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a766:	3b01      	subs	r3, #1
 800a768:	4543      	cmp	r3, r8
 800a76a:	dc09      	bgt.n	800a780 <_printf_float+0x264>
 800a76c:	6823      	ldr	r3, [r4, #0]
 800a76e:	079b      	lsls	r3, r3, #30
 800a770:	f100 8105 	bmi.w	800a97e <_printf_float+0x462>
 800a774:	68e0      	ldr	r0, [r4, #12]
 800a776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a778:	4298      	cmp	r0, r3
 800a77a:	bfb8      	it	lt
 800a77c:	4618      	movlt	r0, r3
 800a77e:	e730      	b.n	800a5e2 <_printf_float+0xc6>
 800a780:	2301      	movs	r3, #1
 800a782:	464a      	mov	r2, r9
 800a784:	4631      	mov	r1, r6
 800a786:	4628      	mov	r0, r5
 800a788:	47b8      	blx	r7
 800a78a:	3001      	adds	r0, #1
 800a78c:	f43f af27 	beq.w	800a5de <_printf_float+0xc2>
 800a790:	f108 0801 	add.w	r8, r8, #1
 800a794:	e7e6      	b.n	800a764 <_printf_float+0x248>
 800a796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a798:	2b00      	cmp	r3, #0
 800a79a:	dc39      	bgt.n	800a810 <_printf_float+0x2f4>
 800a79c:	4a1b      	ldr	r2, [pc, #108]	; (800a80c <_printf_float+0x2f0>)
 800a79e:	2301      	movs	r3, #1
 800a7a0:	4631      	mov	r1, r6
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	47b8      	blx	r7
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	f43f af19 	beq.w	800a5de <_printf_float+0xc2>
 800a7ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	d102      	bne.n	800a7ba <_printf_float+0x29e>
 800a7b4:	6823      	ldr	r3, [r4, #0]
 800a7b6:	07d9      	lsls	r1, r3, #31
 800a7b8:	d5d8      	bpl.n	800a76c <_printf_float+0x250>
 800a7ba:	ee18 3a10 	vmov	r3, s16
 800a7be:	4652      	mov	r2, sl
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	47b8      	blx	r7
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	f43f af09 	beq.w	800a5de <_printf_float+0xc2>
 800a7cc:	f04f 0900 	mov.w	r9, #0
 800a7d0:	f104 0a1a 	add.w	sl, r4, #26
 800a7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d6:	425b      	negs	r3, r3
 800a7d8:	454b      	cmp	r3, r9
 800a7da:	dc01      	bgt.n	800a7e0 <_printf_float+0x2c4>
 800a7dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7de:	e792      	b.n	800a706 <_printf_float+0x1ea>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	4652      	mov	r2, sl
 800a7e4:	4631      	mov	r1, r6
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	47b8      	blx	r7
 800a7ea:	3001      	adds	r0, #1
 800a7ec:	f43f aef7 	beq.w	800a5de <_printf_float+0xc2>
 800a7f0:	f109 0901 	add.w	r9, r9, #1
 800a7f4:	e7ee      	b.n	800a7d4 <_printf_float+0x2b8>
 800a7f6:	bf00      	nop
 800a7f8:	7fefffff 	.word	0x7fefffff
 800a7fc:	0800eda0 	.word	0x0800eda0
 800a800:	0800eda4 	.word	0x0800eda4
 800a804:	0800edac 	.word	0x0800edac
 800a808:	0800eda8 	.word	0x0800eda8
 800a80c:	0800edb0 	.word	0x0800edb0
 800a810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a812:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a814:	429a      	cmp	r2, r3
 800a816:	bfa8      	it	ge
 800a818:	461a      	movge	r2, r3
 800a81a:	2a00      	cmp	r2, #0
 800a81c:	4691      	mov	r9, r2
 800a81e:	dc37      	bgt.n	800a890 <_printf_float+0x374>
 800a820:	f04f 0b00 	mov.w	fp, #0
 800a824:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a828:	f104 021a 	add.w	r2, r4, #26
 800a82c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a82e:	9305      	str	r3, [sp, #20]
 800a830:	eba3 0309 	sub.w	r3, r3, r9
 800a834:	455b      	cmp	r3, fp
 800a836:	dc33      	bgt.n	800a8a0 <_printf_float+0x384>
 800a838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a83c:	429a      	cmp	r2, r3
 800a83e:	db3b      	blt.n	800a8b8 <_printf_float+0x39c>
 800a840:	6823      	ldr	r3, [r4, #0]
 800a842:	07da      	lsls	r2, r3, #31
 800a844:	d438      	bmi.n	800a8b8 <_printf_float+0x39c>
 800a846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a848:	9b05      	ldr	r3, [sp, #20]
 800a84a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	eba2 0901 	sub.w	r9, r2, r1
 800a852:	4599      	cmp	r9, r3
 800a854:	bfa8      	it	ge
 800a856:	4699      	movge	r9, r3
 800a858:	f1b9 0f00 	cmp.w	r9, #0
 800a85c:	dc35      	bgt.n	800a8ca <_printf_float+0x3ae>
 800a85e:	f04f 0800 	mov.w	r8, #0
 800a862:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a866:	f104 0a1a 	add.w	sl, r4, #26
 800a86a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a86e:	1a9b      	subs	r3, r3, r2
 800a870:	eba3 0309 	sub.w	r3, r3, r9
 800a874:	4543      	cmp	r3, r8
 800a876:	f77f af79 	ble.w	800a76c <_printf_float+0x250>
 800a87a:	2301      	movs	r3, #1
 800a87c:	4652      	mov	r2, sl
 800a87e:	4631      	mov	r1, r6
 800a880:	4628      	mov	r0, r5
 800a882:	47b8      	blx	r7
 800a884:	3001      	adds	r0, #1
 800a886:	f43f aeaa 	beq.w	800a5de <_printf_float+0xc2>
 800a88a:	f108 0801 	add.w	r8, r8, #1
 800a88e:	e7ec      	b.n	800a86a <_printf_float+0x34e>
 800a890:	4613      	mov	r3, r2
 800a892:	4631      	mov	r1, r6
 800a894:	4642      	mov	r2, r8
 800a896:	4628      	mov	r0, r5
 800a898:	47b8      	blx	r7
 800a89a:	3001      	adds	r0, #1
 800a89c:	d1c0      	bne.n	800a820 <_printf_float+0x304>
 800a89e:	e69e      	b.n	800a5de <_printf_float+0xc2>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	4631      	mov	r1, r6
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	9205      	str	r2, [sp, #20]
 800a8a8:	47b8      	blx	r7
 800a8aa:	3001      	adds	r0, #1
 800a8ac:	f43f ae97 	beq.w	800a5de <_printf_float+0xc2>
 800a8b0:	9a05      	ldr	r2, [sp, #20]
 800a8b2:	f10b 0b01 	add.w	fp, fp, #1
 800a8b6:	e7b9      	b.n	800a82c <_printf_float+0x310>
 800a8b8:	ee18 3a10 	vmov	r3, s16
 800a8bc:	4652      	mov	r2, sl
 800a8be:	4631      	mov	r1, r6
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	47b8      	blx	r7
 800a8c4:	3001      	adds	r0, #1
 800a8c6:	d1be      	bne.n	800a846 <_printf_float+0x32a>
 800a8c8:	e689      	b.n	800a5de <_printf_float+0xc2>
 800a8ca:	9a05      	ldr	r2, [sp, #20]
 800a8cc:	464b      	mov	r3, r9
 800a8ce:	4442      	add	r2, r8
 800a8d0:	4631      	mov	r1, r6
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	47b8      	blx	r7
 800a8d6:	3001      	adds	r0, #1
 800a8d8:	d1c1      	bne.n	800a85e <_printf_float+0x342>
 800a8da:	e680      	b.n	800a5de <_printf_float+0xc2>
 800a8dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8de:	2a01      	cmp	r2, #1
 800a8e0:	dc01      	bgt.n	800a8e6 <_printf_float+0x3ca>
 800a8e2:	07db      	lsls	r3, r3, #31
 800a8e4:	d538      	bpl.n	800a958 <_printf_float+0x43c>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	4642      	mov	r2, r8
 800a8ea:	4631      	mov	r1, r6
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	47b8      	blx	r7
 800a8f0:	3001      	adds	r0, #1
 800a8f2:	f43f ae74 	beq.w	800a5de <_printf_float+0xc2>
 800a8f6:	ee18 3a10 	vmov	r3, s16
 800a8fa:	4652      	mov	r2, sl
 800a8fc:	4631      	mov	r1, r6
 800a8fe:	4628      	mov	r0, r5
 800a900:	47b8      	blx	r7
 800a902:	3001      	adds	r0, #1
 800a904:	f43f ae6b 	beq.w	800a5de <_printf_float+0xc2>
 800a908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a90c:	2200      	movs	r2, #0
 800a90e:	2300      	movs	r3, #0
 800a910:	f7f6 f8da 	bl	8000ac8 <__aeabi_dcmpeq>
 800a914:	b9d8      	cbnz	r0, 800a94e <_printf_float+0x432>
 800a916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a918:	f108 0201 	add.w	r2, r8, #1
 800a91c:	3b01      	subs	r3, #1
 800a91e:	4631      	mov	r1, r6
 800a920:	4628      	mov	r0, r5
 800a922:	47b8      	blx	r7
 800a924:	3001      	adds	r0, #1
 800a926:	d10e      	bne.n	800a946 <_printf_float+0x42a>
 800a928:	e659      	b.n	800a5de <_printf_float+0xc2>
 800a92a:	2301      	movs	r3, #1
 800a92c:	4652      	mov	r2, sl
 800a92e:	4631      	mov	r1, r6
 800a930:	4628      	mov	r0, r5
 800a932:	47b8      	blx	r7
 800a934:	3001      	adds	r0, #1
 800a936:	f43f ae52 	beq.w	800a5de <_printf_float+0xc2>
 800a93a:	f108 0801 	add.w	r8, r8, #1
 800a93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a940:	3b01      	subs	r3, #1
 800a942:	4543      	cmp	r3, r8
 800a944:	dcf1      	bgt.n	800a92a <_printf_float+0x40e>
 800a946:	464b      	mov	r3, r9
 800a948:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a94c:	e6dc      	b.n	800a708 <_printf_float+0x1ec>
 800a94e:	f04f 0800 	mov.w	r8, #0
 800a952:	f104 0a1a 	add.w	sl, r4, #26
 800a956:	e7f2      	b.n	800a93e <_printf_float+0x422>
 800a958:	2301      	movs	r3, #1
 800a95a:	4642      	mov	r2, r8
 800a95c:	e7df      	b.n	800a91e <_printf_float+0x402>
 800a95e:	2301      	movs	r3, #1
 800a960:	464a      	mov	r2, r9
 800a962:	4631      	mov	r1, r6
 800a964:	4628      	mov	r0, r5
 800a966:	47b8      	blx	r7
 800a968:	3001      	adds	r0, #1
 800a96a:	f43f ae38 	beq.w	800a5de <_printf_float+0xc2>
 800a96e:	f108 0801 	add.w	r8, r8, #1
 800a972:	68e3      	ldr	r3, [r4, #12]
 800a974:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a976:	1a5b      	subs	r3, r3, r1
 800a978:	4543      	cmp	r3, r8
 800a97a:	dcf0      	bgt.n	800a95e <_printf_float+0x442>
 800a97c:	e6fa      	b.n	800a774 <_printf_float+0x258>
 800a97e:	f04f 0800 	mov.w	r8, #0
 800a982:	f104 0919 	add.w	r9, r4, #25
 800a986:	e7f4      	b.n	800a972 <_printf_float+0x456>

0800a988 <_printf_common>:
 800a988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a98c:	4616      	mov	r6, r2
 800a98e:	4699      	mov	r9, r3
 800a990:	688a      	ldr	r2, [r1, #8]
 800a992:	690b      	ldr	r3, [r1, #16]
 800a994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a998:	4293      	cmp	r3, r2
 800a99a:	bfb8      	it	lt
 800a99c:	4613      	movlt	r3, r2
 800a99e:	6033      	str	r3, [r6, #0]
 800a9a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9a4:	4607      	mov	r7, r0
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	b10a      	cbz	r2, 800a9ae <_printf_common+0x26>
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	6033      	str	r3, [r6, #0]
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	0699      	lsls	r1, r3, #26
 800a9b2:	bf42      	ittt	mi
 800a9b4:	6833      	ldrmi	r3, [r6, #0]
 800a9b6:	3302      	addmi	r3, #2
 800a9b8:	6033      	strmi	r3, [r6, #0]
 800a9ba:	6825      	ldr	r5, [r4, #0]
 800a9bc:	f015 0506 	ands.w	r5, r5, #6
 800a9c0:	d106      	bne.n	800a9d0 <_printf_common+0x48>
 800a9c2:	f104 0a19 	add.w	sl, r4, #25
 800a9c6:	68e3      	ldr	r3, [r4, #12]
 800a9c8:	6832      	ldr	r2, [r6, #0]
 800a9ca:	1a9b      	subs	r3, r3, r2
 800a9cc:	42ab      	cmp	r3, r5
 800a9ce:	dc26      	bgt.n	800aa1e <_printf_common+0x96>
 800a9d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9d4:	1e13      	subs	r3, r2, #0
 800a9d6:	6822      	ldr	r2, [r4, #0]
 800a9d8:	bf18      	it	ne
 800a9da:	2301      	movne	r3, #1
 800a9dc:	0692      	lsls	r2, r2, #26
 800a9de:	d42b      	bmi.n	800aa38 <_printf_common+0xb0>
 800a9e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9e4:	4649      	mov	r1, r9
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	47c0      	blx	r8
 800a9ea:	3001      	adds	r0, #1
 800a9ec:	d01e      	beq.n	800aa2c <_printf_common+0xa4>
 800a9ee:	6823      	ldr	r3, [r4, #0]
 800a9f0:	68e5      	ldr	r5, [r4, #12]
 800a9f2:	6832      	ldr	r2, [r6, #0]
 800a9f4:	f003 0306 	and.w	r3, r3, #6
 800a9f8:	2b04      	cmp	r3, #4
 800a9fa:	bf08      	it	eq
 800a9fc:	1aad      	subeq	r5, r5, r2
 800a9fe:	68a3      	ldr	r3, [r4, #8]
 800aa00:	6922      	ldr	r2, [r4, #16]
 800aa02:	bf0c      	ite	eq
 800aa04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa08:	2500      	movne	r5, #0
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	bfc4      	itt	gt
 800aa0e:	1a9b      	subgt	r3, r3, r2
 800aa10:	18ed      	addgt	r5, r5, r3
 800aa12:	2600      	movs	r6, #0
 800aa14:	341a      	adds	r4, #26
 800aa16:	42b5      	cmp	r5, r6
 800aa18:	d11a      	bne.n	800aa50 <_printf_common+0xc8>
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	e008      	b.n	800aa30 <_printf_common+0xa8>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	4652      	mov	r2, sl
 800aa22:	4649      	mov	r1, r9
 800aa24:	4638      	mov	r0, r7
 800aa26:	47c0      	blx	r8
 800aa28:	3001      	adds	r0, #1
 800aa2a:	d103      	bne.n	800aa34 <_printf_common+0xac>
 800aa2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa34:	3501      	adds	r5, #1
 800aa36:	e7c6      	b.n	800a9c6 <_printf_common+0x3e>
 800aa38:	18e1      	adds	r1, r4, r3
 800aa3a:	1c5a      	adds	r2, r3, #1
 800aa3c:	2030      	movs	r0, #48	; 0x30
 800aa3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa42:	4422      	add	r2, r4
 800aa44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa4c:	3302      	adds	r3, #2
 800aa4e:	e7c7      	b.n	800a9e0 <_printf_common+0x58>
 800aa50:	2301      	movs	r3, #1
 800aa52:	4622      	mov	r2, r4
 800aa54:	4649      	mov	r1, r9
 800aa56:	4638      	mov	r0, r7
 800aa58:	47c0      	blx	r8
 800aa5a:	3001      	adds	r0, #1
 800aa5c:	d0e6      	beq.n	800aa2c <_printf_common+0xa4>
 800aa5e:	3601      	adds	r6, #1
 800aa60:	e7d9      	b.n	800aa16 <_printf_common+0x8e>
	...

0800aa64 <_printf_i>:
 800aa64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa68:	460c      	mov	r4, r1
 800aa6a:	4691      	mov	r9, r2
 800aa6c:	7e27      	ldrb	r7, [r4, #24]
 800aa6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa70:	2f78      	cmp	r7, #120	; 0x78
 800aa72:	4680      	mov	r8, r0
 800aa74:	469a      	mov	sl, r3
 800aa76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa7a:	d807      	bhi.n	800aa8c <_printf_i+0x28>
 800aa7c:	2f62      	cmp	r7, #98	; 0x62
 800aa7e:	d80a      	bhi.n	800aa96 <_printf_i+0x32>
 800aa80:	2f00      	cmp	r7, #0
 800aa82:	f000 80d8 	beq.w	800ac36 <_printf_i+0x1d2>
 800aa86:	2f58      	cmp	r7, #88	; 0x58
 800aa88:	f000 80a3 	beq.w	800abd2 <_printf_i+0x16e>
 800aa8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aa90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa94:	e03a      	b.n	800ab0c <_printf_i+0xa8>
 800aa96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa9a:	2b15      	cmp	r3, #21
 800aa9c:	d8f6      	bhi.n	800aa8c <_printf_i+0x28>
 800aa9e:	a001      	add	r0, pc, #4	; (adr r0, 800aaa4 <_printf_i+0x40>)
 800aaa0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aaa4:	0800aafd 	.word	0x0800aafd
 800aaa8:	0800ab11 	.word	0x0800ab11
 800aaac:	0800aa8d 	.word	0x0800aa8d
 800aab0:	0800aa8d 	.word	0x0800aa8d
 800aab4:	0800aa8d 	.word	0x0800aa8d
 800aab8:	0800aa8d 	.word	0x0800aa8d
 800aabc:	0800ab11 	.word	0x0800ab11
 800aac0:	0800aa8d 	.word	0x0800aa8d
 800aac4:	0800aa8d 	.word	0x0800aa8d
 800aac8:	0800aa8d 	.word	0x0800aa8d
 800aacc:	0800aa8d 	.word	0x0800aa8d
 800aad0:	0800ac1d 	.word	0x0800ac1d
 800aad4:	0800ab41 	.word	0x0800ab41
 800aad8:	0800abff 	.word	0x0800abff
 800aadc:	0800aa8d 	.word	0x0800aa8d
 800aae0:	0800aa8d 	.word	0x0800aa8d
 800aae4:	0800ac3f 	.word	0x0800ac3f
 800aae8:	0800aa8d 	.word	0x0800aa8d
 800aaec:	0800ab41 	.word	0x0800ab41
 800aaf0:	0800aa8d 	.word	0x0800aa8d
 800aaf4:	0800aa8d 	.word	0x0800aa8d
 800aaf8:	0800ac07 	.word	0x0800ac07
 800aafc:	680b      	ldr	r3, [r1, #0]
 800aafe:	1d1a      	adds	r2, r3, #4
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	600a      	str	r2, [r1, #0]
 800ab04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e0a3      	b.n	800ac58 <_printf_i+0x1f4>
 800ab10:	6825      	ldr	r5, [r4, #0]
 800ab12:	6808      	ldr	r0, [r1, #0]
 800ab14:	062e      	lsls	r6, r5, #24
 800ab16:	f100 0304 	add.w	r3, r0, #4
 800ab1a:	d50a      	bpl.n	800ab32 <_printf_i+0xce>
 800ab1c:	6805      	ldr	r5, [r0, #0]
 800ab1e:	600b      	str	r3, [r1, #0]
 800ab20:	2d00      	cmp	r5, #0
 800ab22:	da03      	bge.n	800ab2c <_printf_i+0xc8>
 800ab24:	232d      	movs	r3, #45	; 0x2d
 800ab26:	426d      	negs	r5, r5
 800ab28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab2c:	485e      	ldr	r0, [pc, #376]	; (800aca8 <_printf_i+0x244>)
 800ab2e:	230a      	movs	r3, #10
 800ab30:	e019      	b.n	800ab66 <_printf_i+0x102>
 800ab32:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ab36:	6805      	ldr	r5, [r0, #0]
 800ab38:	600b      	str	r3, [r1, #0]
 800ab3a:	bf18      	it	ne
 800ab3c:	b22d      	sxthne	r5, r5
 800ab3e:	e7ef      	b.n	800ab20 <_printf_i+0xbc>
 800ab40:	680b      	ldr	r3, [r1, #0]
 800ab42:	6825      	ldr	r5, [r4, #0]
 800ab44:	1d18      	adds	r0, r3, #4
 800ab46:	6008      	str	r0, [r1, #0]
 800ab48:	0628      	lsls	r0, r5, #24
 800ab4a:	d501      	bpl.n	800ab50 <_printf_i+0xec>
 800ab4c:	681d      	ldr	r5, [r3, #0]
 800ab4e:	e002      	b.n	800ab56 <_printf_i+0xf2>
 800ab50:	0669      	lsls	r1, r5, #25
 800ab52:	d5fb      	bpl.n	800ab4c <_printf_i+0xe8>
 800ab54:	881d      	ldrh	r5, [r3, #0]
 800ab56:	4854      	ldr	r0, [pc, #336]	; (800aca8 <_printf_i+0x244>)
 800ab58:	2f6f      	cmp	r7, #111	; 0x6f
 800ab5a:	bf0c      	ite	eq
 800ab5c:	2308      	moveq	r3, #8
 800ab5e:	230a      	movne	r3, #10
 800ab60:	2100      	movs	r1, #0
 800ab62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab66:	6866      	ldr	r6, [r4, #4]
 800ab68:	60a6      	str	r6, [r4, #8]
 800ab6a:	2e00      	cmp	r6, #0
 800ab6c:	bfa2      	ittt	ge
 800ab6e:	6821      	ldrge	r1, [r4, #0]
 800ab70:	f021 0104 	bicge.w	r1, r1, #4
 800ab74:	6021      	strge	r1, [r4, #0]
 800ab76:	b90d      	cbnz	r5, 800ab7c <_printf_i+0x118>
 800ab78:	2e00      	cmp	r6, #0
 800ab7a:	d04d      	beq.n	800ac18 <_printf_i+0x1b4>
 800ab7c:	4616      	mov	r6, r2
 800ab7e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab82:	fb03 5711 	mls	r7, r3, r1, r5
 800ab86:	5dc7      	ldrb	r7, [r0, r7]
 800ab88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab8c:	462f      	mov	r7, r5
 800ab8e:	42bb      	cmp	r3, r7
 800ab90:	460d      	mov	r5, r1
 800ab92:	d9f4      	bls.n	800ab7e <_printf_i+0x11a>
 800ab94:	2b08      	cmp	r3, #8
 800ab96:	d10b      	bne.n	800abb0 <_printf_i+0x14c>
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	07df      	lsls	r7, r3, #31
 800ab9c:	d508      	bpl.n	800abb0 <_printf_i+0x14c>
 800ab9e:	6923      	ldr	r3, [r4, #16]
 800aba0:	6861      	ldr	r1, [r4, #4]
 800aba2:	4299      	cmp	r1, r3
 800aba4:	bfde      	ittt	le
 800aba6:	2330      	movle	r3, #48	; 0x30
 800aba8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abac:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800abb0:	1b92      	subs	r2, r2, r6
 800abb2:	6122      	str	r2, [r4, #16]
 800abb4:	f8cd a000 	str.w	sl, [sp]
 800abb8:	464b      	mov	r3, r9
 800abba:	aa03      	add	r2, sp, #12
 800abbc:	4621      	mov	r1, r4
 800abbe:	4640      	mov	r0, r8
 800abc0:	f7ff fee2 	bl	800a988 <_printf_common>
 800abc4:	3001      	adds	r0, #1
 800abc6:	d14c      	bne.n	800ac62 <_printf_i+0x1fe>
 800abc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abcc:	b004      	add	sp, #16
 800abce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abd2:	4835      	ldr	r0, [pc, #212]	; (800aca8 <_printf_i+0x244>)
 800abd4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800abd8:	6823      	ldr	r3, [r4, #0]
 800abda:	680e      	ldr	r6, [r1, #0]
 800abdc:	061f      	lsls	r7, r3, #24
 800abde:	f856 5b04 	ldr.w	r5, [r6], #4
 800abe2:	600e      	str	r6, [r1, #0]
 800abe4:	d514      	bpl.n	800ac10 <_printf_i+0x1ac>
 800abe6:	07d9      	lsls	r1, r3, #31
 800abe8:	bf44      	itt	mi
 800abea:	f043 0320 	orrmi.w	r3, r3, #32
 800abee:	6023      	strmi	r3, [r4, #0]
 800abf0:	b91d      	cbnz	r5, 800abfa <_printf_i+0x196>
 800abf2:	6823      	ldr	r3, [r4, #0]
 800abf4:	f023 0320 	bic.w	r3, r3, #32
 800abf8:	6023      	str	r3, [r4, #0]
 800abfa:	2310      	movs	r3, #16
 800abfc:	e7b0      	b.n	800ab60 <_printf_i+0xfc>
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	f043 0320 	orr.w	r3, r3, #32
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	2378      	movs	r3, #120	; 0x78
 800ac08:	4828      	ldr	r0, [pc, #160]	; (800acac <_printf_i+0x248>)
 800ac0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac0e:	e7e3      	b.n	800abd8 <_printf_i+0x174>
 800ac10:	065e      	lsls	r6, r3, #25
 800ac12:	bf48      	it	mi
 800ac14:	b2ad      	uxthmi	r5, r5
 800ac16:	e7e6      	b.n	800abe6 <_printf_i+0x182>
 800ac18:	4616      	mov	r6, r2
 800ac1a:	e7bb      	b.n	800ab94 <_printf_i+0x130>
 800ac1c:	680b      	ldr	r3, [r1, #0]
 800ac1e:	6826      	ldr	r6, [r4, #0]
 800ac20:	6960      	ldr	r0, [r4, #20]
 800ac22:	1d1d      	adds	r5, r3, #4
 800ac24:	600d      	str	r5, [r1, #0]
 800ac26:	0635      	lsls	r5, r6, #24
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	d501      	bpl.n	800ac30 <_printf_i+0x1cc>
 800ac2c:	6018      	str	r0, [r3, #0]
 800ac2e:	e002      	b.n	800ac36 <_printf_i+0x1d2>
 800ac30:	0671      	lsls	r1, r6, #25
 800ac32:	d5fb      	bpl.n	800ac2c <_printf_i+0x1c8>
 800ac34:	8018      	strh	r0, [r3, #0]
 800ac36:	2300      	movs	r3, #0
 800ac38:	6123      	str	r3, [r4, #16]
 800ac3a:	4616      	mov	r6, r2
 800ac3c:	e7ba      	b.n	800abb4 <_printf_i+0x150>
 800ac3e:	680b      	ldr	r3, [r1, #0]
 800ac40:	1d1a      	adds	r2, r3, #4
 800ac42:	600a      	str	r2, [r1, #0]
 800ac44:	681e      	ldr	r6, [r3, #0]
 800ac46:	6862      	ldr	r2, [r4, #4]
 800ac48:	2100      	movs	r1, #0
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f7f5 fac8 	bl	80001e0 <memchr>
 800ac50:	b108      	cbz	r0, 800ac56 <_printf_i+0x1f2>
 800ac52:	1b80      	subs	r0, r0, r6
 800ac54:	6060      	str	r0, [r4, #4]
 800ac56:	6863      	ldr	r3, [r4, #4]
 800ac58:	6123      	str	r3, [r4, #16]
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac60:	e7a8      	b.n	800abb4 <_printf_i+0x150>
 800ac62:	6923      	ldr	r3, [r4, #16]
 800ac64:	4632      	mov	r2, r6
 800ac66:	4649      	mov	r1, r9
 800ac68:	4640      	mov	r0, r8
 800ac6a:	47d0      	blx	sl
 800ac6c:	3001      	adds	r0, #1
 800ac6e:	d0ab      	beq.n	800abc8 <_printf_i+0x164>
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	079b      	lsls	r3, r3, #30
 800ac74:	d413      	bmi.n	800ac9e <_printf_i+0x23a>
 800ac76:	68e0      	ldr	r0, [r4, #12]
 800ac78:	9b03      	ldr	r3, [sp, #12]
 800ac7a:	4298      	cmp	r0, r3
 800ac7c:	bfb8      	it	lt
 800ac7e:	4618      	movlt	r0, r3
 800ac80:	e7a4      	b.n	800abcc <_printf_i+0x168>
 800ac82:	2301      	movs	r3, #1
 800ac84:	4632      	mov	r2, r6
 800ac86:	4649      	mov	r1, r9
 800ac88:	4640      	mov	r0, r8
 800ac8a:	47d0      	blx	sl
 800ac8c:	3001      	adds	r0, #1
 800ac8e:	d09b      	beq.n	800abc8 <_printf_i+0x164>
 800ac90:	3501      	adds	r5, #1
 800ac92:	68e3      	ldr	r3, [r4, #12]
 800ac94:	9903      	ldr	r1, [sp, #12]
 800ac96:	1a5b      	subs	r3, r3, r1
 800ac98:	42ab      	cmp	r3, r5
 800ac9a:	dcf2      	bgt.n	800ac82 <_printf_i+0x21e>
 800ac9c:	e7eb      	b.n	800ac76 <_printf_i+0x212>
 800ac9e:	2500      	movs	r5, #0
 800aca0:	f104 0619 	add.w	r6, r4, #25
 800aca4:	e7f5      	b.n	800ac92 <_printf_i+0x22e>
 800aca6:	bf00      	nop
 800aca8:	0800edb2 	.word	0x0800edb2
 800acac:	0800edc3 	.word	0x0800edc3

0800acb0 <_scanf_float>:
 800acb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb4:	b087      	sub	sp, #28
 800acb6:	4617      	mov	r7, r2
 800acb8:	9303      	str	r3, [sp, #12]
 800acba:	688b      	ldr	r3, [r1, #8]
 800acbc:	1e5a      	subs	r2, r3, #1
 800acbe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800acc2:	bf83      	ittte	hi
 800acc4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800acc8:	195b      	addhi	r3, r3, r5
 800acca:	9302      	strhi	r3, [sp, #8]
 800accc:	2300      	movls	r3, #0
 800acce:	bf86      	itte	hi
 800acd0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800acd4:	608b      	strhi	r3, [r1, #8]
 800acd6:	9302      	strls	r3, [sp, #8]
 800acd8:	680b      	ldr	r3, [r1, #0]
 800acda:	468b      	mov	fp, r1
 800acdc:	2500      	movs	r5, #0
 800acde:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ace2:	f84b 3b1c 	str.w	r3, [fp], #28
 800ace6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800acea:	4680      	mov	r8, r0
 800acec:	460c      	mov	r4, r1
 800acee:	465e      	mov	r6, fp
 800acf0:	46aa      	mov	sl, r5
 800acf2:	46a9      	mov	r9, r5
 800acf4:	9501      	str	r5, [sp, #4]
 800acf6:	68a2      	ldr	r2, [r4, #8]
 800acf8:	b152      	cbz	r2, 800ad10 <_scanf_float+0x60>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2b4e      	cmp	r3, #78	; 0x4e
 800ad00:	d864      	bhi.n	800adcc <_scanf_float+0x11c>
 800ad02:	2b40      	cmp	r3, #64	; 0x40
 800ad04:	d83c      	bhi.n	800ad80 <_scanf_float+0xd0>
 800ad06:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ad0a:	b2c8      	uxtb	r0, r1
 800ad0c:	280e      	cmp	r0, #14
 800ad0e:	d93a      	bls.n	800ad86 <_scanf_float+0xd6>
 800ad10:	f1b9 0f00 	cmp.w	r9, #0
 800ad14:	d003      	beq.n	800ad1e <_scanf_float+0x6e>
 800ad16:	6823      	ldr	r3, [r4, #0]
 800ad18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad1c:	6023      	str	r3, [r4, #0]
 800ad1e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ad22:	f1ba 0f01 	cmp.w	sl, #1
 800ad26:	f200 8113 	bhi.w	800af50 <_scanf_float+0x2a0>
 800ad2a:	455e      	cmp	r6, fp
 800ad2c:	f200 8105 	bhi.w	800af3a <_scanf_float+0x28a>
 800ad30:	2501      	movs	r5, #1
 800ad32:	4628      	mov	r0, r5
 800ad34:	b007      	add	sp, #28
 800ad36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad3a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ad3e:	2a0d      	cmp	r2, #13
 800ad40:	d8e6      	bhi.n	800ad10 <_scanf_float+0x60>
 800ad42:	a101      	add	r1, pc, #4	; (adr r1, 800ad48 <_scanf_float+0x98>)
 800ad44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ad48:	0800ae87 	.word	0x0800ae87
 800ad4c:	0800ad11 	.word	0x0800ad11
 800ad50:	0800ad11 	.word	0x0800ad11
 800ad54:	0800ad11 	.word	0x0800ad11
 800ad58:	0800aee7 	.word	0x0800aee7
 800ad5c:	0800aebf 	.word	0x0800aebf
 800ad60:	0800ad11 	.word	0x0800ad11
 800ad64:	0800ad11 	.word	0x0800ad11
 800ad68:	0800ae95 	.word	0x0800ae95
 800ad6c:	0800ad11 	.word	0x0800ad11
 800ad70:	0800ad11 	.word	0x0800ad11
 800ad74:	0800ad11 	.word	0x0800ad11
 800ad78:	0800ad11 	.word	0x0800ad11
 800ad7c:	0800ae4d 	.word	0x0800ae4d
 800ad80:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ad84:	e7db      	b.n	800ad3e <_scanf_float+0x8e>
 800ad86:	290e      	cmp	r1, #14
 800ad88:	d8c2      	bhi.n	800ad10 <_scanf_float+0x60>
 800ad8a:	a001      	add	r0, pc, #4	; (adr r0, 800ad90 <_scanf_float+0xe0>)
 800ad8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ad90:	0800ae3f 	.word	0x0800ae3f
 800ad94:	0800ad11 	.word	0x0800ad11
 800ad98:	0800ae3f 	.word	0x0800ae3f
 800ad9c:	0800aed3 	.word	0x0800aed3
 800ada0:	0800ad11 	.word	0x0800ad11
 800ada4:	0800aded 	.word	0x0800aded
 800ada8:	0800ae29 	.word	0x0800ae29
 800adac:	0800ae29 	.word	0x0800ae29
 800adb0:	0800ae29 	.word	0x0800ae29
 800adb4:	0800ae29 	.word	0x0800ae29
 800adb8:	0800ae29 	.word	0x0800ae29
 800adbc:	0800ae29 	.word	0x0800ae29
 800adc0:	0800ae29 	.word	0x0800ae29
 800adc4:	0800ae29 	.word	0x0800ae29
 800adc8:	0800ae29 	.word	0x0800ae29
 800adcc:	2b6e      	cmp	r3, #110	; 0x6e
 800adce:	d809      	bhi.n	800ade4 <_scanf_float+0x134>
 800add0:	2b60      	cmp	r3, #96	; 0x60
 800add2:	d8b2      	bhi.n	800ad3a <_scanf_float+0x8a>
 800add4:	2b54      	cmp	r3, #84	; 0x54
 800add6:	d077      	beq.n	800aec8 <_scanf_float+0x218>
 800add8:	2b59      	cmp	r3, #89	; 0x59
 800adda:	d199      	bne.n	800ad10 <_scanf_float+0x60>
 800addc:	2d07      	cmp	r5, #7
 800adde:	d197      	bne.n	800ad10 <_scanf_float+0x60>
 800ade0:	2508      	movs	r5, #8
 800ade2:	e029      	b.n	800ae38 <_scanf_float+0x188>
 800ade4:	2b74      	cmp	r3, #116	; 0x74
 800ade6:	d06f      	beq.n	800aec8 <_scanf_float+0x218>
 800ade8:	2b79      	cmp	r3, #121	; 0x79
 800adea:	e7f6      	b.n	800adda <_scanf_float+0x12a>
 800adec:	6821      	ldr	r1, [r4, #0]
 800adee:	05c8      	lsls	r0, r1, #23
 800adf0:	d51a      	bpl.n	800ae28 <_scanf_float+0x178>
 800adf2:	9b02      	ldr	r3, [sp, #8]
 800adf4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800adf8:	6021      	str	r1, [r4, #0]
 800adfa:	f109 0901 	add.w	r9, r9, #1
 800adfe:	b11b      	cbz	r3, 800ae08 <_scanf_float+0x158>
 800ae00:	3b01      	subs	r3, #1
 800ae02:	3201      	adds	r2, #1
 800ae04:	9302      	str	r3, [sp, #8]
 800ae06:	60a2      	str	r2, [r4, #8]
 800ae08:	68a3      	ldr	r3, [r4, #8]
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	60a3      	str	r3, [r4, #8]
 800ae0e:	6923      	ldr	r3, [r4, #16]
 800ae10:	3301      	adds	r3, #1
 800ae12:	6123      	str	r3, [r4, #16]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	3b01      	subs	r3, #1
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	607b      	str	r3, [r7, #4]
 800ae1c:	f340 8084 	ble.w	800af28 <_scanf_float+0x278>
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	3301      	adds	r3, #1
 800ae24:	603b      	str	r3, [r7, #0]
 800ae26:	e766      	b.n	800acf6 <_scanf_float+0x46>
 800ae28:	eb1a 0f05 	cmn.w	sl, r5
 800ae2c:	f47f af70 	bne.w	800ad10 <_scanf_float+0x60>
 800ae30:	6822      	ldr	r2, [r4, #0]
 800ae32:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ae36:	6022      	str	r2, [r4, #0]
 800ae38:	f806 3b01 	strb.w	r3, [r6], #1
 800ae3c:	e7e4      	b.n	800ae08 <_scanf_float+0x158>
 800ae3e:	6822      	ldr	r2, [r4, #0]
 800ae40:	0610      	lsls	r0, r2, #24
 800ae42:	f57f af65 	bpl.w	800ad10 <_scanf_float+0x60>
 800ae46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae4a:	e7f4      	b.n	800ae36 <_scanf_float+0x186>
 800ae4c:	f1ba 0f00 	cmp.w	sl, #0
 800ae50:	d10e      	bne.n	800ae70 <_scanf_float+0x1c0>
 800ae52:	f1b9 0f00 	cmp.w	r9, #0
 800ae56:	d10e      	bne.n	800ae76 <_scanf_float+0x1c6>
 800ae58:	6822      	ldr	r2, [r4, #0]
 800ae5a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ae5e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ae62:	d108      	bne.n	800ae76 <_scanf_float+0x1c6>
 800ae64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ae68:	6022      	str	r2, [r4, #0]
 800ae6a:	f04f 0a01 	mov.w	sl, #1
 800ae6e:	e7e3      	b.n	800ae38 <_scanf_float+0x188>
 800ae70:	f1ba 0f02 	cmp.w	sl, #2
 800ae74:	d055      	beq.n	800af22 <_scanf_float+0x272>
 800ae76:	2d01      	cmp	r5, #1
 800ae78:	d002      	beq.n	800ae80 <_scanf_float+0x1d0>
 800ae7a:	2d04      	cmp	r5, #4
 800ae7c:	f47f af48 	bne.w	800ad10 <_scanf_float+0x60>
 800ae80:	3501      	adds	r5, #1
 800ae82:	b2ed      	uxtb	r5, r5
 800ae84:	e7d8      	b.n	800ae38 <_scanf_float+0x188>
 800ae86:	f1ba 0f01 	cmp.w	sl, #1
 800ae8a:	f47f af41 	bne.w	800ad10 <_scanf_float+0x60>
 800ae8e:	f04f 0a02 	mov.w	sl, #2
 800ae92:	e7d1      	b.n	800ae38 <_scanf_float+0x188>
 800ae94:	b97d      	cbnz	r5, 800aeb6 <_scanf_float+0x206>
 800ae96:	f1b9 0f00 	cmp.w	r9, #0
 800ae9a:	f47f af3c 	bne.w	800ad16 <_scanf_float+0x66>
 800ae9e:	6822      	ldr	r2, [r4, #0]
 800aea0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aea4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aea8:	f47f af39 	bne.w	800ad1e <_scanf_float+0x6e>
 800aeac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aeb0:	6022      	str	r2, [r4, #0]
 800aeb2:	2501      	movs	r5, #1
 800aeb4:	e7c0      	b.n	800ae38 <_scanf_float+0x188>
 800aeb6:	2d03      	cmp	r5, #3
 800aeb8:	d0e2      	beq.n	800ae80 <_scanf_float+0x1d0>
 800aeba:	2d05      	cmp	r5, #5
 800aebc:	e7de      	b.n	800ae7c <_scanf_float+0x1cc>
 800aebe:	2d02      	cmp	r5, #2
 800aec0:	f47f af26 	bne.w	800ad10 <_scanf_float+0x60>
 800aec4:	2503      	movs	r5, #3
 800aec6:	e7b7      	b.n	800ae38 <_scanf_float+0x188>
 800aec8:	2d06      	cmp	r5, #6
 800aeca:	f47f af21 	bne.w	800ad10 <_scanf_float+0x60>
 800aece:	2507      	movs	r5, #7
 800aed0:	e7b2      	b.n	800ae38 <_scanf_float+0x188>
 800aed2:	6822      	ldr	r2, [r4, #0]
 800aed4:	0591      	lsls	r1, r2, #22
 800aed6:	f57f af1b 	bpl.w	800ad10 <_scanf_float+0x60>
 800aeda:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800aede:	6022      	str	r2, [r4, #0]
 800aee0:	f8cd 9004 	str.w	r9, [sp, #4]
 800aee4:	e7a8      	b.n	800ae38 <_scanf_float+0x188>
 800aee6:	6822      	ldr	r2, [r4, #0]
 800aee8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800aeec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aef0:	d006      	beq.n	800af00 <_scanf_float+0x250>
 800aef2:	0550      	lsls	r0, r2, #21
 800aef4:	f57f af0c 	bpl.w	800ad10 <_scanf_float+0x60>
 800aef8:	f1b9 0f00 	cmp.w	r9, #0
 800aefc:	f43f af0f 	beq.w	800ad1e <_scanf_float+0x6e>
 800af00:	0591      	lsls	r1, r2, #22
 800af02:	bf58      	it	pl
 800af04:	9901      	ldrpl	r1, [sp, #4]
 800af06:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af0a:	bf58      	it	pl
 800af0c:	eba9 0101 	subpl.w	r1, r9, r1
 800af10:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800af14:	bf58      	it	pl
 800af16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800af1a:	6022      	str	r2, [r4, #0]
 800af1c:	f04f 0900 	mov.w	r9, #0
 800af20:	e78a      	b.n	800ae38 <_scanf_float+0x188>
 800af22:	f04f 0a03 	mov.w	sl, #3
 800af26:	e787      	b.n	800ae38 <_scanf_float+0x188>
 800af28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800af2c:	4639      	mov	r1, r7
 800af2e:	4640      	mov	r0, r8
 800af30:	4798      	blx	r3
 800af32:	2800      	cmp	r0, #0
 800af34:	f43f aedf 	beq.w	800acf6 <_scanf_float+0x46>
 800af38:	e6ea      	b.n	800ad10 <_scanf_float+0x60>
 800af3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af42:	463a      	mov	r2, r7
 800af44:	4640      	mov	r0, r8
 800af46:	4798      	blx	r3
 800af48:	6923      	ldr	r3, [r4, #16]
 800af4a:	3b01      	subs	r3, #1
 800af4c:	6123      	str	r3, [r4, #16]
 800af4e:	e6ec      	b.n	800ad2a <_scanf_float+0x7a>
 800af50:	1e6b      	subs	r3, r5, #1
 800af52:	2b06      	cmp	r3, #6
 800af54:	d825      	bhi.n	800afa2 <_scanf_float+0x2f2>
 800af56:	2d02      	cmp	r5, #2
 800af58:	d836      	bhi.n	800afc8 <_scanf_float+0x318>
 800af5a:	455e      	cmp	r6, fp
 800af5c:	f67f aee8 	bls.w	800ad30 <_scanf_float+0x80>
 800af60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af68:	463a      	mov	r2, r7
 800af6a:	4640      	mov	r0, r8
 800af6c:	4798      	blx	r3
 800af6e:	6923      	ldr	r3, [r4, #16]
 800af70:	3b01      	subs	r3, #1
 800af72:	6123      	str	r3, [r4, #16]
 800af74:	e7f1      	b.n	800af5a <_scanf_float+0x2aa>
 800af76:	9802      	ldr	r0, [sp, #8]
 800af78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af7c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800af80:	9002      	str	r0, [sp, #8]
 800af82:	463a      	mov	r2, r7
 800af84:	4640      	mov	r0, r8
 800af86:	4798      	blx	r3
 800af88:	6923      	ldr	r3, [r4, #16]
 800af8a:	3b01      	subs	r3, #1
 800af8c:	6123      	str	r3, [r4, #16]
 800af8e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800af92:	fa5f fa8a 	uxtb.w	sl, sl
 800af96:	f1ba 0f02 	cmp.w	sl, #2
 800af9a:	d1ec      	bne.n	800af76 <_scanf_float+0x2c6>
 800af9c:	3d03      	subs	r5, #3
 800af9e:	b2ed      	uxtb	r5, r5
 800afa0:	1b76      	subs	r6, r6, r5
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	05da      	lsls	r2, r3, #23
 800afa6:	d52f      	bpl.n	800b008 <_scanf_float+0x358>
 800afa8:	055b      	lsls	r3, r3, #21
 800afaa:	d510      	bpl.n	800afce <_scanf_float+0x31e>
 800afac:	455e      	cmp	r6, fp
 800afae:	f67f aebf 	bls.w	800ad30 <_scanf_float+0x80>
 800afb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800afba:	463a      	mov	r2, r7
 800afbc:	4640      	mov	r0, r8
 800afbe:	4798      	blx	r3
 800afc0:	6923      	ldr	r3, [r4, #16]
 800afc2:	3b01      	subs	r3, #1
 800afc4:	6123      	str	r3, [r4, #16]
 800afc6:	e7f1      	b.n	800afac <_scanf_float+0x2fc>
 800afc8:	46aa      	mov	sl, r5
 800afca:	9602      	str	r6, [sp, #8]
 800afcc:	e7df      	b.n	800af8e <_scanf_float+0x2de>
 800afce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800afd2:	6923      	ldr	r3, [r4, #16]
 800afd4:	2965      	cmp	r1, #101	; 0x65
 800afd6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800afda:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800afde:	6123      	str	r3, [r4, #16]
 800afe0:	d00c      	beq.n	800affc <_scanf_float+0x34c>
 800afe2:	2945      	cmp	r1, #69	; 0x45
 800afe4:	d00a      	beq.n	800affc <_scanf_float+0x34c>
 800afe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afea:	463a      	mov	r2, r7
 800afec:	4640      	mov	r0, r8
 800afee:	4798      	blx	r3
 800aff0:	6923      	ldr	r3, [r4, #16]
 800aff2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aff6:	3b01      	subs	r3, #1
 800aff8:	1eb5      	subs	r5, r6, #2
 800affa:	6123      	str	r3, [r4, #16]
 800affc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b000:	463a      	mov	r2, r7
 800b002:	4640      	mov	r0, r8
 800b004:	4798      	blx	r3
 800b006:	462e      	mov	r6, r5
 800b008:	6825      	ldr	r5, [r4, #0]
 800b00a:	f015 0510 	ands.w	r5, r5, #16
 800b00e:	d158      	bne.n	800b0c2 <_scanf_float+0x412>
 800b010:	7035      	strb	r5, [r6, #0]
 800b012:	6823      	ldr	r3, [r4, #0]
 800b014:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b01c:	d11c      	bne.n	800b058 <_scanf_float+0x3a8>
 800b01e:	9b01      	ldr	r3, [sp, #4]
 800b020:	454b      	cmp	r3, r9
 800b022:	eba3 0209 	sub.w	r2, r3, r9
 800b026:	d124      	bne.n	800b072 <_scanf_float+0x3c2>
 800b028:	2200      	movs	r2, #0
 800b02a:	4659      	mov	r1, fp
 800b02c:	4640      	mov	r0, r8
 800b02e:	f000 fe9d 	bl	800bd6c <_strtod_r>
 800b032:	9b03      	ldr	r3, [sp, #12]
 800b034:	6821      	ldr	r1, [r4, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f011 0f02 	tst.w	r1, #2
 800b03c:	ec57 6b10 	vmov	r6, r7, d0
 800b040:	f103 0204 	add.w	r2, r3, #4
 800b044:	d020      	beq.n	800b088 <_scanf_float+0x3d8>
 800b046:	9903      	ldr	r1, [sp, #12]
 800b048:	600a      	str	r2, [r1, #0]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	e9c3 6700 	strd	r6, r7, [r3]
 800b050:	68e3      	ldr	r3, [r4, #12]
 800b052:	3301      	adds	r3, #1
 800b054:	60e3      	str	r3, [r4, #12]
 800b056:	e66c      	b.n	800ad32 <_scanf_float+0x82>
 800b058:	9b04      	ldr	r3, [sp, #16]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d0e4      	beq.n	800b028 <_scanf_float+0x378>
 800b05e:	9905      	ldr	r1, [sp, #20]
 800b060:	230a      	movs	r3, #10
 800b062:	462a      	mov	r2, r5
 800b064:	3101      	adds	r1, #1
 800b066:	4640      	mov	r0, r8
 800b068:	f000 ff0a 	bl	800be80 <_strtol_r>
 800b06c:	9b04      	ldr	r3, [sp, #16]
 800b06e:	9e05      	ldr	r6, [sp, #20]
 800b070:	1ac2      	subs	r2, r0, r3
 800b072:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b076:	429e      	cmp	r6, r3
 800b078:	bf28      	it	cs
 800b07a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b07e:	4912      	ldr	r1, [pc, #72]	; (800b0c8 <_scanf_float+0x418>)
 800b080:	4630      	mov	r0, r6
 800b082:	f000 f82b 	bl	800b0dc <siprintf>
 800b086:	e7cf      	b.n	800b028 <_scanf_float+0x378>
 800b088:	f011 0f04 	tst.w	r1, #4
 800b08c:	9903      	ldr	r1, [sp, #12]
 800b08e:	600a      	str	r2, [r1, #0]
 800b090:	d1db      	bne.n	800b04a <_scanf_float+0x39a>
 800b092:	f8d3 8000 	ldr.w	r8, [r3]
 800b096:	ee10 2a10 	vmov	r2, s0
 800b09a:	ee10 0a10 	vmov	r0, s0
 800b09e:	463b      	mov	r3, r7
 800b0a0:	4639      	mov	r1, r7
 800b0a2:	f7f5 fd43 	bl	8000b2c <__aeabi_dcmpun>
 800b0a6:	b128      	cbz	r0, 800b0b4 <_scanf_float+0x404>
 800b0a8:	4808      	ldr	r0, [pc, #32]	; (800b0cc <_scanf_float+0x41c>)
 800b0aa:	f000 f811 	bl	800b0d0 <nanf>
 800b0ae:	ed88 0a00 	vstr	s0, [r8]
 800b0b2:	e7cd      	b.n	800b050 <_scanf_float+0x3a0>
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	4639      	mov	r1, r7
 800b0b8:	f7f5 fd96 	bl	8000be8 <__aeabi_d2f>
 800b0bc:	f8c8 0000 	str.w	r0, [r8]
 800b0c0:	e7c6      	b.n	800b050 <_scanf_float+0x3a0>
 800b0c2:	2500      	movs	r5, #0
 800b0c4:	e635      	b.n	800ad32 <_scanf_float+0x82>
 800b0c6:	bf00      	nop
 800b0c8:	0800edd4 	.word	0x0800edd4
 800b0cc:	0800f1f0 	.word	0x0800f1f0

0800b0d0 <nanf>:
 800b0d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b0d8 <nanf+0x8>
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	7fc00000 	.word	0x7fc00000

0800b0dc <siprintf>:
 800b0dc:	b40e      	push	{r1, r2, r3}
 800b0de:	b500      	push	{lr}
 800b0e0:	b09c      	sub	sp, #112	; 0x70
 800b0e2:	ab1d      	add	r3, sp, #116	; 0x74
 800b0e4:	9002      	str	r0, [sp, #8]
 800b0e6:	9006      	str	r0, [sp, #24]
 800b0e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0ec:	4809      	ldr	r0, [pc, #36]	; (800b114 <siprintf+0x38>)
 800b0ee:	9107      	str	r1, [sp, #28]
 800b0f0:	9104      	str	r1, [sp, #16]
 800b0f2:	4909      	ldr	r1, [pc, #36]	; (800b118 <siprintf+0x3c>)
 800b0f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0f8:	9105      	str	r1, [sp, #20]
 800b0fa:	6800      	ldr	r0, [r0, #0]
 800b0fc:	9301      	str	r3, [sp, #4]
 800b0fe:	a902      	add	r1, sp, #8
 800b100:	f002 fe98 	bl	800de34 <_svfiprintf_r>
 800b104:	9b02      	ldr	r3, [sp, #8]
 800b106:	2200      	movs	r2, #0
 800b108:	701a      	strb	r2, [r3, #0]
 800b10a:	b01c      	add	sp, #112	; 0x70
 800b10c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b110:	b003      	add	sp, #12
 800b112:	4770      	bx	lr
 800b114:	2000001c 	.word	0x2000001c
 800b118:	ffff0208 	.word	0xffff0208

0800b11c <sulp>:
 800b11c:	b570      	push	{r4, r5, r6, lr}
 800b11e:	4604      	mov	r4, r0
 800b120:	460d      	mov	r5, r1
 800b122:	ec45 4b10 	vmov	d0, r4, r5
 800b126:	4616      	mov	r6, r2
 800b128:	f002 fc20 	bl	800d96c <__ulp>
 800b12c:	ec51 0b10 	vmov	r0, r1, d0
 800b130:	b17e      	cbz	r6, 800b152 <sulp+0x36>
 800b132:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b136:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	dd09      	ble.n	800b152 <sulp+0x36>
 800b13e:	051b      	lsls	r3, r3, #20
 800b140:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b144:	2400      	movs	r4, #0
 800b146:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b14a:	4622      	mov	r2, r4
 800b14c:	462b      	mov	r3, r5
 800b14e:	f7f5 fa53 	bl	80005f8 <__aeabi_dmul>
 800b152:	bd70      	pop	{r4, r5, r6, pc}
 800b154:	0000      	movs	r0, r0
	...

0800b158 <_strtod_l>:
 800b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15c:	b0a3      	sub	sp, #140	; 0x8c
 800b15e:	461f      	mov	r7, r3
 800b160:	2300      	movs	r3, #0
 800b162:	931e      	str	r3, [sp, #120]	; 0x78
 800b164:	4ba4      	ldr	r3, [pc, #656]	; (800b3f8 <_strtod_l+0x2a0>)
 800b166:	9219      	str	r2, [sp, #100]	; 0x64
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	9307      	str	r3, [sp, #28]
 800b16c:	4604      	mov	r4, r0
 800b16e:	4618      	mov	r0, r3
 800b170:	4688      	mov	r8, r1
 800b172:	f7f5 f82d 	bl	80001d0 <strlen>
 800b176:	f04f 0a00 	mov.w	sl, #0
 800b17a:	4605      	mov	r5, r0
 800b17c:	f04f 0b00 	mov.w	fp, #0
 800b180:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b184:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b186:	781a      	ldrb	r2, [r3, #0]
 800b188:	2a2b      	cmp	r2, #43	; 0x2b
 800b18a:	d04c      	beq.n	800b226 <_strtod_l+0xce>
 800b18c:	d839      	bhi.n	800b202 <_strtod_l+0xaa>
 800b18e:	2a0d      	cmp	r2, #13
 800b190:	d832      	bhi.n	800b1f8 <_strtod_l+0xa0>
 800b192:	2a08      	cmp	r2, #8
 800b194:	d832      	bhi.n	800b1fc <_strtod_l+0xa4>
 800b196:	2a00      	cmp	r2, #0
 800b198:	d03c      	beq.n	800b214 <_strtod_l+0xbc>
 800b19a:	2300      	movs	r3, #0
 800b19c:	930e      	str	r3, [sp, #56]	; 0x38
 800b19e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b1a0:	7833      	ldrb	r3, [r6, #0]
 800b1a2:	2b30      	cmp	r3, #48	; 0x30
 800b1a4:	f040 80b4 	bne.w	800b310 <_strtod_l+0x1b8>
 800b1a8:	7873      	ldrb	r3, [r6, #1]
 800b1aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1ae:	2b58      	cmp	r3, #88	; 0x58
 800b1b0:	d16c      	bne.n	800b28c <_strtod_l+0x134>
 800b1b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1b4:	9301      	str	r3, [sp, #4]
 800b1b6:	ab1e      	add	r3, sp, #120	; 0x78
 800b1b8:	9702      	str	r7, [sp, #8]
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	4a8f      	ldr	r2, [pc, #572]	; (800b3fc <_strtod_l+0x2a4>)
 800b1be:	ab1f      	add	r3, sp, #124	; 0x7c
 800b1c0:	a91d      	add	r1, sp, #116	; 0x74
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f001 fd40 	bl	800cc48 <__gethex>
 800b1c8:	f010 0707 	ands.w	r7, r0, #7
 800b1cc:	4605      	mov	r5, r0
 800b1ce:	d005      	beq.n	800b1dc <_strtod_l+0x84>
 800b1d0:	2f06      	cmp	r7, #6
 800b1d2:	d12a      	bne.n	800b22a <_strtod_l+0xd2>
 800b1d4:	3601      	adds	r6, #1
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	961d      	str	r6, [sp, #116]	; 0x74
 800b1da:	930e      	str	r3, [sp, #56]	; 0x38
 800b1dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f040 8596 	bne.w	800bd10 <_strtod_l+0xbb8>
 800b1e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1e6:	b1db      	cbz	r3, 800b220 <_strtod_l+0xc8>
 800b1e8:	4652      	mov	r2, sl
 800b1ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b1ee:	ec43 2b10 	vmov	d0, r2, r3
 800b1f2:	b023      	add	sp, #140	; 0x8c
 800b1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f8:	2a20      	cmp	r2, #32
 800b1fa:	d1ce      	bne.n	800b19a <_strtod_l+0x42>
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	931d      	str	r3, [sp, #116]	; 0x74
 800b200:	e7c0      	b.n	800b184 <_strtod_l+0x2c>
 800b202:	2a2d      	cmp	r2, #45	; 0x2d
 800b204:	d1c9      	bne.n	800b19a <_strtod_l+0x42>
 800b206:	2201      	movs	r2, #1
 800b208:	920e      	str	r2, [sp, #56]	; 0x38
 800b20a:	1c5a      	adds	r2, r3, #1
 800b20c:	921d      	str	r2, [sp, #116]	; 0x74
 800b20e:	785b      	ldrb	r3, [r3, #1]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1c4      	bne.n	800b19e <_strtod_l+0x46>
 800b214:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b216:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f040 8576 	bne.w	800bd0c <_strtod_l+0xbb4>
 800b220:	4652      	mov	r2, sl
 800b222:	465b      	mov	r3, fp
 800b224:	e7e3      	b.n	800b1ee <_strtod_l+0x96>
 800b226:	2200      	movs	r2, #0
 800b228:	e7ee      	b.n	800b208 <_strtod_l+0xb0>
 800b22a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b22c:	b13a      	cbz	r2, 800b23e <_strtod_l+0xe6>
 800b22e:	2135      	movs	r1, #53	; 0x35
 800b230:	a820      	add	r0, sp, #128	; 0x80
 800b232:	f002 fca6 	bl	800db82 <__copybits>
 800b236:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b238:	4620      	mov	r0, r4
 800b23a:	f002 f86b 	bl	800d314 <_Bfree>
 800b23e:	3f01      	subs	r7, #1
 800b240:	2f05      	cmp	r7, #5
 800b242:	d807      	bhi.n	800b254 <_strtod_l+0xfc>
 800b244:	e8df f007 	tbb	[pc, r7]
 800b248:	1d180b0e 	.word	0x1d180b0e
 800b24c:	030e      	.short	0x030e
 800b24e:	f04f 0b00 	mov.w	fp, #0
 800b252:	46da      	mov	sl, fp
 800b254:	0728      	lsls	r0, r5, #28
 800b256:	d5c1      	bpl.n	800b1dc <_strtod_l+0x84>
 800b258:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b25c:	e7be      	b.n	800b1dc <_strtod_l+0x84>
 800b25e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800b262:	e7f7      	b.n	800b254 <_strtod_l+0xfc>
 800b264:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800b268:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b26a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b26e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b272:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b276:	e7ed      	b.n	800b254 <_strtod_l+0xfc>
 800b278:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b400 <_strtod_l+0x2a8>
 800b27c:	f04f 0a00 	mov.w	sl, #0
 800b280:	e7e8      	b.n	800b254 <_strtod_l+0xfc>
 800b282:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b286:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b28a:	e7e3      	b.n	800b254 <_strtod_l+0xfc>
 800b28c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	921d      	str	r2, [sp, #116]	; 0x74
 800b292:	785b      	ldrb	r3, [r3, #1]
 800b294:	2b30      	cmp	r3, #48	; 0x30
 800b296:	d0f9      	beq.n	800b28c <_strtod_l+0x134>
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d09f      	beq.n	800b1dc <_strtod_l+0x84>
 800b29c:	2301      	movs	r3, #1
 800b29e:	f04f 0900 	mov.w	r9, #0
 800b2a2:	9304      	str	r3, [sp, #16]
 800b2a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b2a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b2a8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b2ac:	464f      	mov	r7, r9
 800b2ae:	220a      	movs	r2, #10
 800b2b0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b2b2:	7806      	ldrb	r6, [r0, #0]
 800b2b4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b2b8:	b2d9      	uxtb	r1, r3
 800b2ba:	2909      	cmp	r1, #9
 800b2bc:	d92a      	bls.n	800b314 <_strtod_l+0x1bc>
 800b2be:	9907      	ldr	r1, [sp, #28]
 800b2c0:	462a      	mov	r2, r5
 800b2c2:	f002 fed1 	bl	800e068 <strncmp>
 800b2c6:	b398      	cbz	r0, 800b330 <_strtod_l+0x1d8>
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	4633      	mov	r3, r6
 800b2cc:	463d      	mov	r5, r7
 800b2ce:	9007      	str	r0, [sp, #28]
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	2b65      	cmp	r3, #101	; 0x65
 800b2d4:	d001      	beq.n	800b2da <_strtod_l+0x182>
 800b2d6:	2b45      	cmp	r3, #69	; 0x45
 800b2d8:	d118      	bne.n	800b30c <_strtod_l+0x1b4>
 800b2da:	b91d      	cbnz	r5, 800b2e4 <_strtod_l+0x18c>
 800b2dc:	9b04      	ldr	r3, [sp, #16]
 800b2de:	4303      	orrs	r3, r0
 800b2e0:	d098      	beq.n	800b214 <_strtod_l+0xbc>
 800b2e2:	2500      	movs	r5, #0
 800b2e4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800b2e8:	f108 0301 	add.w	r3, r8, #1
 800b2ec:	931d      	str	r3, [sp, #116]	; 0x74
 800b2ee:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b2f2:	2b2b      	cmp	r3, #43	; 0x2b
 800b2f4:	d075      	beq.n	800b3e2 <_strtod_l+0x28a>
 800b2f6:	2b2d      	cmp	r3, #45	; 0x2d
 800b2f8:	d07b      	beq.n	800b3f2 <_strtod_l+0x29a>
 800b2fa:	f04f 0c00 	mov.w	ip, #0
 800b2fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b302:	2909      	cmp	r1, #9
 800b304:	f240 8082 	bls.w	800b40c <_strtod_l+0x2b4>
 800b308:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b30c:	2600      	movs	r6, #0
 800b30e:	e09d      	b.n	800b44c <_strtod_l+0x2f4>
 800b310:	2300      	movs	r3, #0
 800b312:	e7c4      	b.n	800b29e <_strtod_l+0x146>
 800b314:	2f08      	cmp	r7, #8
 800b316:	bfd8      	it	le
 800b318:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b31a:	f100 0001 	add.w	r0, r0, #1
 800b31e:	bfda      	itte	le
 800b320:	fb02 3301 	mlale	r3, r2, r1, r3
 800b324:	9309      	strle	r3, [sp, #36]	; 0x24
 800b326:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b32a:	3701      	adds	r7, #1
 800b32c:	901d      	str	r0, [sp, #116]	; 0x74
 800b32e:	e7bf      	b.n	800b2b0 <_strtod_l+0x158>
 800b330:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b332:	195a      	adds	r2, r3, r5
 800b334:	921d      	str	r2, [sp, #116]	; 0x74
 800b336:	5d5b      	ldrb	r3, [r3, r5]
 800b338:	2f00      	cmp	r7, #0
 800b33a:	d037      	beq.n	800b3ac <_strtod_l+0x254>
 800b33c:	9007      	str	r0, [sp, #28]
 800b33e:	463d      	mov	r5, r7
 800b340:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b344:	2a09      	cmp	r2, #9
 800b346:	d912      	bls.n	800b36e <_strtod_l+0x216>
 800b348:	2201      	movs	r2, #1
 800b34a:	e7c2      	b.n	800b2d2 <_strtod_l+0x17a>
 800b34c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b34e:	1c5a      	adds	r2, r3, #1
 800b350:	921d      	str	r2, [sp, #116]	; 0x74
 800b352:	785b      	ldrb	r3, [r3, #1]
 800b354:	3001      	adds	r0, #1
 800b356:	2b30      	cmp	r3, #48	; 0x30
 800b358:	d0f8      	beq.n	800b34c <_strtod_l+0x1f4>
 800b35a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b35e:	2a08      	cmp	r2, #8
 800b360:	f200 84db 	bhi.w	800bd1a <_strtod_l+0xbc2>
 800b364:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b366:	9007      	str	r0, [sp, #28]
 800b368:	2000      	movs	r0, #0
 800b36a:	920a      	str	r2, [sp, #40]	; 0x28
 800b36c:	4605      	mov	r5, r0
 800b36e:	3b30      	subs	r3, #48	; 0x30
 800b370:	f100 0201 	add.w	r2, r0, #1
 800b374:	d014      	beq.n	800b3a0 <_strtod_l+0x248>
 800b376:	9907      	ldr	r1, [sp, #28]
 800b378:	4411      	add	r1, r2
 800b37a:	9107      	str	r1, [sp, #28]
 800b37c:	462a      	mov	r2, r5
 800b37e:	eb00 0e05 	add.w	lr, r0, r5
 800b382:	210a      	movs	r1, #10
 800b384:	4572      	cmp	r2, lr
 800b386:	d113      	bne.n	800b3b0 <_strtod_l+0x258>
 800b388:	182a      	adds	r2, r5, r0
 800b38a:	2a08      	cmp	r2, #8
 800b38c:	f105 0501 	add.w	r5, r5, #1
 800b390:	4405      	add	r5, r0
 800b392:	dc1c      	bgt.n	800b3ce <_strtod_l+0x276>
 800b394:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b396:	220a      	movs	r2, #10
 800b398:	fb02 3301 	mla	r3, r2, r1, r3
 800b39c:	9309      	str	r3, [sp, #36]	; 0x24
 800b39e:	2200      	movs	r2, #0
 800b3a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3a2:	1c59      	adds	r1, r3, #1
 800b3a4:	911d      	str	r1, [sp, #116]	; 0x74
 800b3a6:	785b      	ldrb	r3, [r3, #1]
 800b3a8:	4610      	mov	r0, r2
 800b3aa:	e7c9      	b.n	800b340 <_strtod_l+0x1e8>
 800b3ac:	4638      	mov	r0, r7
 800b3ae:	e7d2      	b.n	800b356 <_strtod_l+0x1fe>
 800b3b0:	2a08      	cmp	r2, #8
 800b3b2:	dc04      	bgt.n	800b3be <_strtod_l+0x266>
 800b3b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b3b6:	434e      	muls	r6, r1
 800b3b8:	9609      	str	r6, [sp, #36]	; 0x24
 800b3ba:	3201      	adds	r2, #1
 800b3bc:	e7e2      	b.n	800b384 <_strtod_l+0x22c>
 800b3be:	f102 0c01 	add.w	ip, r2, #1
 800b3c2:	f1bc 0f10 	cmp.w	ip, #16
 800b3c6:	bfd8      	it	le
 800b3c8:	fb01 f909 	mulle.w	r9, r1, r9
 800b3cc:	e7f5      	b.n	800b3ba <_strtod_l+0x262>
 800b3ce:	2d10      	cmp	r5, #16
 800b3d0:	bfdc      	itt	le
 800b3d2:	220a      	movle	r2, #10
 800b3d4:	fb02 3909 	mlale	r9, r2, r9, r3
 800b3d8:	e7e1      	b.n	800b39e <_strtod_l+0x246>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	9307      	str	r3, [sp, #28]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	e77c      	b.n	800b2dc <_strtod_l+0x184>
 800b3e2:	f04f 0c00 	mov.w	ip, #0
 800b3e6:	f108 0302 	add.w	r3, r8, #2
 800b3ea:	931d      	str	r3, [sp, #116]	; 0x74
 800b3ec:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b3f0:	e785      	b.n	800b2fe <_strtod_l+0x1a6>
 800b3f2:	f04f 0c01 	mov.w	ip, #1
 800b3f6:	e7f6      	b.n	800b3e6 <_strtod_l+0x28e>
 800b3f8:	0800f030 	.word	0x0800f030
 800b3fc:	0800eddc 	.word	0x0800eddc
 800b400:	7ff00000 	.word	0x7ff00000
 800b404:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b406:	1c59      	adds	r1, r3, #1
 800b408:	911d      	str	r1, [sp, #116]	; 0x74
 800b40a:	785b      	ldrb	r3, [r3, #1]
 800b40c:	2b30      	cmp	r3, #48	; 0x30
 800b40e:	d0f9      	beq.n	800b404 <_strtod_l+0x2ac>
 800b410:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800b414:	2908      	cmp	r1, #8
 800b416:	f63f af79 	bhi.w	800b30c <_strtod_l+0x1b4>
 800b41a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b41e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b420:	9308      	str	r3, [sp, #32]
 800b422:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b424:	1c59      	adds	r1, r3, #1
 800b426:	911d      	str	r1, [sp, #116]	; 0x74
 800b428:	785b      	ldrb	r3, [r3, #1]
 800b42a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800b42e:	2e09      	cmp	r6, #9
 800b430:	d937      	bls.n	800b4a2 <_strtod_l+0x34a>
 800b432:	9e08      	ldr	r6, [sp, #32]
 800b434:	1b89      	subs	r1, r1, r6
 800b436:	2908      	cmp	r1, #8
 800b438:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b43c:	dc02      	bgt.n	800b444 <_strtod_l+0x2ec>
 800b43e:	4576      	cmp	r6, lr
 800b440:	bfa8      	it	ge
 800b442:	4676      	movge	r6, lr
 800b444:	f1bc 0f00 	cmp.w	ip, #0
 800b448:	d000      	beq.n	800b44c <_strtod_l+0x2f4>
 800b44a:	4276      	negs	r6, r6
 800b44c:	2d00      	cmp	r5, #0
 800b44e:	d14f      	bne.n	800b4f0 <_strtod_l+0x398>
 800b450:	9904      	ldr	r1, [sp, #16]
 800b452:	4301      	orrs	r1, r0
 800b454:	f47f aec2 	bne.w	800b1dc <_strtod_l+0x84>
 800b458:	2a00      	cmp	r2, #0
 800b45a:	f47f aedb 	bne.w	800b214 <_strtod_l+0xbc>
 800b45e:	2b69      	cmp	r3, #105	; 0x69
 800b460:	d027      	beq.n	800b4b2 <_strtod_l+0x35a>
 800b462:	dc24      	bgt.n	800b4ae <_strtod_l+0x356>
 800b464:	2b49      	cmp	r3, #73	; 0x49
 800b466:	d024      	beq.n	800b4b2 <_strtod_l+0x35a>
 800b468:	2b4e      	cmp	r3, #78	; 0x4e
 800b46a:	f47f aed3 	bne.w	800b214 <_strtod_l+0xbc>
 800b46e:	499e      	ldr	r1, [pc, #632]	; (800b6e8 <_strtod_l+0x590>)
 800b470:	a81d      	add	r0, sp, #116	; 0x74
 800b472:	f001 fe41 	bl	800d0f8 <__match>
 800b476:	2800      	cmp	r0, #0
 800b478:	f43f aecc 	beq.w	800b214 <_strtod_l+0xbc>
 800b47c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2b28      	cmp	r3, #40	; 0x28
 800b482:	d12d      	bne.n	800b4e0 <_strtod_l+0x388>
 800b484:	4999      	ldr	r1, [pc, #612]	; (800b6ec <_strtod_l+0x594>)
 800b486:	aa20      	add	r2, sp, #128	; 0x80
 800b488:	a81d      	add	r0, sp, #116	; 0x74
 800b48a:	f001 fe49 	bl	800d120 <__hexnan>
 800b48e:	2805      	cmp	r0, #5
 800b490:	d126      	bne.n	800b4e0 <_strtod_l+0x388>
 800b492:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b494:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800b498:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b49c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b4a0:	e69c      	b.n	800b1dc <_strtod_l+0x84>
 800b4a2:	210a      	movs	r1, #10
 800b4a4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b4a8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b4ac:	e7b9      	b.n	800b422 <_strtod_l+0x2ca>
 800b4ae:	2b6e      	cmp	r3, #110	; 0x6e
 800b4b0:	e7db      	b.n	800b46a <_strtod_l+0x312>
 800b4b2:	498f      	ldr	r1, [pc, #572]	; (800b6f0 <_strtod_l+0x598>)
 800b4b4:	a81d      	add	r0, sp, #116	; 0x74
 800b4b6:	f001 fe1f 	bl	800d0f8 <__match>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	f43f aeaa 	beq.w	800b214 <_strtod_l+0xbc>
 800b4c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4c2:	498c      	ldr	r1, [pc, #560]	; (800b6f4 <_strtod_l+0x59c>)
 800b4c4:	3b01      	subs	r3, #1
 800b4c6:	a81d      	add	r0, sp, #116	; 0x74
 800b4c8:	931d      	str	r3, [sp, #116]	; 0x74
 800b4ca:	f001 fe15 	bl	800d0f8 <__match>
 800b4ce:	b910      	cbnz	r0, 800b4d6 <_strtod_l+0x37e>
 800b4d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	931d      	str	r3, [sp, #116]	; 0x74
 800b4d6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800b704 <_strtod_l+0x5ac>
 800b4da:	f04f 0a00 	mov.w	sl, #0
 800b4de:	e67d      	b.n	800b1dc <_strtod_l+0x84>
 800b4e0:	4885      	ldr	r0, [pc, #532]	; (800b6f8 <_strtod_l+0x5a0>)
 800b4e2:	f002 fda9 	bl	800e038 <nan>
 800b4e6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b4ea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b4ee:	e675      	b.n	800b1dc <_strtod_l+0x84>
 800b4f0:	9b07      	ldr	r3, [sp, #28]
 800b4f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4f4:	1af3      	subs	r3, r6, r3
 800b4f6:	2f00      	cmp	r7, #0
 800b4f8:	bf08      	it	eq
 800b4fa:	462f      	moveq	r7, r5
 800b4fc:	2d10      	cmp	r5, #16
 800b4fe:	9308      	str	r3, [sp, #32]
 800b500:	46a8      	mov	r8, r5
 800b502:	bfa8      	it	ge
 800b504:	f04f 0810 	movge.w	r8, #16
 800b508:	f7f4 fffc 	bl	8000504 <__aeabi_ui2d>
 800b50c:	2d09      	cmp	r5, #9
 800b50e:	4682      	mov	sl, r0
 800b510:	468b      	mov	fp, r1
 800b512:	dd13      	ble.n	800b53c <_strtod_l+0x3e4>
 800b514:	4b79      	ldr	r3, [pc, #484]	; (800b6fc <_strtod_l+0x5a4>)
 800b516:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b51a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b51e:	f7f5 f86b 	bl	80005f8 <__aeabi_dmul>
 800b522:	4682      	mov	sl, r0
 800b524:	4648      	mov	r0, r9
 800b526:	468b      	mov	fp, r1
 800b528:	f7f4 ffec 	bl	8000504 <__aeabi_ui2d>
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	4650      	mov	r0, sl
 800b532:	4659      	mov	r1, fp
 800b534:	f7f4 feaa 	bl	800028c <__adddf3>
 800b538:	4682      	mov	sl, r0
 800b53a:	468b      	mov	fp, r1
 800b53c:	2d0f      	cmp	r5, #15
 800b53e:	dc38      	bgt.n	800b5b2 <_strtod_l+0x45a>
 800b540:	9b08      	ldr	r3, [sp, #32]
 800b542:	2b00      	cmp	r3, #0
 800b544:	f43f ae4a 	beq.w	800b1dc <_strtod_l+0x84>
 800b548:	dd24      	ble.n	800b594 <_strtod_l+0x43c>
 800b54a:	2b16      	cmp	r3, #22
 800b54c:	dc0b      	bgt.n	800b566 <_strtod_l+0x40e>
 800b54e:	4d6b      	ldr	r5, [pc, #428]	; (800b6fc <_strtod_l+0x5a4>)
 800b550:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800b554:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b558:	4652      	mov	r2, sl
 800b55a:	465b      	mov	r3, fp
 800b55c:	f7f5 f84c 	bl	80005f8 <__aeabi_dmul>
 800b560:	4682      	mov	sl, r0
 800b562:	468b      	mov	fp, r1
 800b564:	e63a      	b.n	800b1dc <_strtod_l+0x84>
 800b566:	9a08      	ldr	r2, [sp, #32]
 800b568:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b56c:	4293      	cmp	r3, r2
 800b56e:	db20      	blt.n	800b5b2 <_strtod_l+0x45a>
 800b570:	4c62      	ldr	r4, [pc, #392]	; (800b6fc <_strtod_l+0x5a4>)
 800b572:	f1c5 050f 	rsb	r5, r5, #15
 800b576:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b57a:	4652      	mov	r2, sl
 800b57c:	465b      	mov	r3, fp
 800b57e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b582:	f7f5 f839 	bl	80005f8 <__aeabi_dmul>
 800b586:	9b08      	ldr	r3, [sp, #32]
 800b588:	1b5d      	subs	r5, r3, r5
 800b58a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b58e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b592:	e7e3      	b.n	800b55c <_strtod_l+0x404>
 800b594:	9b08      	ldr	r3, [sp, #32]
 800b596:	3316      	adds	r3, #22
 800b598:	db0b      	blt.n	800b5b2 <_strtod_l+0x45a>
 800b59a:	9b07      	ldr	r3, [sp, #28]
 800b59c:	4a57      	ldr	r2, [pc, #348]	; (800b6fc <_strtod_l+0x5a4>)
 800b59e:	1b9e      	subs	r6, r3, r6
 800b5a0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b5a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b5a8:	4650      	mov	r0, sl
 800b5aa:	4659      	mov	r1, fp
 800b5ac:	f7f5 f94e 	bl	800084c <__aeabi_ddiv>
 800b5b0:	e7d6      	b.n	800b560 <_strtod_l+0x408>
 800b5b2:	9b08      	ldr	r3, [sp, #32]
 800b5b4:	eba5 0808 	sub.w	r8, r5, r8
 800b5b8:	4498      	add	r8, r3
 800b5ba:	f1b8 0f00 	cmp.w	r8, #0
 800b5be:	dd71      	ble.n	800b6a4 <_strtod_l+0x54c>
 800b5c0:	f018 030f 	ands.w	r3, r8, #15
 800b5c4:	d00a      	beq.n	800b5dc <_strtod_l+0x484>
 800b5c6:	494d      	ldr	r1, [pc, #308]	; (800b6fc <_strtod_l+0x5a4>)
 800b5c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b5cc:	4652      	mov	r2, sl
 800b5ce:	465b      	mov	r3, fp
 800b5d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5d4:	f7f5 f810 	bl	80005f8 <__aeabi_dmul>
 800b5d8:	4682      	mov	sl, r0
 800b5da:	468b      	mov	fp, r1
 800b5dc:	f038 080f 	bics.w	r8, r8, #15
 800b5e0:	d04d      	beq.n	800b67e <_strtod_l+0x526>
 800b5e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b5e6:	dd22      	ble.n	800b62e <_strtod_l+0x4d6>
 800b5e8:	2500      	movs	r5, #0
 800b5ea:	462e      	mov	r6, r5
 800b5ec:	9509      	str	r5, [sp, #36]	; 0x24
 800b5ee:	9507      	str	r5, [sp, #28]
 800b5f0:	2322      	movs	r3, #34	; 0x22
 800b5f2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800b704 <_strtod_l+0x5ac>
 800b5f6:	6023      	str	r3, [r4, #0]
 800b5f8:	f04f 0a00 	mov.w	sl, #0
 800b5fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f43f adec 	beq.w	800b1dc <_strtod_l+0x84>
 800b604:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b606:	4620      	mov	r0, r4
 800b608:	f001 fe84 	bl	800d314 <_Bfree>
 800b60c:	9907      	ldr	r1, [sp, #28]
 800b60e:	4620      	mov	r0, r4
 800b610:	f001 fe80 	bl	800d314 <_Bfree>
 800b614:	4631      	mov	r1, r6
 800b616:	4620      	mov	r0, r4
 800b618:	f001 fe7c 	bl	800d314 <_Bfree>
 800b61c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b61e:	4620      	mov	r0, r4
 800b620:	f001 fe78 	bl	800d314 <_Bfree>
 800b624:	4629      	mov	r1, r5
 800b626:	4620      	mov	r0, r4
 800b628:	f001 fe74 	bl	800d314 <_Bfree>
 800b62c:	e5d6      	b.n	800b1dc <_strtod_l+0x84>
 800b62e:	2300      	movs	r3, #0
 800b630:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b634:	4650      	mov	r0, sl
 800b636:	4659      	mov	r1, fp
 800b638:	4699      	mov	r9, r3
 800b63a:	f1b8 0f01 	cmp.w	r8, #1
 800b63e:	dc21      	bgt.n	800b684 <_strtod_l+0x52c>
 800b640:	b10b      	cbz	r3, 800b646 <_strtod_l+0x4ee>
 800b642:	4682      	mov	sl, r0
 800b644:	468b      	mov	fp, r1
 800b646:	4b2e      	ldr	r3, [pc, #184]	; (800b700 <_strtod_l+0x5a8>)
 800b648:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b64c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b650:	4652      	mov	r2, sl
 800b652:	465b      	mov	r3, fp
 800b654:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b658:	f7f4 ffce 	bl	80005f8 <__aeabi_dmul>
 800b65c:	4b29      	ldr	r3, [pc, #164]	; (800b704 <_strtod_l+0x5ac>)
 800b65e:	460a      	mov	r2, r1
 800b660:	400b      	ands	r3, r1
 800b662:	4929      	ldr	r1, [pc, #164]	; (800b708 <_strtod_l+0x5b0>)
 800b664:	428b      	cmp	r3, r1
 800b666:	4682      	mov	sl, r0
 800b668:	d8be      	bhi.n	800b5e8 <_strtod_l+0x490>
 800b66a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b66e:	428b      	cmp	r3, r1
 800b670:	bf86      	itte	hi
 800b672:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b70c <_strtod_l+0x5b4>
 800b676:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800b67a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b67e:	2300      	movs	r3, #0
 800b680:	9304      	str	r3, [sp, #16]
 800b682:	e081      	b.n	800b788 <_strtod_l+0x630>
 800b684:	f018 0f01 	tst.w	r8, #1
 800b688:	d007      	beq.n	800b69a <_strtod_l+0x542>
 800b68a:	4b1d      	ldr	r3, [pc, #116]	; (800b700 <_strtod_l+0x5a8>)
 800b68c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	f7f4 ffb0 	bl	80005f8 <__aeabi_dmul>
 800b698:	2301      	movs	r3, #1
 800b69a:	f109 0901 	add.w	r9, r9, #1
 800b69e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b6a2:	e7ca      	b.n	800b63a <_strtod_l+0x4e2>
 800b6a4:	d0eb      	beq.n	800b67e <_strtod_l+0x526>
 800b6a6:	f1c8 0800 	rsb	r8, r8, #0
 800b6aa:	f018 020f 	ands.w	r2, r8, #15
 800b6ae:	d00a      	beq.n	800b6c6 <_strtod_l+0x56e>
 800b6b0:	4b12      	ldr	r3, [pc, #72]	; (800b6fc <_strtod_l+0x5a4>)
 800b6b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6b6:	4650      	mov	r0, sl
 800b6b8:	4659      	mov	r1, fp
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	f7f5 f8c5 	bl	800084c <__aeabi_ddiv>
 800b6c2:	4682      	mov	sl, r0
 800b6c4:	468b      	mov	fp, r1
 800b6c6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b6ca:	d0d8      	beq.n	800b67e <_strtod_l+0x526>
 800b6cc:	f1b8 0f1f 	cmp.w	r8, #31
 800b6d0:	dd1e      	ble.n	800b710 <_strtod_l+0x5b8>
 800b6d2:	2500      	movs	r5, #0
 800b6d4:	462e      	mov	r6, r5
 800b6d6:	9509      	str	r5, [sp, #36]	; 0x24
 800b6d8:	9507      	str	r5, [sp, #28]
 800b6da:	2322      	movs	r3, #34	; 0x22
 800b6dc:	f04f 0a00 	mov.w	sl, #0
 800b6e0:	f04f 0b00 	mov.w	fp, #0
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	e789      	b.n	800b5fc <_strtod_l+0x4a4>
 800b6e8:	0800edad 	.word	0x0800edad
 800b6ec:	0800edf0 	.word	0x0800edf0
 800b6f0:	0800eda5 	.word	0x0800eda5
 800b6f4:	0800ef34 	.word	0x0800ef34
 800b6f8:	0800f1f0 	.word	0x0800f1f0
 800b6fc:	0800f0d0 	.word	0x0800f0d0
 800b700:	0800f0a8 	.word	0x0800f0a8
 800b704:	7ff00000 	.word	0x7ff00000
 800b708:	7ca00000 	.word	0x7ca00000
 800b70c:	7fefffff 	.word	0x7fefffff
 800b710:	f018 0310 	ands.w	r3, r8, #16
 800b714:	bf18      	it	ne
 800b716:	236a      	movne	r3, #106	; 0x6a
 800b718:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800bad0 <_strtod_l+0x978>
 800b71c:	9304      	str	r3, [sp, #16]
 800b71e:	4650      	mov	r0, sl
 800b720:	4659      	mov	r1, fp
 800b722:	2300      	movs	r3, #0
 800b724:	f018 0f01 	tst.w	r8, #1
 800b728:	d004      	beq.n	800b734 <_strtod_l+0x5dc>
 800b72a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b72e:	f7f4 ff63 	bl	80005f8 <__aeabi_dmul>
 800b732:	2301      	movs	r3, #1
 800b734:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b738:	f109 0908 	add.w	r9, r9, #8
 800b73c:	d1f2      	bne.n	800b724 <_strtod_l+0x5cc>
 800b73e:	b10b      	cbz	r3, 800b744 <_strtod_l+0x5ec>
 800b740:	4682      	mov	sl, r0
 800b742:	468b      	mov	fp, r1
 800b744:	9b04      	ldr	r3, [sp, #16]
 800b746:	b1bb      	cbz	r3, 800b778 <_strtod_l+0x620>
 800b748:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b74c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b750:	2b00      	cmp	r3, #0
 800b752:	4659      	mov	r1, fp
 800b754:	dd10      	ble.n	800b778 <_strtod_l+0x620>
 800b756:	2b1f      	cmp	r3, #31
 800b758:	f340 8128 	ble.w	800b9ac <_strtod_l+0x854>
 800b75c:	2b34      	cmp	r3, #52	; 0x34
 800b75e:	bfde      	ittt	le
 800b760:	3b20      	suble	r3, #32
 800b762:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800b766:	fa02 f303 	lslle.w	r3, r2, r3
 800b76a:	f04f 0a00 	mov.w	sl, #0
 800b76e:	bfcc      	ite	gt
 800b770:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b774:	ea03 0b01 	andle.w	fp, r3, r1
 800b778:	2200      	movs	r2, #0
 800b77a:	2300      	movs	r3, #0
 800b77c:	4650      	mov	r0, sl
 800b77e:	4659      	mov	r1, fp
 800b780:	f7f5 f9a2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b784:	2800      	cmp	r0, #0
 800b786:	d1a4      	bne.n	800b6d2 <_strtod_l+0x57a>
 800b788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b78e:	462b      	mov	r3, r5
 800b790:	463a      	mov	r2, r7
 800b792:	4620      	mov	r0, r4
 800b794:	f001 fe2a 	bl	800d3ec <__s2b>
 800b798:	9009      	str	r0, [sp, #36]	; 0x24
 800b79a:	2800      	cmp	r0, #0
 800b79c:	f43f af24 	beq.w	800b5e8 <_strtod_l+0x490>
 800b7a0:	9b07      	ldr	r3, [sp, #28]
 800b7a2:	1b9e      	subs	r6, r3, r6
 800b7a4:	9b08      	ldr	r3, [sp, #32]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	bfb4      	ite	lt
 800b7aa:	4633      	movlt	r3, r6
 800b7ac:	2300      	movge	r3, #0
 800b7ae:	9310      	str	r3, [sp, #64]	; 0x40
 800b7b0:	9b08      	ldr	r3, [sp, #32]
 800b7b2:	2500      	movs	r5, #0
 800b7b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b7b8:	9318      	str	r3, [sp, #96]	; 0x60
 800b7ba:	462e      	mov	r6, r5
 800b7bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7be:	4620      	mov	r0, r4
 800b7c0:	6859      	ldr	r1, [r3, #4]
 800b7c2:	f001 fd67 	bl	800d294 <_Balloc>
 800b7c6:	9007      	str	r0, [sp, #28]
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	f43f af11 	beq.w	800b5f0 <_strtod_l+0x498>
 800b7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7d0:	691a      	ldr	r2, [r3, #16]
 800b7d2:	3202      	adds	r2, #2
 800b7d4:	f103 010c 	add.w	r1, r3, #12
 800b7d8:	0092      	lsls	r2, r2, #2
 800b7da:	300c      	adds	r0, #12
 800b7dc:	f7fe fde8 	bl	800a3b0 <memcpy>
 800b7e0:	ec4b ab10 	vmov	d0, sl, fp
 800b7e4:	aa20      	add	r2, sp, #128	; 0x80
 800b7e6:	a91f      	add	r1, sp, #124	; 0x7c
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b7ee:	f002 f939 	bl	800da64 <__d2b>
 800b7f2:	901e      	str	r0, [sp, #120]	; 0x78
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	f43f aefb 	beq.w	800b5f0 <_strtod_l+0x498>
 800b7fa:	2101      	movs	r1, #1
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f001 fe8f 	bl	800d520 <__i2b>
 800b802:	4606      	mov	r6, r0
 800b804:	2800      	cmp	r0, #0
 800b806:	f43f aef3 	beq.w	800b5f0 <_strtod_l+0x498>
 800b80a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b80c:	9904      	ldr	r1, [sp, #16]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	bfab      	itete	ge
 800b812:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800b814:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800b816:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800b818:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800b81c:	bfac      	ite	ge
 800b81e:	eb03 0902 	addge.w	r9, r3, r2
 800b822:	1ad7      	sublt	r7, r2, r3
 800b824:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b826:	eba3 0801 	sub.w	r8, r3, r1
 800b82a:	4490      	add	r8, r2
 800b82c:	4ba3      	ldr	r3, [pc, #652]	; (800babc <_strtod_l+0x964>)
 800b82e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b832:	4598      	cmp	r8, r3
 800b834:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b838:	f280 80cc 	bge.w	800b9d4 <_strtod_l+0x87c>
 800b83c:	eba3 0308 	sub.w	r3, r3, r8
 800b840:	2b1f      	cmp	r3, #31
 800b842:	eba2 0203 	sub.w	r2, r2, r3
 800b846:	f04f 0101 	mov.w	r1, #1
 800b84a:	f300 80b6 	bgt.w	800b9ba <_strtod_l+0x862>
 800b84e:	fa01 f303 	lsl.w	r3, r1, r3
 800b852:	9311      	str	r3, [sp, #68]	; 0x44
 800b854:	2300      	movs	r3, #0
 800b856:	930c      	str	r3, [sp, #48]	; 0x30
 800b858:	eb09 0802 	add.w	r8, r9, r2
 800b85c:	9b04      	ldr	r3, [sp, #16]
 800b85e:	45c1      	cmp	r9, r8
 800b860:	4417      	add	r7, r2
 800b862:	441f      	add	r7, r3
 800b864:	464b      	mov	r3, r9
 800b866:	bfa8      	it	ge
 800b868:	4643      	movge	r3, r8
 800b86a:	42bb      	cmp	r3, r7
 800b86c:	bfa8      	it	ge
 800b86e:	463b      	movge	r3, r7
 800b870:	2b00      	cmp	r3, #0
 800b872:	bfc2      	ittt	gt
 800b874:	eba8 0803 	subgt.w	r8, r8, r3
 800b878:	1aff      	subgt	r7, r7, r3
 800b87a:	eba9 0903 	subgt.w	r9, r9, r3
 800b87e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b880:	2b00      	cmp	r3, #0
 800b882:	dd17      	ble.n	800b8b4 <_strtod_l+0x75c>
 800b884:	4631      	mov	r1, r6
 800b886:	461a      	mov	r2, r3
 800b888:	4620      	mov	r0, r4
 800b88a:	f001 ff05 	bl	800d698 <__pow5mult>
 800b88e:	4606      	mov	r6, r0
 800b890:	2800      	cmp	r0, #0
 800b892:	f43f aead 	beq.w	800b5f0 <_strtod_l+0x498>
 800b896:	4601      	mov	r1, r0
 800b898:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b89a:	4620      	mov	r0, r4
 800b89c:	f001 fe56 	bl	800d54c <__multiply>
 800b8a0:	900f      	str	r0, [sp, #60]	; 0x3c
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	f43f aea4 	beq.w	800b5f0 <_strtod_l+0x498>
 800b8a8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f001 fd32 	bl	800d314 <_Bfree>
 800b8b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8b2:	931e      	str	r3, [sp, #120]	; 0x78
 800b8b4:	f1b8 0f00 	cmp.w	r8, #0
 800b8b8:	f300 8091 	bgt.w	800b9de <_strtod_l+0x886>
 800b8bc:	9b08      	ldr	r3, [sp, #32]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	dd08      	ble.n	800b8d4 <_strtod_l+0x77c>
 800b8c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b8c4:	9907      	ldr	r1, [sp, #28]
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f001 fee6 	bl	800d698 <__pow5mult>
 800b8cc:	9007      	str	r0, [sp, #28]
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	f43f ae8e 	beq.w	800b5f0 <_strtod_l+0x498>
 800b8d4:	2f00      	cmp	r7, #0
 800b8d6:	dd08      	ble.n	800b8ea <_strtod_l+0x792>
 800b8d8:	9907      	ldr	r1, [sp, #28]
 800b8da:	463a      	mov	r2, r7
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f001 ff35 	bl	800d74c <__lshift>
 800b8e2:	9007      	str	r0, [sp, #28]
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	f43f ae83 	beq.w	800b5f0 <_strtod_l+0x498>
 800b8ea:	f1b9 0f00 	cmp.w	r9, #0
 800b8ee:	dd08      	ble.n	800b902 <_strtod_l+0x7aa>
 800b8f0:	4631      	mov	r1, r6
 800b8f2:	464a      	mov	r2, r9
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	f001 ff29 	bl	800d74c <__lshift>
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	f43f ae77 	beq.w	800b5f0 <_strtod_l+0x498>
 800b902:	9a07      	ldr	r2, [sp, #28]
 800b904:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b906:	4620      	mov	r0, r4
 800b908:	f001 ffa8 	bl	800d85c <__mdiff>
 800b90c:	4605      	mov	r5, r0
 800b90e:	2800      	cmp	r0, #0
 800b910:	f43f ae6e 	beq.w	800b5f0 <_strtod_l+0x498>
 800b914:	68c3      	ldr	r3, [r0, #12]
 800b916:	930f      	str	r3, [sp, #60]	; 0x3c
 800b918:	2300      	movs	r3, #0
 800b91a:	60c3      	str	r3, [r0, #12]
 800b91c:	4631      	mov	r1, r6
 800b91e:	f001 ff81 	bl	800d824 <__mcmp>
 800b922:	2800      	cmp	r0, #0
 800b924:	da65      	bge.n	800b9f2 <_strtod_l+0x89a>
 800b926:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b928:	ea53 030a 	orrs.w	r3, r3, sl
 800b92c:	f040 8087 	bne.w	800ba3e <_strtod_l+0x8e6>
 800b930:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b934:	2b00      	cmp	r3, #0
 800b936:	f040 8082 	bne.w	800ba3e <_strtod_l+0x8e6>
 800b93a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b93e:	0d1b      	lsrs	r3, r3, #20
 800b940:	051b      	lsls	r3, r3, #20
 800b942:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b946:	d97a      	bls.n	800ba3e <_strtod_l+0x8e6>
 800b948:	696b      	ldr	r3, [r5, #20]
 800b94a:	b913      	cbnz	r3, 800b952 <_strtod_l+0x7fa>
 800b94c:	692b      	ldr	r3, [r5, #16]
 800b94e:	2b01      	cmp	r3, #1
 800b950:	dd75      	ble.n	800ba3e <_strtod_l+0x8e6>
 800b952:	4629      	mov	r1, r5
 800b954:	2201      	movs	r2, #1
 800b956:	4620      	mov	r0, r4
 800b958:	f001 fef8 	bl	800d74c <__lshift>
 800b95c:	4631      	mov	r1, r6
 800b95e:	4605      	mov	r5, r0
 800b960:	f001 ff60 	bl	800d824 <__mcmp>
 800b964:	2800      	cmp	r0, #0
 800b966:	dd6a      	ble.n	800ba3e <_strtod_l+0x8e6>
 800b968:	9904      	ldr	r1, [sp, #16]
 800b96a:	4a55      	ldr	r2, [pc, #340]	; (800bac0 <_strtod_l+0x968>)
 800b96c:	465b      	mov	r3, fp
 800b96e:	2900      	cmp	r1, #0
 800b970:	f000 8085 	beq.w	800ba7e <_strtod_l+0x926>
 800b974:	ea02 010b 	and.w	r1, r2, fp
 800b978:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b97c:	dc7f      	bgt.n	800ba7e <_strtod_l+0x926>
 800b97e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b982:	f77f aeaa 	ble.w	800b6da <_strtod_l+0x582>
 800b986:	4a4f      	ldr	r2, [pc, #316]	; (800bac4 <_strtod_l+0x96c>)
 800b988:	2300      	movs	r3, #0
 800b98a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800b98e:	4650      	mov	r0, sl
 800b990:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800b994:	4659      	mov	r1, fp
 800b996:	f7f4 fe2f 	bl	80005f8 <__aeabi_dmul>
 800b99a:	460b      	mov	r3, r1
 800b99c:	4303      	orrs	r3, r0
 800b99e:	bf08      	it	eq
 800b9a0:	2322      	moveq	r3, #34	; 0x22
 800b9a2:	4682      	mov	sl, r0
 800b9a4:	468b      	mov	fp, r1
 800b9a6:	bf08      	it	eq
 800b9a8:	6023      	streq	r3, [r4, #0]
 800b9aa:	e62b      	b.n	800b604 <_strtod_l+0x4ac>
 800b9ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9b4:	ea03 0a0a 	and.w	sl, r3, sl
 800b9b8:	e6de      	b.n	800b778 <_strtod_l+0x620>
 800b9ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b9be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b9c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b9c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b9ca:	fa01 f308 	lsl.w	r3, r1, r8
 800b9ce:	930c      	str	r3, [sp, #48]	; 0x30
 800b9d0:	9111      	str	r1, [sp, #68]	; 0x44
 800b9d2:	e741      	b.n	800b858 <_strtod_l+0x700>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	930c      	str	r3, [sp, #48]	; 0x30
 800b9d8:	2301      	movs	r3, #1
 800b9da:	9311      	str	r3, [sp, #68]	; 0x44
 800b9dc:	e73c      	b.n	800b858 <_strtod_l+0x700>
 800b9de:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b9e0:	4642      	mov	r2, r8
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f001 feb2 	bl	800d74c <__lshift>
 800b9e8:	901e      	str	r0, [sp, #120]	; 0x78
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	f47f af66 	bne.w	800b8bc <_strtod_l+0x764>
 800b9f0:	e5fe      	b.n	800b5f0 <_strtod_l+0x498>
 800b9f2:	465f      	mov	r7, fp
 800b9f4:	d16e      	bne.n	800bad4 <_strtod_l+0x97c>
 800b9f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b9f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9fc:	b342      	cbz	r2, 800ba50 <_strtod_l+0x8f8>
 800b9fe:	4a32      	ldr	r2, [pc, #200]	; (800bac8 <_strtod_l+0x970>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d128      	bne.n	800ba56 <_strtod_l+0x8fe>
 800ba04:	9b04      	ldr	r3, [sp, #16]
 800ba06:	4650      	mov	r0, sl
 800ba08:	b1eb      	cbz	r3, 800ba46 <_strtod_l+0x8ee>
 800ba0a:	4a2d      	ldr	r2, [pc, #180]	; (800bac0 <_strtod_l+0x968>)
 800ba0c:	403a      	ands	r2, r7
 800ba0e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ba12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ba16:	d819      	bhi.n	800ba4c <_strtod_l+0x8f4>
 800ba18:	0d12      	lsrs	r2, r2, #20
 800ba1a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ba1e:	fa01 f303 	lsl.w	r3, r1, r3
 800ba22:	4298      	cmp	r0, r3
 800ba24:	d117      	bne.n	800ba56 <_strtod_l+0x8fe>
 800ba26:	4b29      	ldr	r3, [pc, #164]	; (800bacc <_strtod_l+0x974>)
 800ba28:	429f      	cmp	r7, r3
 800ba2a:	d102      	bne.n	800ba32 <_strtod_l+0x8da>
 800ba2c:	3001      	adds	r0, #1
 800ba2e:	f43f addf 	beq.w	800b5f0 <_strtod_l+0x498>
 800ba32:	4b23      	ldr	r3, [pc, #140]	; (800bac0 <_strtod_l+0x968>)
 800ba34:	403b      	ands	r3, r7
 800ba36:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ba3a:	f04f 0a00 	mov.w	sl, #0
 800ba3e:	9b04      	ldr	r3, [sp, #16]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1a0      	bne.n	800b986 <_strtod_l+0x82e>
 800ba44:	e5de      	b.n	800b604 <_strtod_l+0x4ac>
 800ba46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba4a:	e7ea      	b.n	800ba22 <_strtod_l+0x8ca>
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	e7e8      	b.n	800ba22 <_strtod_l+0x8ca>
 800ba50:	ea53 030a 	orrs.w	r3, r3, sl
 800ba54:	d088      	beq.n	800b968 <_strtod_l+0x810>
 800ba56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba58:	b1db      	cbz	r3, 800ba92 <_strtod_l+0x93a>
 800ba5a:	423b      	tst	r3, r7
 800ba5c:	d0ef      	beq.n	800ba3e <_strtod_l+0x8e6>
 800ba5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba60:	9a04      	ldr	r2, [sp, #16]
 800ba62:	4650      	mov	r0, sl
 800ba64:	4659      	mov	r1, fp
 800ba66:	b1c3      	cbz	r3, 800ba9a <_strtod_l+0x942>
 800ba68:	f7ff fb58 	bl	800b11c <sulp>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	460b      	mov	r3, r1
 800ba70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba74:	f7f4 fc0a 	bl	800028c <__adddf3>
 800ba78:	4682      	mov	sl, r0
 800ba7a:	468b      	mov	fp, r1
 800ba7c:	e7df      	b.n	800ba3e <_strtod_l+0x8e6>
 800ba7e:	4013      	ands	r3, r2
 800ba80:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ba84:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ba88:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ba8c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ba90:	e7d5      	b.n	800ba3e <_strtod_l+0x8e6>
 800ba92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba94:	ea13 0f0a 	tst.w	r3, sl
 800ba98:	e7e0      	b.n	800ba5c <_strtod_l+0x904>
 800ba9a:	f7ff fb3f 	bl	800b11c <sulp>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800baa6:	f7f4 fbef 	bl	8000288 <__aeabi_dsub>
 800baaa:	2200      	movs	r2, #0
 800baac:	2300      	movs	r3, #0
 800baae:	4682      	mov	sl, r0
 800bab0:	468b      	mov	fp, r1
 800bab2:	f7f5 f809 	bl	8000ac8 <__aeabi_dcmpeq>
 800bab6:	2800      	cmp	r0, #0
 800bab8:	d0c1      	beq.n	800ba3e <_strtod_l+0x8e6>
 800baba:	e60e      	b.n	800b6da <_strtod_l+0x582>
 800babc:	fffffc02 	.word	0xfffffc02
 800bac0:	7ff00000 	.word	0x7ff00000
 800bac4:	39500000 	.word	0x39500000
 800bac8:	000fffff 	.word	0x000fffff
 800bacc:	7fefffff 	.word	0x7fefffff
 800bad0:	0800ee08 	.word	0x0800ee08
 800bad4:	4631      	mov	r1, r6
 800bad6:	4628      	mov	r0, r5
 800bad8:	f002 f820 	bl	800db1c <__ratio>
 800badc:	ec59 8b10 	vmov	r8, r9, d0
 800bae0:	ee10 0a10 	vmov	r0, s0
 800bae4:	2200      	movs	r2, #0
 800bae6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800baea:	4649      	mov	r1, r9
 800baec:	f7f5 f800 	bl	8000af0 <__aeabi_dcmple>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	d07c      	beq.n	800bbee <_strtod_l+0xa96>
 800baf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d04c      	beq.n	800bb94 <_strtod_l+0xa3c>
 800bafa:	4b95      	ldr	r3, [pc, #596]	; (800bd50 <_strtod_l+0xbf8>)
 800bafc:	2200      	movs	r2, #0
 800bafe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bb02:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bd50 <_strtod_l+0xbf8>
 800bb06:	f04f 0800 	mov.w	r8, #0
 800bb0a:	4b92      	ldr	r3, [pc, #584]	; (800bd54 <_strtod_l+0xbfc>)
 800bb0c:	403b      	ands	r3, r7
 800bb0e:	9311      	str	r3, [sp, #68]	; 0x44
 800bb10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bb12:	4b91      	ldr	r3, [pc, #580]	; (800bd58 <_strtod_l+0xc00>)
 800bb14:	429a      	cmp	r2, r3
 800bb16:	f040 80b2 	bne.w	800bc7e <_strtod_l+0xb26>
 800bb1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bb1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bb22:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bb26:	ec4b ab10 	vmov	d0, sl, fp
 800bb2a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800bb2e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bb32:	f001 ff1b 	bl	800d96c <__ulp>
 800bb36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bb3a:	ec53 2b10 	vmov	r2, r3, d0
 800bb3e:	f7f4 fd5b 	bl	80005f8 <__aeabi_dmul>
 800bb42:	4652      	mov	r2, sl
 800bb44:	465b      	mov	r3, fp
 800bb46:	f7f4 fba1 	bl	800028c <__adddf3>
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	4981      	ldr	r1, [pc, #516]	; (800bd54 <_strtod_l+0xbfc>)
 800bb4e:	4a83      	ldr	r2, [pc, #524]	; (800bd5c <_strtod_l+0xc04>)
 800bb50:	4019      	ands	r1, r3
 800bb52:	4291      	cmp	r1, r2
 800bb54:	4682      	mov	sl, r0
 800bb56:	d95e      	bls.n	800bc16 <_strtod_l+0xabe>
 800bb58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb5a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d103      	bne.n	800bb6a <_strtod_l+0xa12>
 800bb62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb64:	3301      	adds	r3, #1
 800bb66:	f43f ad43 	beq.w	800b5f0 <_strtod_l+0x498>
 800bb6a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800bd68 <_strtod_l+0xc10>
 800bb6e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bb72:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bb74:	4620      	mov	r0, r4
 800bb76:	f001 fbcd 	bl	800d314 <_Bfree>
 800bb7a:	9907      	ldr	r1, [sp, #28]
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f001 fbc9 	bl	800d314 <_Bfree>
 800bb82:	4631      	mov	r1, r6
 800bb84:	4620      	mov	r0, r4
 800bb86:	f001 fbc5 	bl	800d314 <_Bfree>
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f001 fbc1 	bl	800d314 <_Bfree>
 800bb92:	e613      	b.n	800b7bc <_strtod_l+0x664>
 800bb94:	f1ba 0f00 	cmp.w	sl, #0
 800bb98:	d11b      	bne.n	800bbd2 <_strtod_l+0xa7a>
 800bb9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb9e:	b9f3      	cbnz	r3, 800bbde <_strtod_l+0xa86>
 800bba0:	4b6b      	ldr	r3, [pc, #428]	; (800bd50 <_strtod_l+0xbf8>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	4640      	mov	r0, r8
 800bba6:	4649      	mov	r1, r9
 800bba8:	f7f4 ff98 	bl	8000adc <__aeabi_dcmplt>
 800bbac:	b9d0      	cbnz	r0, 800bbe4 <_strtod_l+0xa8c>
 800bbae:	4640      	mov	r0, r8
 800bbb0:	4649      	mov	r1, r9
 800bbb2:	4b6b      	ldr	r3, [pc, #428]	; (800bd60 <_strtod_l+0xc08>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f7f4 fd1f 	bl	80005f8 <__aeabi_dmul>
 800bbba:	4680      	mov	r8, r0
 800bbbc:	4689      	mov	r9, r1
 800bbbe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bbc2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800bbc6:	931b      	str	r3, [sp, #108]	; 0x6c
 800bbc8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800bbcc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bbd0:	e79b      	b.n	800bb0a <_strtod_l+0x9b2>
 800bbd2:	f1ba 0f01 	cmp.w	sl, #1
 800bbd6:	d102      	bne.n	800bbde <_strtod_l+0xa86>
 800bbd8:	2f00      	cmp	r7, #0
 800bbda:	f43f ad7e 	beq.w	800b6da <_strtod_l+0x582>
 800bbde:	4b61      	ldr	r3, [pc, #388]	; (800bd64 <_strtod_l+0xc0c>)
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	e78c      	b.n	800bafe <_strtod_l+0x9a6>
 800bbe4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800bd60 <_strtod_l+0xc08>
 800bbe8:	f04f 0800 	mov.w	r8, #0
 800bbec:	e7e7      	b.n	800bbbe <_strtod_l+0xa66>
 800bbee:	4b5c      	ldr	r3, [pc, #368]	; (800bd60 <_strtod_l+0xc08>)
 800bbf0:	4640      	mov	r0, r8
 800bbf2:	4649      	mov	r1, r9
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f7f4 fcff 	bl	80005f8 <__aeabi_dmul>
 800bbfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bbfc:	4680      	mov	r8, r0
 800bbfe:	4689      	mov	r9, r1
 800bc00:	b933      	cbnz	r3, 800bc10 <_strtod_l+0xab8>
 800bc02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc06:	9012      	str	r0, [sp, #72]	; 0x48
 800bc08:	9313      	str	r3, [sp, #76]	; 0x4c
 800bc0a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800bc0e:	e7dd      	b.n	800bbcc <_strtod_l+0xa74>
 800bc10:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800bc14:	e7f9      	b.n	800bc0a <_strtod_l+0xab2>
 800bc16:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bc1a:	9b04      	ldr	r3, [sp, #16]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d1a8      	bne.n	800bb72 <_strtod_l+0xa1a>
 800bc20:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bc24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc26:	0d1b      	lsrs	r3, r3, #20
 800bc28:	051b      	lsls	r3, r3, #20
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d1a1      	bne.n	800bb72 <_strtod_l+0xa1a>
 800bc2e:	4640      	mov	r0, r8
 800bc30:	4649      	mov	r1, r9
 800bc32:	f7f5 f841 	bl	8000cb8 <__aeabi_d2lz>
 800bc36:	f7f4 fcb1 	bl	800059c <__aeabi_l2d>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4640      	mov	r0, r8
 800bc40:	4649      	mov	r1, r9
 800bc42:	f7f4 fb21 	bl	8000288 <__aeabi_dsub>
 800bc46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bc48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc4c:	ea43 030a 	orr.w	r3, r3, sl
 800bc50:	4313      	orrs	r3, r2
 800bc52:	4680      	mov	r8, r0
 800bc54:	4689      	mov	r9, r1
 800bc56:	d053      	beq.n	800bd00 <_strtod_l+0xba8>
 800bc58:	a335      	add	r3, pc, #212	; (adr r3, 800bd30 <_strtod_l+0xbd8>)
 800bc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5e:	f7f4 ff3d 	bl	8000adc <__aeabi_dcmplt>
 800bc62:	2800      	cmp	r0, #0
 800bc64:	f47f acce 	bne.w	800b604 <_strtod_l+0x4ac>
 800bc68:	a333      	add	r3, pc, #204	; (adr r3, 800bd38 <_strtod_l+0xbe0>)
 800bc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6e:	4640      	mov	r0, r8
 800bc70:	4649      	mov	r1, r9
 800bc72:	f7f4 ff51 	bl	8000b18 <__aeabi_dcmpgt>
 800bc76:	2800      	cmp	r0, #0
 800bc78:	f43f af7b 	beq.w	800bb72 <_strtod_l+0xa1a>
 800bc7c:	e4c2      	b.n	800b604 <_strtod_l+0x4ac>
 800bc7e:	9b04      	ldr	r3, [sp, #16]
 800bc80:	b333      	cbz	r3, 800bcd0 <_strtod_l+0xb78>
 800bc82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc84:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bc88:	d822      	bhi.n	800bcd0 <_strtod_l+0xb78>
 800bc8a:	a32d      	add	r3, pc, #180	; (adr r3, 800bd40 <_strtod_l+0xbe8>)
 800bc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc90:	4640      	mov	r0, r8
 800bc92:	4649      	mov	r1, r9
 800bc94:	f7f4 ff2c 	bl	8000af0 <__aeabi_dcmple>
 800bc98:	b1a0      	cbz	r0, 800bcc4 <_strtod_l+0xb6c>
 800bc9a:	4649      	mov	r1, r9
 800bc9c:	4640      	mov	r0, r8
 800bc9e:	f7f4 ff83 	bl	8000ba8 <__aeabi_d2uiz>
 800bca2:	2801      	cmp	r0, #1
 800bca4:	bf38      	it	cc
 800bca6:	2001      	movcc	r0, #1
 800bca8:	f7f4 fc2c 	bl	8000504 <__aeabi_ui2d>
 800bcac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcae:	4680      	mov	r8, r0
 800bcb0:	4689      	mov	r9, r1
 800bcb2:	bb13      	cbnz	r3, 800bcfa <_strtod_l+0xba2>
 800bcb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcb8:	9014      	str	r0, [sp, #80]	; 0x50
 800bcba:	9315      	str	r3, [sp, #84]	; 0x54
 800bcbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bcc0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bcc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bcc8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bccc:	1a9b      	subs	r3, r3, r2
 800bcce:	930d      	str	r3, [sp, #52]	; 0x34
 800bcd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bcd4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bcd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bcdc:	f001 fe46 	bl	800d96c <__ulp>
 800bce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bce4:	ec53 2b10 	vmov	r2, r3, d0
 800bce8:	f7f4 fc86 	bl	80005f8 <__aeabi_dmul>
 800bcec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bcf0:	f7f4 facc 	bl	800028c <__adddf3>
 800bcf4:	4682      	mov	sl, r0
 800bcf6:	468b      	mov	fp, r1
 800bcf8:	e78f      	b.n	800bc1a <_strtod_l+0xac2>
 800bcfa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800bcfe:	e7dd      	b.n	800bcbc <_strtod_l+0xb64>
 800bd00:	a311      	add	r3, pc, #68	; (adr r3, 800bd48 <_strtod_l+0xbf0>)
 800bd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd06:	f7f4 fee9 	bl	8000adc <__aeabi_dcmplt>
 800bd0a:	e7b4      	b.n	800bc76 <_strtod_l+0xb1e>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	930e      	str	r3, [sp, #56]	; 0x38
 800bd10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bd12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bd14:	6013      	str	r3, [r2, #0]
 800bd16:	f7ff ba65 	b.w	800b1e4 <_strtod_l+0x8c>
 800bd1a:	2b65      	cmp	r3, #101	; 0x65
 800bd1c:	f43f ab5d 	beq.w	800b3da <_strtod_l+0x282>
 800bd20:	2b45      	cmp	r3, #69	; 0x45
 800bd22:	f43f ab5a 	beq.w	800b3da <_strtod_l+0x282>
 800bd26:	2201      	movs	r2, #1
 800bd28:	f7ff bb92 	b.w	800b450 <_strtod_l+0x2f8>
 800bd2c:	f3af 8000 	nop.w
 800bd30:	94a03595 	.word	0x94a03595
 800bd34:	3fdfffff 	.word	0x3fdfffff
 800bd38:	35afe535 	.word	0x35afe535
 800bd3c:	3fe00000 	.word	0x3fe00000
 800bd40:	ffc00000 	.word	0xffc00000
 800bd44:	41dfffff 	.word	0x41dfffff
 800bd48:	94a03595 	.word	0x94a03595
 800bd4c:	3fcfffff 	.word	0x3fcfffff
 800bd50:	3ff00000 	.word	0x3ff00000
 800bd54:	7ff00000 	.word	0x7ff00000
 800bd58:	7fe00000 	.word	0x7fe00000
 800bd5c:	7c9fffff 	.word	0x7c9fffff
 800bd60:	3fe00000 	.word	0x3fe00000
 800bd64:	bff00000 	.word	0xbff00000
 800bd68:	7fefffff 	.word	0x7fefffff

0800bd6c <_strtod_r>:
 800bd6c:	4b01      	ldr	r3, [pc, #4]	; (800bd74 <_strtod_r+0x8>)
 800bd6e:	f7ff b9f3 	b.w	800b158 <_strtod_l>
 800bd72:	bf00      	nop
 800bd74:	20000084 	.word	0x20000084

0800bd78 <_strtol_l.isra.0>:
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd7e:	d001      	beq.n	800bd84 <_strtol_l.isra.0+0xc>
 800bd80:	2b24      	cmp	r3, #36	; 0x24
 800bd82:	d906      	bls.n	800bd92 <_strtol_l.isra.0+0x1a>
 800bd84:	f7fe faea 	bl	800a35c <__errno>
 800bd88:	2316      	movs	r3, #22
 800bd8a:	6003      	str	r3, [r0, #0]
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd92:	4f3a      	ldr	r7, [pc, #232]	; (800be7c <_strtol_l.isra.0+0x104>)
 800bd94:	468e      	mov	lr, r1
 800bd96:	4676      	mov	r6, lr
 800bd98:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bd9c:	5de5      	ldrb	r5, [r4, r7]
 800bd9e:	f015 0508 	ands.w	r5, r5, #8
 800bda2:	d1f8      	bne.n	800bd96 <_strtol_l.isra.0+0x1e>
 800bda4:	2c2d      	cmp	r4, #45	; 0x2d
 800bda6:	d134      	bne.n	800be12 <_strtol_l.isra.0+0x9a>
 800bda8:	f89e 4000 	ldrb.w	r4, [lr]
 800bdac:	f04f 0801 	mov.w	r8, #1
 800bdb0:	f106 0e02 	add.w	lr, r6, #2
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d05c      	beq.n	800be72 <_strtol_l.isra.0+0xfa>
 800bdb8:	2b10      	cmp	r3, #16
 800bdba:	d10c      	bne.n	800bdd6 <_strtol_l.isra.0+0x5e>
 800bdbc:	2c30      	cmp	r4, #48	; 0x30
 800bdbe:	d10a      	bne.n	800bdd6 <_strtol_l.isra.0+0x5e>
 800bdc0:	f89e 4000 	ldrb.w	r4, [lr]
 800bdc4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bdc8:	2c58      	cmp	r4, #88	; 0x58
 800bdca:	d14d      	bne.n	800be68 <_strtol_l.isra.0+0xf0>
 800bdcc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800bdd0:	2310      	movs	r3, #16
 800bdd2:	f10e 0e02 	add.w	lr, lr, #2
 800bdd6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800bdda:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800bdde:	2600      	movs	r6, #0
 800bde0:	fbbc f9f3 	udiv	r9, ip, r3
 800bde4:	4635      	mov	r5, r6
 800bde6:	fb03 ca19 	mls	sl, r3, r9, ip
 800bdea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800bdee:	2f09      	cmp	r7, #9
 800bdf0:	d818      	bhi.n	800be24 <_strtol_l.isra.0+0xac>
 800bdf2:	463c      	mov	r4, r7
 800bdf4:	42a3      	cmp	r3, r4
 800bdf6:	dd24      	ble.n	800be42 <_strtol_l.isra.0+0xca>
 800bdf8:	2e00      	cmp	r6, #0
 800bdfa:	db1f      	blt.n	800be3c <_strtol_l.isra.0+0xc4>
 800bdfc:	45a9      	cmp	r9, r5
 800bdfe:	d31d      	bcc.n	800be3c <_strtol_l.isra.0+0xc4>
 800be00:	d101      	bne.n	800be06 <_strtol_l.isra.0+0x8e>
 800be02:	45a2      	cmp	sl, r4
 800be04:	db1a      	blt.n	800be3c <_strtol_l.isra.0+0xc4>
 800be06:	fb05 4503 	mla	r5, r5, r3, r4
 800be0a:	2601      	movs	r6, #1
 800be0c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800be10:	e7eb      	b.n	800bdea <_strtol_l.isra.0+0x72>
 800be12:	2c2b      	cmp	r4, #43	; 0x2b
 800be14:	bf08      	it	eq
 800be16:	f89e 4000 	ldrbeq.w	r4, [lr]
 800be1a:	46a8      	mov	r8, r5
 800be1c:	bf08      	it	eq
 800be1e:	f106 0e02 	addeq.w	lr, r6, #2
 800be22:	e7c7      	b.n	800bdb4 <_strtol_l.isra.0+0x3c>
 800be24:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800be28:	2f19      	cmp	r7, #25
 800be2a:	d801      	bhi.n	800be30 <_strtol_l.isra.0+0xb8>
 800be2c:	3c37      	subs	r4, #55	; 0x37
 800be2e:	e7e1      	b.n	800bdf4 <_strtol_l.isra.0+0x7c>
 800be30:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800be34:	2f19      	cmp	r7, #25
 800be36:	d804      	bhi.n	800be42 <_strtol_l.isra.0+0xca>
 800be38:	3c57      	subs	r4, #87	; 0x57
 800be3a:	e7db      	b.n	800bdf4 <_strtol_l.isra.0+0x7c>
 800be3c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800be40:	e7e4      	b.n	800be0c <_strtol_l.isra.0+0x94>
 800be42:	2e00      	cmp	r6, #0
 800be44:	da05      	bge.n	800be52 <_strtol_l.isra.0+0xda>
 800be46:	2322      	movs	r3, #34	; 0x22
 800be48:	6003      	str	r3, [r0, #0]
 800be4a:	4665      	mov	r5, ip
 800be4c:	b942      	cbnz	r2, 800be60 <_strtol_l.isra.0+0xe8>
 800be4e:	4628      	mov	r0, r5
 800be50:	e79d      	b.n	800bd8e <_strtol_l.isra.0+0x16>
 800be52:	f1b8 0f00 	cmp.w	r8, #0
 800be56:	d000      	beq.n	800be5a <_strtol_l.isra.0+0xe2>
 800be58:	426d      	negs	r5, r5
 800be5a:	2a00      	cmp	r2, #0
 800be5c:	d0f7      	beq.n	800be4e <_strtol_l.isra.0+0xd6>
 800be5e:	b10e      	cbz	r6, 800be64 <_strtol_l.isra.0+0xec>
 800be60:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800be64:	6011      	str	r1, [r2, #0]
 800be66:	e7f2      	b.n	800be4e <_strtol_l.isra.0+0xd6>
 800be68:	2430      	movs	r4, #48	; 0x30
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d1b3      	bne.n	800bdd6 <_strtol_l.isra.0+0x5e>
 800be6e:	2308      	movs	r3, #8
 800be70:	e7b1      	b.n	800bdd6 <_strtol_l.isra.0+0x5e>
 800be72:	2c30      	cmp	r4, #48	; 0x30
 800be74:	d0a4      	beq.n	800bdc0 <_strtol_l.isra.0+0x48>
 800be76:	230a      	movs	r3, #10
 800be78:	e7ad      	b.n	800bdd6 <_strtol_l.isra.0+0x5e>
 800be7a:	bf00      	nop
 800be7c:	0800ee31 	.word	0x0800ee31

0800be80 <_strtol_r>:
 800be80:	f7ff bf7a 	b.w	800bd78 <_strtol_l.isra.0>

0800be84 <quorem>:
 800be84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be88:	6903      	ldr	r3, [r0, #16]
 800be8a:	690c      	ldr	r4, [r1, #16]
 800be8c:	42a3      	cmp	r3, r4
 800be8e:	4607      	mov	r7, r0
 800be90:	f2c0 8081 	blt.w	800bf96 <quorem+0x112>
 800be94:	3c01      	subs	r4, #1
 800be96:	f101 0814 	add.w	r8, r1, #20
 800be9a:	f100 0514 	add.w	r5, r0, #20
 800be9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bea2:	9301      	str	r3, [sp, #4]
 800bea4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bea8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800beac:	3301      	adds	r3, #1
 800beae:	429a      	cmp	r2, r3
 800beb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800beb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800beb8:	fbb2 f6f3 	udiv	r6, r2, r3
 800bebc:	d331      	bcc.n	800bf22 <quorem+0x9e>
 800bebe:	f04f 0e00 	mov.w	lr, #0
 800bec2:	4640      	mov	r0, r8
 800bec4:	46ac      	mov	ip, r5
 800bec6:	46f2      	mov	sl, lr
 800bec8:	f850 2b04 	ldr.w	r2, [r0], #4
 800becc:	b293      	uxth	r3, r2
 800bece:	fb06 e303 	mla	r3, r6, r3, lr
 800bed2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	ebaa 0303 	sub.w	r3, sl, r3
 800bedc:	0c12      	lsrs	r2, r2, #16
 800bede:	f8dc a000 	ldr.w	sl, [ip]
 800bee2:	fb06 e202 	mla	r2, r6, r2, lr
 800bee6:	fa13 f38a 	uxtah	r3, r3, sl
 800beea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800beee:	fa1f fa82 	uxth.w	sl, r2
 800bef2:	f8dc 2000 	ldr.w	r2, [ip]
 800bef6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800befa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800befe:	b29b      	uxth	r3, r3
 800bf00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf04:	4581      	cmp	r9, r0
 800bf06:	f84c 3b04 	str.w	r3, [ip], #4
 800bf0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bf0e:	d2db      	bcs.n	800bec8 <quorem+0x44>
 800bf10:	f855 300b 	ldr.w	r3, [r5, fp]
 800bf14:	b92b      	cbnz	r3, 800bf22 <quorem+0x9e>
 800bf16:	9b01      	ldr	r3, [sp, #4]
 800bf18:	3b04      	subs	r3, #4
 800bf1a:	429d      	cmp	r5, r3
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	d32e      	bcc.n	800bf7e <quorem+0xfa>
 800bf20:	613c      	str	r4, [r7, #16]
 800bf22:	4638      	mov	r0, r7
 800bf24:	f001 fc7e 	bl	800d824 <__mcmp>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	db24      	blt.n	800bf76 <quorem+0xf2>
 800bf2c:	3601      	adds	r6, #1
 800bf2e:	4628      	mov	r0, r5
 800bf30:	f04f 0c00 	mov.w	ip, #0
 800bf34:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf38:	f8d0 e000 	ldr.w	lr, [r0]
 800bf3c:	b293      	uxth	r3, r2
 800bf3e:	ebac 0303 	sub.w	r3, ip, r3
 800bf42:	0c12      	lsrs	r2, r2, #16
 800bf44:	fa13 f38e 	uxtah	r3, r3, lr
 800bf48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bf4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf56:	45c1      	cmp	r9, r8
 800bf58:	f840 3b04 	str.w	r3, [r0], #4
 800bf5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bf60:	d2e8      	bcs.n	800bf34 <quorem+0xb0>
 800bf62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf6a:	b922      	cbnz	r2, 800bf76 <quorem+0xf2>
 800bf6c:	3b04      	subs	r3, #4
 800bf6e:	429d      	cmp	r5, r3
 800bf70:	461a      	mov	r2, r3
 800bf72:	d30a      	bcc.n	800bf8a <quorem+0x106>
 800bf74:	613c      	str	r4, [r7, #16]
 800bf76:	4630      	mov	r0, r6
 800bf78:	b003      	add	sp, #12
 800bf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf7e:	6812      	ldr	r2, [r2, #0]
 800bf80:	3b04      	subs	r3, #4
 800bf82:	2a00      	cmp	r2, #0
 800bf84:	d1cc      	bne.n	800bf20 <quorem+0x9c>
 800bf86:	3c01      	subs	r4, #1
 800bf88:	e7c7      	b.n	800bf1a <quorem+0x96>
 800bf8a:	6812      	ldr	r2, [r2, #0]
 800bf8c:	3b04      	subs	r3, #4
 800bf8e:	2a00      	cmp	r2, #0
 800bf90:	d1f0      	bne.n	800bf74 <quorem+0xf0>
 800bf92:	3c01      	subs	r4, #1
 800bf94:	e7eb      	b.n	800bf6e <quorem+0xea>
 800bf96:	2000      	movs	r0, #0
 800bf98:	e7ee      	b.n	800bf78 <quorem+0xf4>
 800bf9a:	0000      	movs	r0, r0
 800bf9c:	0000      	movs	r0, r0
	...

0800bfa0 <_dtoa_r>:
 800bfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa4:	ed2d 8b02 	vpush	{d8}
 800bfa8:	ec57 6b10 	vmov	r6, r7, d0
 800bfac:	b095      	sub	sp, #84	; 0x54
 800bfae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bfb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bfb4:	9105      	str	r1, [sp, #20]
 800bfb6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bfba:	4604      	mov	r4, r0
 800bfbc:	9209      	str	r2, [sp, #36]	; 0x24
 800bfbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800bfc0:	b975      	cbnz	r5, 800bfe0 <_dtoa_r+0x40>
 800bfc2:	2010      	movs	r0, #16
 800bfc4:	f001 f94c 	bl	800d260 <malloc>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	6260      	str	r0, [r4, #36]	; 0x24
 800bfcc:	b920      	cbnz	r0, 800bfd8 <_dtoa_r+0x38>
 800bfce:	4bb2      	ldr	r3, [pc, #712]	; (800c298 <_dtoa_r+0x2f8>)
 800bfd0:	21ea      	movs	r1, #234	; 0xea
 800bfd2:	48b2      	ldr	r0, [pc, #712]	; (800c29c <_dtoa_r+0x2fc>)
 800bfd4:	f002 f868 	bl	800e0a8 <__assert_func>
 800bfd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bfdc:	6005      	str	r5, [r0, #0]
 800bfde:	60c5      	str	r5, [r0, #12]
 800bfe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfe2:	6819      	ldr	r1, [r3, #0]
 800bfe4:	b151      	cbz	r1, 800bffc <_dtoa_r+0x5c>
 800bfe6:	685a      	ldr	r2, [r3, #4]
 800bfe8:	604a      	str	r2, [r1, #4]
 800bfea:	2301      	movs	r3, #1
 800bfec:	4093      	lsls	r3, r2
 800bfee:	608b      	str	r3, [r1, #8]
 800bff0:	4620      	mov	r0, r4
 800bff2:	f001 f98f 	bl	800d314 <_Bfree>
 800bff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bff8:	2200      	movs	r2, #0
 800bffa:	601a      	str	r2, [r3, #0]
 800bffc:	1e3b      	subs	r3, r7, #0
 800bffe:	bfb9      	ittee	lt
 800c000:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c004:	9303      	strlt	r3, [sp, #12]
 800c006:	2300      	movge	r3, #0
 800c008:	f8c8 3000 	strge.w	r3, [r8]
 800c00c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c010:	4ba3      	ldr	r3, [pc, #652]	; (800c2a0 <_dtoa_r+0x300>)
 800c012:	bfbc      	itt	lt
 800c014:	2201      	movlt	r2, #1
 800c016:	f8c8 2000 	strlt.w	r2, [r8]
 800c01a:	ea33 0309 	bics.w	r3, r3, r9
 800c01e:	d11b      	bne.n	800c058 <_dtoa_r+0xb8>
 800c020:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c022:	f242 730f 	movw	r3, #9999	; 0x270f
 800c026:	6013      	str	r3, [r2, #0]
 800c028:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c02c:	4333      	orrs	r3, r6
 800c02e:	f000 857a 	beq.w	800cb26 <_dtoa_r+0xb86>
 800c032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c034:	b963      	cbnz	r3, 800c050 <_dtoa_r+0xb0>
 800c036:	4b9b      	ldr	r3, [pc, #620]	; (800c2a4 <_dtoa_r+0x304>)
 800c038:	e024      	b.n	800c084 <_dtoa_r+0xe4>
 800c03a:	4b9b      	ldr	r3, [pc, #620]	; (800c2a8 <_dtoa_r+0x308>)
 800c03c:	9300      	str	r3, [sp, #0]
 800c03e:	3308      	adds	r3, #8
 800c040:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c042:	6013      	str	r3, [r2, #0]
 800c044:	9800      	ldr	r0, [sp, #0]
 800c046:	b015      	add	sp, #84	; 0x54
 800c048:	ecbd 8b02 	vpop	{d8}
 800c04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c050:	4b94      	ldr	r3, [pc, #592]	; (800c2a4 <_dtoa_r+0x304>)
 800c052:	9300      	str	r3, [sp, #0]
 800c054:	3303      	adds	r3, #3
 800c056:	e7f3      	b.n	800c040 <_dtoa_r+0xa0>
 800c058:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c05c:	2200      	movs	r2, #0
 800c05e:	ec51 0b17 	vmov	r0, r1, d7
 800c062:	2300      	movs	r3, #0
 800c064:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c068:	f7f4 fd2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c06c:	4680      	mov	r8, r0
 800c06e:	b158      	cbz	r0, 800c088 <_dtoa_r+0xe8>
 800c070:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c072:	2301      	movs	r3, #1
 800c074:	6013      	str	r3, [r2, #0]
 800c076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f000 8551 	beq.w	800cb20 <_dtoa_r+0xb80>
 800c07e:	488b      	ldr	r0, [pc, #556]	; (800c2ac <_dtoa_r+0x30c>)
 800c080:	6018      	str	r0, [r3, #0]
 800c082:	1e43      	subs	r3, r0, #1
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	e7dd      	b.n	800c044 <_dtoa_r+0xa4>
 800c088:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c08c:	aa12      	add	r2, sp, #72	; 0x48
 800c08e:	a913      	add	r1, sp, #76	; 0x4c
 800c090:	4620      	mov	r0, r4
 800c092:	f001 fce7 	bl	800da64 <__d2b>
 800c096:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c09a:	4683      	mov	fp, r0
 800c09c:	2d00      	cmp	r5, #0
 800c09e:	d07c      	beq.n	800c19a <_dtoa_r+0x1fa>
 800c0a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c0a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c0ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c0b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c0b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c0ba:	4b7d      	ldr	r3, [pc, #500]	; (800c2b0 <_dtoa_r+0x310>)
 800c0bc:	2200      	movs	r2, #0
 800c0be:	4630      	mov	r0, r6
 800c0c0:	4639      	mov	r1, r7
 800c0c2:	f7f4 f8e1 	bl	8000288 <__aeabi_dsub>
 800c0c6:	a36e      	add	r3, pc, #440	; (adr r3, 800c280 <_dtoa_r+0x2e0>)
 800c0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0cc:	f7f4 fa94 	bl	80005f8 <__aeabi_dmul>
 800c0d0:	a36d      	add	r3, pc, #436	; (adr r3, 800c288 <_dtoa_r+0x2e8>)
 800c0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d6:	f7f4 f8d9 	bl	800028c <__adddf3>
 800c0da:	4606      	mov	r6, r0
 800c0dc:	4628      	mov	r0, r5
 800c0de:	460f      	mov	r7, r1
 800c0e0:	f7f4 fa20 	bl	8000524 <__aeabi_i2d>
 800c0e4:	a36a      	add	r3, pc, #424	; (adr r3, 800c290 <_dtoa_r+0x2f0>)
 800c0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ea:	f7f4 fa85 	bl	80005f8 <__aeabi_dmul>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	4630      	mov	r0, r6
 800c0f4:	4639      	mov	r1, r7
 800c0f6:	f7f4 f8c9 	bl	800028c <__adddf3>
 800c0fa:	4606      	mov	r6, r0
 800c0fc:	460f      	mov	r7, r1
 800c0fe:	f7f4 fd2b 	bl	8000b58 <__aeabi_d2iz>
 800c102:	2200      	movs	r2, #0
 800c104:	4682      	mov	sl, r0
 800c106:	2300      	movs	r3, #0
 800c108:	4630      	mov	r0, r6
 800c10a:	4639      	mov	r1, r7
 800c10c:	f7f4 fce6 	bl	8000adc <__aeabi_dcmplt>
 800c110:	b148      	cbz	r0, 800c126 <_dtoa_r+0x186>
 800c112:	4650      	mov	r0, sl
 800c114:	f7f4 fa06 	bl	8000524 <__aeabi_i2d>
 800c118:	4632      	mov	r2, r6
 800c11a:	463b      	mov	r3, r7
 800c11c:	f7f4 fcd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c120:	b908      	cbnz	r0, 800c126 <_dtoa_r+0x186>
 800c122:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c126:	f1ba 0f16 	cmp.w	sl, #22
 800c12a:	d854      	bhi.n	800c1d6 <_dtoa_r+0x236>
 800c12c:	4b61      	ldr	r3, [pc, #388]	; (800c2b4 <_dtoa_r+0x314>)
 800c12e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c136:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c13a:	f7f4 fccf 	bl	8000adc <__aeabi_dcmplt>
 800c13e:	2800      	cmp	r0, #0
 800c140:	d04b      	beq.n	800c1da <_dtoa_r+0x23a>
 800c142:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c146:	2300      	movs	r3, #0
 800c148:	930e      	str	r3, [sp, #56]	; 0x38
 800c14a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c14c:	1b5d      	subs	r5, r3, r5
 800c14e:	1e6b      	subs	r3, r5, #1
 800c150:	9304      	str	r3, [sp, #16]
 800c152:	bf43      	ittte	mi
 800c154:	2300      	movmi	r3, #0
 800c156:	f1c5 0801 	rsbmi	r8, r5, #1
 800c15a:	9304      	strmi	r3, [sp, #16]
 800c15c:	f04f 0800 	movpl.w	r8, #0
 800c160:	f1ba 0f00 	cmp.w	sl, #0
 800c164:	db3b      	blt.n	800c1de <_dtoa_r+0x23e>
 800c166:	9b04      	ldr	r3, [sp, #16]
 800c168:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c16c:	4453      	add	r3, sl
 800c16e:	9304      	str	r3, [sp, #16]
 800c170:	2300      	movs	r3, #0
 800c172:	9306      	str	r3, [sp, #24]
 800c174:	9b05      	ldr	r3, [sp, #20]
 800c176:	2b09      	cmp	r3, #9
 800c178:	d869      	bhi.n	800c24e <_dtoa_r+0x2ae>
 800c17a:	2b05      	cmp	r3, #5
 800c17c:	bfc4      	itt	gt
 800c17e:	3b04      	subgt	r3, #4
 800c180:	9305      	strgt	r3, [sp, #20]
 800c182:	9b05      	ldr	r3, [sp, #20]
 800c184:	f1a3 0302 	sub.w	r3, r3, #2
 800c188:	bfcc      	ite	gt
 800c18a:	2500      	movgt	r5, #0
 800c18c:	2501      	movle	r5, #1
 800c18e:	2b03      	cmp	r3, #3
 800c190:	d869      	bhi.n	800c266 <_dtoa_r+0x2c6>
 800c192:	e8df f003 	tbb	[pc, r3]
 800c196:	4e2c      	.short	0x4e2c
 800c198:	5a4c      	.short	0x5a4c
 800c19a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c19e:	441d      	add	r5, r3
 800c1a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c1a4:	2b20      	cmp	r3, #32
 800c1a6:	bfc1      	itttt	gt
 800c1a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c1ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c1b0:	fa09 f303 	lslgt.w	r3, r9, r3
 800c1b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c1b8:	bfda      	itte	le
 800c1ba:	f1c3 0320 	rsble	r3, r3, #32
 800c1be:	fa06 f003 	lslle.w	r0, r6, r3
 800c1c2:	4318      	orrgt	r0, r3
 800c1c4:	f7f4 f99e 	bl	8000504 <__aeabi_ui2d>
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	4606      	mov	r6, r0
 800c1cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c1d0:	3d01      	subs	r5, #1
 800c1d2:	9310      	str	r3, [sp, #64]	; 0x40
 800c1d4:	e771      	b.n	800c0ba <_dtoa_r+0x11a>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e7b6      	b.n	800c148 <_dtoa_r+0x1a8>
 800c1da:	900e      	str	r0, [sp, #56]	; 0x38
 800c1dc:	e7b5      	b.n	800c14a <_dtoa_r+0x1aa>
 800c1de:	f1ca 0300 	rsb	r3, sl, #0
 800c1e2:	9306      	str	r3, [sp, #24]
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	eba8 080a 	sub.w	r8, r8, sl
 800c1ea:	930d      	str	r3, [sp, #52]	; 0x34
 800c1ec:	e7c2      	b.n	800c174 <_dtoa_r+0x1d4>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	9308      	str	r3, [sp, #32]
 800c1f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	dc39      	bgt.n	800c26c <_dtoa_r+0x2cc>
 800c1f8:	f04f 0901 	mov.w	r9, #1
 800c1fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800c200:	464b      	mov	r3, r9
 800c202:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c206:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c208:	2200      	movs	r2, #0
 800c20a:	6042      	str	r2, [r0, #4]
 800c20c:	2204      	movs	r2, #4
 800c20e:	f102 0614 	add.w	r6, r2, #20
 800c212:	429e      	cmp	r6, r3
 800c214:	6841      	ldr	r1, [r0, #4]
 800c216:	d92f      	bls.n	800c278 <_dtoa_r+0x2d8>
 800c218:	4620      	mov	r0, r4
 800c21a:	f001 f83b 	bl	800d294 <_Balloc>
 800c21e:	9000      	str	r0, [sp, #0]
 800c220:	2800      	cmp	r0, #0
 800c222:	d14b      	bne.n	800c2bc <_dtoa_r+0x31c>
 800c224:	4b24      	ldr	r3, [pc, #144]	; (800c2b8 <_dtoa_r+0x318>)
 800c226:	4602      	mov	r2, r0
 800c228:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c22c:	e6d1      	b.n	800bfd2 <_dtoa_r+0x32>
 800c22e:	2301      	movs	r3, #1
 800c230:	e7de      	b.n	800c1f0 <_dtoa_r+0x250>
 800c232:	2300      	movs	r3, #0
 800c234:	9308      	str	r3, [sp, #32]
 800c236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c238:	eb0a 0903 	add.w	r9, sl, r3
 800c23c:	f109 0301 	add.w	r3, r9, #1
 800c240:	2b01      	cmp	r3, #1
 800c242:	9301      	str	r3, [sp, #4]
 800c244:	bfb8      	it	lt
 800c246:	2301      	movlt	r3, #1
 800c248:	e7dd      	b.n	800c206 <_dtoa_r+0x266>
 800c24a:	2301      	movs	r3, #1
 800c24c:	e7f2      	b.n	800c234 <_dtoa_r+0x294>
 800c24e:	2501      	movs	r5, #1
 800c250:	2300      	movs	r3, #0
 800c252:	9305      	str	r3, [sp, #20]
 800c254:	9508      	str	r5, [sp, #32]
 800c256:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800c25a:	2200      	movs	r2, #0
 800c25c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c260:	2312      	movs	r3, #18
 800c262:	9209      	str	r2, [sp, #36]	; 0x24
 800c264:	e7cf      	b.n	800c206 <_dtoa_r+0x266>
 800c266:	2301      	movs	r3, #1
 800c268:	9308      	str	r3, [sp, #32]
 800c26a:	e7f4      	b.n	800c256 <_dtoa_r+0x2b6>
 800c26c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c270:	f8cd 9004 	str.w	r9, [sp, #4]
 800c274:	464b      	mov	r3, r9
 800c276:	e7c6      	b.n	800c206 <_dtoa_r+0x266>
 800c278:	3101      	adds	r1, #1
 800c27a:	6041      	str	r1, [r0, #4]
 800c27c:	0052      	lsls	r2, r2, #1
 800c27e:	e7c6      	b.n	800c20e <_dtoa_r+0x26e>
 800c280:	636f4361 	.word	0x636f4361
 800c284:	3fd287a7 	.word	0x3fd287a7
 800c288:	8b60c8b3 	.word	0x8b60c8b3
 800c28c:	3fc68a28 	.word	0x3fc68a28
 800c290:	509f79fb 	.word	0x509f79fb
 800c294:	3fd34413 	.word	0x3fd34413
 800c298:	0800ef3e 	.word	0x0800ef3e
 800c29c:	0800ef55 	.word	0x0800ef55
 800c2a0:	7ff00000 	.word	0x7ff00000
 800c2a4:	0800ef3a 	.word	0x0800ef3a
 800c2a8:	0800ef31 	.word	0x0800ef31
 800c2ac:	0800edb1 	.word	0x0800edb1
 800c2b0:	3ff80000 	.word	0x3ff80000
 800c2b4:	0800f0d0 	.word	0x0800f0d0
 800c2b8:	0800efb4 	.word	0x0800efb4
 800c2bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2be:	9a00      	ldr	r2, [sp, #0]
 800c2c0:	601a      	str	r2, [r3, #0]
 800c2c2:	9b01      	ldr	r3, [sp, #4]
 800c2c4:	2b0e      	cmp	r3, #14
 800c2c6:	f200 80ad 	bhi.w	800c424 <_dtoa_r+0x484>
 800c2ca:	2d00      	cmp	r5, #0
 800c2cc:	f000 80aa 	beq.w	800c424 <_dtoa_r+0x484>
 800c2d0:	f1ba 0f00 	cmp.w	sl, #0
 800c2d4:	dd36      	ble.n	800c344 <_dtoa_r+0x3a4>
 800c2d6:	4ac3      	ldr	r2, [pc, #780]	; (800c5e4 <_dtoa_r+0x644>)
 800c2d8:	f00a 030f 	and.w	r3, sl, #15
 800c2dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c2e0:	ed93 7b00 	vldr	d7, [r3]
 800c2e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c2e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c2ec:	eeb0 8a47 	vmov.f32	s16, s14
 800c2f0:	eef0 8a67 	vmov.f32	s17, s15
 800c2f4:	d016      	beq.n	800c324 <_dtoa_r+0x384>
 800c2f6:	4bbc      	ldr	r3, [pc, #752]	; (800c5e8 <_dtoa_r+0x648>)
 800c2f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c2fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c300:	f7f4 faa4 	bl	800084c <__aeabi_ddiv>
 800c304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c308:	f007 070f 	and.w	r7, r7, #15
 800c30c:	2503      	movs	r5, #3
 800c30e:	4eb6      	ldr	r6, [pc, #728]	; (800c5e8 <_dtoa_r+0x648>)
 800c310:	b957      	cbnz	r7, 800c328 <_dtoa_r+0x388>
 800c312:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c316:	ec53 2b18 	vmov	r2, r3, d8
 800c31a:	f7f4 fa97 	bl	800084c <__aeabi_ddiv>
 800c31e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c322:	e029      	b.n	800c378 <_dtoa_r+0x3d8>
 800c324:	2502      	movs	r5, #2
 800c326:	e7f2      	b.n	800c30e <_dtoa_r+0x36e>
 800c328:	07f9      	lsls	r1, r7, #31
 800c32a:	d508      	bpl.n	800c33e <_dtoa_r+0x39e>
 800c32c:	ec51 0b18 	vmov	r0, r1, d8
 800c330:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c334:	f7f4 f960 	bl	80005f8 <__aeabi_dmul>
 800c338:	ec41 0b18 	vmov	d8, r0, r1
 800c33c:	3501      	adds	r5, #1
 800c33e:	107f      	asrs	r7, r7, #1
 800c340:	3608      	adds	r6, #8
 800c342:	e7e5      	b.n	800c310 <_dtoa_r+0x370>
 800c344:	f000 80a6 	beq.w	800c494 <_dtoa_r+0x4f4>
 800c348:	f1ca 0600 	rsb	r6, sl, #0
 800c34c:	4ba5      	ldr	r3, [pc, #660]	; (800c5e4 <_dtoa_r+0x644>)
 800c34e:	4fa6      	ldr	r7, [pc, #664]	; (800c5e8 <_dtoa_r+0x648>)
 800c350:	f006 020f 	and.w	r2, r6, #15
 800c354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c360:	f7f4 f94a 	bl	80005f8 <__aeabi_dmul>
 800c364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c368:	1136      	asrs	r6, r6, #4
 800c36a:	2300      	movs	r3, #0
 800c36c:	2502      	movs	r5, #2
 800c36e:	2e00      	cmp	r6, #0
 800c370:	f040 8085 	bne.w	800c47e <_dtoa_r+0x4de>
 800c374:	2b00      	cmp	r3, #0
 800c376:	d1d2      	bne.n	800c31e <_dtoa_r+0x37e>
 800c378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f000 808c 	beq.w	800c498 <_dtoa_r+0x4f8>
 800c380:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c384:	4b99      	ldr	r3, [pc, #612]	; (800c5ec <_dtoa_r+0x64c>)
 800c386:	2200      	movs	r2, #0
 800c388:	4630      	mov	r0, r6
 800c38a:	4639      	mov	r1, r7
 800c38c:	f7f4 fba6 	bl	8000adc <__aeabi_dcmplt>
 800c390:	2800      	cmp	r0, #0
 800c392:	f000 8081 	beq.w	800c498 <_dtoa_r+0x4f8>
 800c396:	9b01      	ldr	r3, [sp, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d07d      	beq.n	800c498 <_dtoa_r+0x4f8>
 800c39c:	f1b9 0f00 	cmp.w	r9, #0
 800c3a0:	dd3c      	ble.n	800c41c <_dtoa_r+0x47c>
 800c3a2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800c3a6:	9307      	str	r3, [sp, #28]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	4b91      	ldr	r3, [pc, #580]	; (800c5f0 <_dtoa_r+0x650>)
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	4639      	mov	r1, r7
 800c3b0:	f7f4 f922 	bl	80005f8 <__aeabi_dmul>
 800c3b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3b8:	3501      	adds	r5, #1
 800c3ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c3be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	f7f4 f8ae 	bl	8000524 <__aeabi_i2d>
 800c3c8:	4632      	mov	r2, r6
 800c3ca:	463b      	mov	r3, r7
 800c3cc:	f7f4 f914 	bl	80005f8 <__aeabi_dmul>
 800c3d0:	4b88      	ldr	r3, [pc, #544]	; (800c5f4 <_dtoa_r+0x654>)
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f7f3 ff5a 	bl	800028c <__adddf3>
 800c3d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c3dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3e0:	9303      	str	r3, [sp, #12]
 800c3e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d15c      	bne.n	800c4a2 <_dtoa_r+0x502>
 800c3e8:	4b83      	ldr	r3, [pc, #524]	; (800c5f8 <_dtoa_r+0x658>)
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	4630      	mov	r0, r6
 800c3ee:	4639      	mov	r1, r7
 800c3f0:	f7f3 ff4a 	bl	8000288 <__aeabi_dsub>
 800c3f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3f8:	4606      	mov	r6, r0
 800c3fa:	460f      	mov	r7, r1
 800c3fc:	f7f4 fb8c 	bl	8000b18 <__aeabi_dcmpgt>
 800c400:	2800      	cmp	r0, #0
 800c402:	f040 8296 	bne.w	800c932 <_dtoa_r+0x992>
 800c406:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c40a:	4630      	mov	r0, r6
 800c40c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c410:	4639      	mov	r1, r7
 800c412:	f7f4 fb63 	bl	8000adc <__aeabi_dcmplt>
 800c416:	2800      	cmp	r0, #0
 800c418:	f040 8288 	bne.w	800c92c <_dtoa_r+0x98c>
 800c41c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c420:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c424:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c426:	2b00      	cmp	r3, #0
 800c428:	f2c0 8158 	blt.w	800c6dc <_dtoa_r+0x73c>
 800c42c:	f1ba 0f0e 	cmp.w	sl, #14
 800c430:	f300 8154 	bgt.w	800c6dc <_dtoa_r+0x73c>
 800c434:	4b6b      	ldr	r3, [pc, #428]	; (800c5e4 <_dtoa_r+0x644>)
 800c436:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c43a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c440:	2b00      	cmp	r3, #0
 800c442:	f280 80e3 	bge.w	800c60c <_dtoa_r+0x66c>
 800c446:	9b01      	ldr	r3, [sp, #4]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	f300 80df 	bgt.w	800c60c <_dtoa_r+0x66c>
 800c44e:	f040 826d 	bne.w	800c92c <_dtoa_r+0x98c>
 800c452:	4b69      	ldr	r3, [pc, #420]	; (800c5f8 <_dtoa_r+0x658>)
 800c454:	2200      	movs	r2, #0
 800c456:	4640      	mov	r0, r8
 800c458:	4649      	mov	r1, r9
 800c45a:	f7f4 f8cd 	bl	80005f8 <__aeabi_dmul>
 800c45e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c462:	f7f4 fb4f 	bl	8000b04 <__aeabi_dcmpge>
 800c466:	9e01      	ldr	r6, [sp, #4]
 800c468:	4637      	mov	r7, r6
 800c46a:	2800      	cmp	r0, #0
 800c46c:	f040 8243 	bne.w	800c8f6 <_dtoa_r+0x956>
 800c470:	9d00      	ldr	r5, [sp, #0]
 800c472:	2331      	movs	r3, #49	; 0x31
 800c474:	f805 3b01 	strb.w	r3, [r5], #1
 800c478:	f10a 0a01 	add.w	sl, sl, #1
 800c47c:	e23f      	b.n	800c8fe <_dtoa_r+0x95e>
 800c47e:	07f2      	lsls	r2, r6, #31
 800c480:	d505      	bpl.n	800c48e <_dtoa_r+0x4ee>
 800c482:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c486:	f7f4 f8b7 	bl	80005f8 <__aeabi_dmul>
 800c48a:	3501      	adds	r5, #1
 800c48c:	2301      	movs	r3, #1
 800c48e:	1076      	asrs	r6, r6, #1
 800c490:	3708      	adds	r7, #8
 800c492:	e76c      	b.n	800c36e <_dtoa_r+0x3ce>
 800c494:	2502      	movs	r5, #2
 800c496:	e76f      	b.n	800c378 <_dtoa_r+0x3d8>
 800c498:	9b01      	ldr	r3, [sp, #4]
 800c49a:	f8cd a01c 	str.w	sl, [sp, #28]
 800c49e:	930c      	str	r3, [sp, #48]	; 0x30
 800c4a0:	e78d      	b.n	800c3be <_dtoa_r+0x41e>
 800c4a2:	9900      	ldr	r1, [sp, #0]
 800c4a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c4a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4a8:	4b4e      	ldr	r3, [pc, #312]	; (800c5e4 <_dtoa_r+0x644>)
 800c4aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4ae:	4401      	add	r1, r0
 800c4b0:	9102      	str	r1, [sp, #8]
 800c4b2:	9908      	ldr	r1, [sp, #32]
 800c4b4:	eeb0 8a47 	vmov.f32	s16, s14
 800c4b8:	eef0 8a67 	vmov.f32	s17, s15
 800c4bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c4c4:	2900      	cmp	r1, #0
 800c4c6:	d045      	beq.n	800c554 <_dtoa_r+0x5b4>
 800c4c8:	494c      	ldr	r1, [pc, #304]	; (800c5fc <_dtoa_r+0x65c>)
 800c4ca:	2000      	movs	r0, #0
 800c4cc:	f7f4 f9be 	bl	800084c <__aeabi_ddiv>
 800c4d0:	ec53 2b18 	vmov	r2, r3, d8
 800c4d4:	f7f3 fed8 	bl	8000288 <__aeabi_dsub>
 800c4d8:	9d00      	ldr	r5, [sp, #0]
 800c4da:	ec41 0b18 	vmov	d8, r0, r1
 800c4de:	4639      	mov	r1, r7
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	f7f4 fb39 	bl	8000b58 <__aeabi_d2iz>
 800c4e6:	900c      	str	r0, [sp, #48]	; 0x30
 800c4e8:	f7f4 f81c 	bl	8000524 <__aeabi_i2d>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	4639      	mov	r1, r7
 800c4f4:	f7f3 fec8 	bl	8000288 <__aeabi_dsub>
 800c4f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4fa:	3330      	adds	r3, #48	; 0x30
 800c4fc:	f805 3b01 	strb.w	r3, [r5], #1
 800c500:	ec53 2b18 	vmov	r2, r3, d8
 800c504:	4606      	mov	r6, r0
 800c506:	460f      	mov	r7, r1
 800c508:	f7f4 fae8 	bl	8000adc <__aeabi_dcmplt>
 800c50c:	2800      	cmp	r0, #0
 800c50e:	d165      	bne.n	800c5dc <_dtoa_r+0x63c>
 800c510:	4632      	mov	r2, r6
 800c512:	463b      	mov	r3, r7
 800c514:	4935      	ldr	r1, [pc, #212]	; (800c5ec <_dtoa_r+0x64c>)
 800c516:	2000      	movs	r0, #0
 800c518:	f7f3 feb6 	bl	8000288 <__aeabi_dsub>
 800c51c:	ec53 2b18 	vmov	r2, r3, d8
 800c520:	f7f4 fadc 	bl	8000adc <__aeabi_dcmplt>
 800c524:	2800      	cmp	r0, #0
 800c526:	f040 80b9 	bne.w	800c69c <_dtoa_r+0x6fc>
 800c52a:	9b02      	ldr	r3, [sp, #8]
 800c52c:	429d      	cmp	r5, r3
 800c52e:	f43f af75 	beq.w	800c41c <_dtoa_r+0x47c>
 800c532:	4b2f      	ldr	r3, [pc, #188]	; (800c5f0 <_dtoa_r+0x650>)
 800c534:	ec51 0b18 	vmov	r0, r1, d8
 800c538:	2200      	movs	r2, #0
 800c53a:	f7f4 f85d 	bl	80005f8 <__aeabi_dmul>
 800c53e:	4b2c      	ldr	r3, [pc, #176]	; (800c5f0 <_dtoa_r+0x650>)
 800c540:	ec41 0b18 	vmov	d8, r0, r1
 800c544:	2200      	movs	r2, #0
 800c546:	4630      	mov	r0, r6
 800c548:	4639      	mov	r1, r7
 800c54a:	f7f4 f855 	bl	80005f8 <__aeabi_dmul>
 800c54e:	4606      	mov	r6, r0
 800c550:	460f      	mov	r7, r1
 800c552:	e7c4      	b.n	800c4de <_dtoa_r+0x53e>
 800c554:	ec51 0b17 	vmov	r0, r1, d7
 800c558:	f7f4 f84e 	bl	80005f8 <__aeabi_dmul>
 800c55c:	9b02      	ldr	r3, [sp, #8]
 800c55e:	9d00      	ldr	r5, [sp, #0]
 800c560:	930c      	str	r3, [sp, #48]	; 0x30
 800c562:	ec41 0b18 	vmov	d8, r0, r1
 800c566:	4639      	mov	r1, r7
 800c568:	4630      	mov	r0, r6
 800c56a:	f7f4 faf5 	bl	8000b58 <__aeabi_d2iz>
 800c56e:	9011      	str	r0, [sp, #68]	; 0x44
 800c570:	f7f3 ffd8 	bl	8000524 <__aeabi_i2d>
 800c574:	4602      	mov	r2, r0
 800c576:	460b      	mov	r3, r1
 800c578:	4630      	mov	r0, r6
 800c57a:	4639      	mov	r1, r7
 800c57c:	f7f3 fe84 	bl	8000288 <__aeabi_dsub>
 800c580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c582:	3330      	adds	r3, #48	; 0x30
 800c584:	f805 3b01 	strb.w	r3, [r5], #1
 800c588:	9b02      	ldr	r3, [sp, #8]
 800c58a:	429d      	cmp	r5, r3
 800c58c:	4606      	mov	r6, r0
 800c58e:	460f      	mov	r7, r1
 800c590:	f04f 0200 	mov.w	r2, #0
 800c594:	d134      	bne.n	800c600 <_dtoa_r+0x660>
 800c596:	4b19      	ldr	r3, [pc, #100]	; (800c5fc <_dtoa_r+0x65c>)
 800c598:	ec51 0b18 	vmov	r0, r1, d8
 800c59c:	f7f3 fe76 	bl	800028c <__adddf3>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	4639      	mov	r1, r7
 800c5a8:	f7f4 fab6 	bl	8000b18 <__aeabi_dcmpgt>
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	d175      	bne.n	800c69c <_dtoa_r+0x6fc>
 800c5b0:	ec53 2b18 	vmov	r2, r3, d8
 800c5b4:	4911      	ldr	r1, [pc, #68]	; (800c5fc <_dtoa_r+0x65c>)
 800c5b6:	2000      	movs	r0, #0
 800c5b8:	f7f3 fe66 	bl	8000288 <__aeabi_dsub>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	460b      	mov	r3, r1
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	4639      	mov	r1, r7
 800c5c4:	f7f4 fa8a 	bl	8000adc <__aeabi_dcmplt>
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	f43f af27 	beq.w	800c41c <_dtoa_r+0x47c>
 800c5ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c5d0:	1e6b      	subs	r3, r5, #1
 800c5d2:	930c      	str	r3, [sp, #48]	; 0x30
 800c5d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c5d8:	2b30      	cmp	r3, #48	; 0x30
 800c5da:	d0f8      	beq.n	800c5ce <_dtoa_r+0x62e>
 800c5dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c5e0:	e04a      	b.n	800c678 <_dtoa_r+0x6d8>
 800c5e2:	bf00      	nop
 800c5e4:	0800f0d0 	.word	0x0800f0d0
 800c5e8:	0800f0a8 	.word	0x0800f0a8
 800c5ec:	3ff00000 	.word	0x3ff00000
 800c5f0:	40240000 	.word	0x40240000
 800c5f4:	401c0000 	.word	0x401c0000
 800c5f8:	40140000 	.word	0x40140000
 800c5fc:	3fe00000 	.word	0x3fe00000
 800c600:	4baf      	ldr	r3, [pc, #700]	; (800c8c0 <_dtoa_r+0x920>)
 800c602:	f7f3 fff9 	bl	80005f8 <__aeabi_dmul>
 800c606:	4606      	mov	r6, r0
 800c608:	460f      	mov	r7, r1
 800c60a:	e7ac      	b.n	800c566 <_dtoa_r+0x5c6>
 800c60c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c610:	9d00      	ldr	r5, [sp, #0]
 800c612:	4642      	mov	r2, r8
 800c614:	464b      	mov	r3, r9
 800c616:	4630      	mov	r0, r6
 800c618:	4639      	mov	r1, r7
 800c61a:	f7f4 f917 	bl	800084c <__aeabi_ddiv>
 800c61e:	f7f4 fa9b 	bl	8000b58 <__aeabi_d2iz>
 800c622:	9002      	str	r0, [sp, #8]
 800c624:	f7f3 ff7e 	bl	8000524 <__aeabi_i2d>
 800c628:	4642      	mov	r2, r8
 800c62a:	464b      	mov	r3, r9
 800c62c:	f7f3 ffe4 	bl	80005f8 <__aeabi_dmul>
 800c630:	4602      	mov	r2, r0
 800c632:	460b      	mov	r3, r1
 800c634:	4630      	mov	r0, r6
 800c636:	4639      	mov	r1, r7
 800c638:	f7f3 fe26 	bl	8000288 <__aeabi_dsub>
 800c63c:	9e02      	ldr	r6, [sp, #8]
 800c63e:	9f01      	ldr	r7, [sp, #4]
 800c640:	3630      	adds	r6, #48	; 0x30
 800c642:	f805 6b01 	strb.w	r6, [r5], #1
 800c646:	9e00      	ldr	r6, [sp, #0]
 800c648:	1bae      	subs	r6, r5, r6
 800c64a:	42b7      	cmp	r7, r6
 800c64c:	4602      	mov	r2, r0
 800c64e:	460b      	mov	r3, r1
 800c650:	d137      	bne.n	800c6c2 <_dtoa_r+0x722>
 800c652:	f7f3 fe1b 	bl	800028c <__adddf3>
 800c656:	4642      	mov	r2, r8
 800c658:	464b      	mov	r3, r9
 800c65a:	4606      	mov	r6, r0
 800c65c:	460f      	mov	r7, r1
 800c65e:	f7f4 fa5b 	bl	8000b18 <__aeabi_dcmpgt>
 800c662:	b9c8      	cbnz	r0, 800c698 <_dtoa_r+0x6f8>
 800c664:	4642      	mov	r2, r8
 800c666:	464b      	mov	r3, r9
 800c668:	4630      	mov	r0, r6
 800c66a:	4639      	mov	r1, r7
 800c66c:	f7f4 fa2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c670:	b110      	cbz	r0, 800c678 <_dtoa_r+0x6d8>
 800c672:	9b02      	ldr	r3, [sp, #8]
 800c674:	07d9      	lsls	r1, r3, #31
 800c676:	d40f      	bmi.n	800c698 <_dtoa_r+0x6f8>
 800c678:	4620      	mov	r0, r4
 800c67a:	4659      	mov	r1, fp
 800c67c:	f000 fe4a 	bl	800d314 <_Bfree>
 800c680:	2300      	movs	r3, #0
 800c682:	702b      	strb	r3, [r5, #0]
 800c684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c686:	f10a 0001 	add.w	r0, sl, #1
 800c68a:	6018      	str	r0, [r3, #0]
 800c68c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f43f acd8 	beq.w	800c044 <_dtoa_r+0xa4>
 800c694:	601d      	str	r5, [r3, #0]
 800c696:	e4d5      	b.n	800c044 <_dtoa_r+0xa4>
 800c698:	f8cd a01c 	str.w	sl, [sp, #28]
 800c69c:	462b      	mov	r3, r5
 800c69e:	461d      	mov	r5, r3
 800c6a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6a4:	2a39      	cmp	r2, #57	; 0x39
 800c6a6:	d108      	bne.n	800c6ba <_dtoa_r+0x71a>
 800c6a8:	9a00      	ldr	r2, [sp, #0]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d1f7      	bne.n	800c69e <_dtoa_r+0x6fe>
 800c6ae:	9a07      	ldr	r2, [sp, #28]
 800c6b0:	9900      	ldr	r1, [sp, #0]
 800c6b2:	3201      	adds	r2, #1
 800c6b4:	9207      	str	r2, [sp, #28]
 800c6b6:	2230      	movs	r2, #48	; 0x30
 800c6b8:	700a      	strb	r2, [r1, #0]
 800c6ba:	781a      	ldrb	r2, [r3, #0]
 800c6bc:	3201      	adds	r2, #1
 800c6be:	701a      	strb	r2, [r3, #0]
 800c6c0:	e78c      	b.n	800c5dc <_dtoa_r+0x63c>
 800c6c2:	4b7f      	ldr	r3, [pc, #508]	; (800c8c0 <_dtoa_r+0x920>)
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	f7f3 ff97 	bl	80005f8 <__aeabi_dmul>
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	4606      	mov	r6, r0
 800c6d0:	460f      	mov	r7, r1
 800c6d2:	f7f4 f9f9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d09b      	beq.n	800c612 <_dtoa_r+0x672>
 800c6da:	e7cd      	b.n	800c678 <_dtoa_r+0x6d8>
 800c6dc:	9a08      	ldr	r2, [sp, #32]
 800c6de:	2a00      	cmp	r2, #0
 800c6e0:	f000 80c4 	beq.w	800c86c <_dtoa_r+0x8cc>
 800c6e4:	9a05      	ldr	r2, [sp, #20]
 800c6e6:	2a01      	cmp	r2, #1
 800c6e8:	f300 80a8 	bgt.w	800c83c <_dtoa_r+0x89c>
 800c6ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c6ee:	2a00      	cmp	r2, #0
 800c6f0:	f000 80a0 	beq.w	800c834 <_dtoa_r+0x894>
 800c6f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c6f8:	9e06      	ldr	r6, [sp, #24]
 800c6fa:	4645      	mov	r5, r8
 800c6fc:	9a04      	ldr	r2, [sp, #16]
 800c6fe:	2101      	movs	r1, #1
 800c700:	441a      	add	r2, r3
 800c702:	4620      	mov	r0, r4
 800c704:	4498      	add	r8, r3
 800c706:	9204      	str	r2, [sp, #16]
 800c708:	f000 ff0a 	bl	800d520 <__i2b>
 800c70c:	4607      	mov	r7, r0
 800c70e:	2d00      	cmp	r5, #0
 800c710:	dd0b      	ble.n	800c72a <_dtoa_r+0x78a>
 800c712:	9b04      	ldr	r3, [sp, #16]
 800c714:	2b00      	cmp	r3, #0
 800c716:	dd08      	ble.n	800c72a <_dtoa_r+0x78a>
 800c718:	42ab      	cmp	r3, r5
 800c71a:	9a04      	ldr	r2, [sp, #16]
 800c71c:	bfa8      	it	ge
 800c71e:	462b      	movge	r3, r5
 800c720:	eba8 0803 	sub.w	r8, r8, r3
 800c724:	1aed      	subs	r5, r5, r3
 800c726:	1ad3      	subs	r3, r2, r3
 800c728:	9304      	str	r3, [sp, #16]
 800c72a:	9b06      	ldr	r3, [sp, #24]
 800c72c:	b1fb      	cbz	r3, 800c76e <_dtoa_r+0x7ce>
 800c72e:	9b08      	ldr	r3, [sp, #32]
 800c730:	2b00      	cmp	r3, #0
 800c732:	f000 809f 	beq.w	800c874 <_dtoa_r+0x8d4>
 800c736:	2e00      	cmp	r6, #0
 800c738:	dd11      	ble.n	800c75e <_dtoa_r+0x7be>
 800c73a:	4639      	mov	r1, r7
 800c73c:	4632      	mov	r2, r6
 800c73e:	4620      	mov	r0, r4
 800c740:	f000 ffaa 	bl	800d698 <__pow5mult>
 800c744:	465a      	mov	r2, fp
 800c746:	4601      	mov	r1, r0
 800c748:	4607      	mov	r7, r0
 800c74a:	4620      	mov	r0, r4
 800c74c:	f000 fefe 	bl	800d54c <__multiply>
 800c750:	4659      	mov	r1, fp
 800c752:	9007      	str	r0, [sp, #28]
 800c754:	4620      	mov	r0, r4
 800c756:	f000 fddd 	bl	800d314 <_Bfree>
 800c75a:	9b07      	ldr	r3, [sp, #28]
 800c75c:	469b      	mov	fp, r3
 800c75e:	9b06      	ldr	r3, [sp, #24]
 800c760:	1b9a      	subs	r2, r3, r6
 800c762:	d004      	beq.n	800c76e <_dtoa_r+0x7ce>
 800c764:	4659      	mov	r1, fp
 800c766:	4620      	mov	r0, r4
 800c768:	f000 ff96 	bl	800d698 <__pow5mult>
 800c76c:	4683      	mov	fp, r0
 800c76e:	2101      	movs	r1, #1
 800c770:	4620      	mov	r0, r4
 800c772:	f000 fed5 	bl	800d520 <__i2b>
 800c776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c778:	2b00      	cmp	r3, #0
 800c77a:	4606      	mov	r6, r0
 800c77c:	dd7c      	ble.n	800c878 <_dtoa_r+0x8d8>
 800c77e:	461a      	mov	r2, r3
 800c780:	4601      	mov	r1, r0
 800c782:	4620      	mov	r0, r4
 800c784:	f000 ff88 	bl	800d698 <__pow5mult>
 800c788:	9b05      	ldr	r3, [sp, #20]
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	4606      	mov	r6, r0
 800c78e:	dd76      	ble.n	800c87e <_dtoa_r+0x8de>
 800c790:	2300      	movs	r3, #0
 800c792:	9306      	str	r3, [sp, #24]
 800c794:	6933      	ldr	r3, [r6, #16]
 800c796:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c79a:	6918      	ldr	r0, [r3, #16]
 800c79c:	f000 fe70 	bl	800d480 <__hi0bits>
 800c7a0:	f1c0 0020 	rsb	r0, r0, #32
 800c7a4:	9b04      	ldr	r3, [sp, #16]
 800c7a6:	4418      	add	r0, r3
 800c7a8:	f010 001f 	ands.w	r0, r0, #31
 800c7ac:	f000 8086 	beq.w	800c8bc <_dtoa_r+0x91c>
 800c7b0:	f1c0 0320 	rsb	r3, r0, #32
 800c7b4:	2b04      	cmp	r3, #4
 800c7b6:	dd7f      	ble.n	800c8b8 <_dtoa_r+0x918>
 800c7b8:	f1c0 001c 	rsb	r0, r0, #28
 800c7bc:	9b04      	ldr	r3, [sp, #16]
 800c7be:	4403      	add	r3, r0
 800c7c0:	4480      	add	r8, r0
 800c7c2:	4405      	add	r5, r0
 800c7c4:	9304      	str	r3, [sp, #16]
 800c7c6:	f1b8 0f00 	cmp.w	r8, #0
 800c7ca:	dd05      	ble.n	800c7d8 <_dtoa_r+0x838>
 800c7cc:	4659      	mov	r1, fp
 800c7ce:	4642      	mov	r2, r8
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f000 ffbb 	bl	800d74c <__lshift>
 800c7d6:	4683      	mov	fp, r0
 800c7d8:	9b04      	ldr	r3, [sp, #16]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	dd05      	ble.n	800c7ea <_dtoa_r+0x84a>
 800c7de:	4631      	mov	r1, r6
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f000 ffb2 	bl	800d74c <__lshift>
 800c7e8:	4606      	mov	r6, r0
 800c7ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d069      	beq.n	800c8c4 <_dtoa_r+0x924>
 800c7f0:	4631      	mov	r1, r6
 800c7f2:	4658      	mov	r0, fp
 800c7f4:	f001 f816 	bl	800d824 <__mcmp>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	da63      	bge.n	800c8c4 <_dtoa_r+0x924>
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	4659      	mov	r1, fp
 800c800:	220a      	movs	r2, #10
 800c802:	4620      	mov	r0, r4
 800c804:	f000 fda8 	bl	800d358 <__multadd>
 800c808:	9b08      	ldr	r3, [sp, #32]
 800c80a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c80e:	4683      	mov	fp, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	f000 818f 	beq.w	800cb34 <_dtoa_r+0xb94>
 800c816:	4639      	mov	r1, r7
 800c818:	2300      	movs	r3, #0
 800c81a:	220a      	movs	r2, #10
 800c81c:	4620      	mov	r0, r4
 800c81e:	f000 fd9b 	bl	800d358 <__multadd>
 800c822:	f1b9 0f00 	cmp.w	r9, #0
 800c826:	4607      	mov	r7, r0
 800c828:	f300 808e 	bgt.w	800c948 <_dtoa_r+0x9a8>
 800c82c:	9b05      	ldr	r3, [sp, #20]
 800c82e:	2b02      	cmp	r3, #2
 800c830:	dc50      	bgt.n	800c8d4 <_dtoa_r+0x934>
 800c832:	e089      	b.n	800c948 <_dtoa_r+0x9a8>
 800c834:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c836:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c83a:	e75d      	b.n	800c6f8 <_dtoa_r+0x758>
 800c83c:	9b01      	ldr	r3, [sp, #4]
 800c83e:	1e5e      	subs	r6, r3, #1
 800c840:	9b06      	ldr	r3, [sp, #24]
 800c842:	42b3      	cmp	r3, r6
 800c844:	bfbf      	itttt	lt
 800c846:	9b06      	ldrlt	r3, [sp, #24]
 800c848:	9606      	strlt	r6, [sp, #24]
 800c84a:	1af2      	sublt	r2, r6, r3
 800c84c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c84e:	bfb6      	itet	lt
 800c850:	189b      	addlt	r3, r3, r2
 800c852:	1b9e      	subge	r6, r3, r6
 800c854:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c856:	9b01      	ldr	r3, [sp, #4]
 800c858:	bfb8      	it	lt
 800c85a:	2600      	movlt	r6, #0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	bfb5      	itete	lt
 800c860:	eba8 0503 	sublt.w	r5, r8, r3
 800c864:	9b01      	ldrge	r3, [sp, #4]
 800c866:	2300      	movlt	r3, #0
 800c868:	4645      	movge	r5, r8
 800c86a:	e747      	b.n	800c6fc <_dtoa_r+0x75c>
 800c86c:	9e06      	ldr	r6, [sp, #24]
 800c86e:	9f08      	ldr	r7, [sp, #32]
 800c870:	4645      	mov	r5, r8
 800c872:	e74c      	b.n	800c70e <_dtoa_r+0x76e>
 800c874:	9a06      	ldr	r2, [sp, #24]
 800c876:	e775      	b.n	800c764 <_dtoa_r+0x7c4>
 800c878:	9b05      	ldr	r3, [sp, #20]
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	dc18      	bgt.n	800c8b0 <_dtoa_r+0x910>
 800c87e:	9b02      	ldr	r3, [sp, #8]
 800c880:	b9b3      	cbnz	r3, 800c8b0 <_dtoa_r+0x910>
 800c882:	9b03      	ldr	r3, [sp, #12]
 800c884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c888:	b9a3      	cbnz	r3, 800c8b4 <_dtoa_r+0x914>
 800c88a:	9b03      	ldr	r3, [sp, #12]
 800c88c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c890:	0d1b      	lsrs	r3, r3, #20
 800c892:	051b      	lsls	r3, r3, #20
 800c894:	b12b      	cbz	r3, 800c8a2 <_dtoa_r+0x902>
 800c896:	9b04      	ldr	r3, [sp, #16]
 800c898:	3301      	adds	r3, #1
 800c89a:	9304      	str	r3, [sp, #16]
 800c89c:	f108 0801 	add.w	r8, r8, #1
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	9306      	str	r3, [sp, #24]
 800c8a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	f47f af74 	bne.w	800c794 <_dtoa_r+0x7f4>
 800c8ac:	2001      	movs	r0, #1
 800c8ae:	e779      	b.n	800c7a4 <_dtoa_r+0x804>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	e7f6      	b.n	800c8a2 <_dtoa_r+0x902>
 800c8b4:	9b02      	ldr	r3, [sp, #8]
 800c8b6:	e7f4      	b.n	800c8a2 <_dtoa_r+0x902>
 800c8b8:	d085      	beq.n	800c7c6 <_dtoa_r+0x826>
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	301c      	adds	r0, #28
 800c8be:	e77d      	b.n	800c7bc <_dtoa_r+0x81c>
 800c8c0:	40240000 	.word	0x40240000
 800c8c4:	9b01      	ldr	r3, [sp, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	dc38      	bgt.n	800c93c <_dtoa_r+0x99c>
 800c8ca:	9b05      	ldr	r3, [sp, #20]
 800c8cc:	2b02      	cmp	r3, #2
 800c8ce:	dd35      	ble.n	800c93c <_dtoa_r+0x99c>
 800c8d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c8d4:	f1b9 0f00 	cmp.w	r9, #0
 800c8d8:	d10d      	bne.n	800c8f6 <_dtoa_r+0x956>
 800c8da:	4631      	mov	r1, r6
 800c8dc:	464b      	mov	r3, r9
 800c8de:	2205      	movs	r2, #5
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f000 fd39 	bl	800d358 <__multadd>
 800c8e6:	4601      	mov	r1, r0
 800c8e8:	4606      	mov	r6, r0
 800c8ea:	4658      	mov	r0, fp
 800c8ec:	f000 ff9a 	bl	800d824 <__mcmp>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	f73f adbd 	bgt.w	800c470 <_dtoa_r+0x4d0>
 800c8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8f8:	9d00      	ldr	r5, [sp, #0]
 800c8fa:	ea6f 0a03 	mvn.w	sl, r3
 800c8fe:	f04f 0800 	mov.w	r8, #0
 800c902:	4631      	mov	r1, r6
 800c904:	4620      	mov	r0, r4
 800c906:	f000 fd05 	bl	800d314 <_Bfree>
 800c90a:	2f00      	cmp	r7, #0
 800c90c:	f43f aeb4 	beq.w	800c678 <_dtoa_r+0x6d8>
 800c910:	f1b8 0f00 	cmp.w	r8, #0
 800c914:	d005      	beq.n	800c922 <_dtoa_r+0x982>
 800c916:	45b8      	cmp	r8, r7
 800c918:	d003      	beq.n	800c922 <_dtoa_r+0x982>
 800c91a:	4641      	mov	r1, r8
 800c91c:	4620      	mov	r0, r4
 800c91e:	f000 fcf9 	bl	800d314 <_Bfree>
 800c922:	4639      	mov	r1, r7
 800c924:	4620      	mov	r0, r4
 800c926:	f000 fcf5 	bl	800d314 <_Bfree>
 800c92a:	e6a5      	b.n	800c678 <_dtoa_r+0x6d8>
 800c92c:	2600      	movs	r6, #0
 800c92e:	4637      	mov	r7, r6
 800c930:	e7e1      	b.n	800c8f6 <_dtoa_r+0x956>
 800c932:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c934:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c938:	4637      	mov	r7, r6
 800c93a:	e599      	b.n	800c470 <_dtoa_r+0x4d0>
 800c93c:	9b08      	ldr	r3, [sp, #32]
 800c93e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	f000 80fd 	beq.w	800cb42 <_dtoa_r+0xba2>
 800c948:	2d00      	cmp	r5, #0
 800c94a:	dd05      	ble.n	800c958 <_dtoa_r+0x9b8>
 800c94c:	4639      	mov	r1, r7
 800c94e:	462a      	mov	r2, r5
 800c950:	4620      	mov	r0, r4
 800c952:	f000 fefb 	bl	800d74c <__lshift>
 800c956:	4607      	mov	r7, r0
 800c958:	9b06      	ldr	r3, [sp, #24]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d05c      	beq.n	800ca18 <_dtoa_r+0xa78>
 800c95e:	6879      	ldr	r1, [r7, #4]
 800c960:	4620      	mov	r0, r4
 800c962:	f000 fc97 	bl	800d294 <_Balloc>
 800c966:	4605      	mov	r5, r0
 800c968:	b928      	cbnz	r0, 800c976 <_dtoa_r+0x9d6>
 800c96a:	4b80      	ldr	r3, [pc, #512]	; (800cb6c <_dtoa_r+0xbcc>)
 800c96c:	4602      	mov	r2, r0
 800c96e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c972:	f7ff bb2e 	b.w	800bfd2 <_dtoa_r+0x32>
 800c976:	693a      	ldr	r2, [r7, #16]
 800c978:	3202      	adds	r2, #2
 800c97a:	0092      	lsls	r2, r2, #2
 800c97c:	f107 010c 	add.w	r1, r7, #12
 800c980:	300c      	adds	r0, #12
 800c982:	f7fd fd15 	bl	800a3b0 <memcpy>
 800c986:	2201      	movs	r2, #1
 800c988:	4629      	mov	r1, r5
 800c98a:	4620      	mov	r0, r4
 800c98c:	f000 fede 	bl	800d74c <__lshift>
 800c990:	9b00      	ldr	r3, [sp, #0]
 800c992:	3301      	adds	r3, #1
 800c994:	9301      	str	r3, [sp, #4]
 800c996:	9b00      	ldr	r3, [sp, #0]
 800c998:	444b      	add	r3, r9
 800c99a:	9307      	str	r3, [sp, #28]
 800c99c:	9b02      	ldr	r3, [sp, #8]
 800c99e:	f003 0301 	and.w	r3, r3, #1
 800c9a2:	46b8      	mov	r8, r7
 800c9a4:	9306      	str	r3, [sp, #24]
 800c9a6:	4607      	mov	r7, r0
 800c9a8:	9b01      	ldr	r3, [sp, #4]
 800c9aa:	4631      	mov	r1, r6
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	4658      	mov	r0, fp
 800c9b0:	9302      	str	r3, [sp, #8]
 800c9b2:	f7ff fa67 	bl	800be84 <quorem>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	3330      	adds	r3, #48	; 0x30
 800c9ba:	9004      	str	r0, [sp, #16]
 800c9bc:	4641      	mov	r1, r8
 800c9be:	4658      	mov	r0, fp
 800c9c0:	9308      	str	r3, [sp, #32]
 800c9c2:	f000 ff2f 	bl	800d824 <__mcmp>
 800c9c6:	463a      	mov	r2, r7
 800c9c8:	4681      	mov	r9, r0
 800c9ca:	4631      	mov	r1, r6
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	f000 ff45 	bl	800d85c <__mdiff>
 800c9d2:	68c2      	ldr	r2, [r0, #12]
 800c9d4:	9b08      	ldr	r3, [sp, #32]
 800c9d6:	4605      	mov	r5, r0
 800c9d8:	bb02      	cbnz	r2, 800ca1c <_dtoa_r+0xa7c>
 800c9da:	4601      	mov	r1, r0
 800c9dc:	4658      	mov	r0, fp
 800c9de:	f000 ff21 	bl	800d824 <__mcmp>
 800c9e2:	9b08      	ldr	r3, [sp, #32]
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	4629      	mov	r1, r5
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c9ee:	f000 fc91 	bl	800d314 <_Bfree>
 800c9f2:	9b05      	ldr	r3, [sp, #20]
 800c9f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9f6:	9d01      	ldr	r5, [sp, #4]
 800c9f8:	ea43 0102 	orr.w	r1, r3, r2
 800c9fc:	9b06      	ldr	r3, [sp, #24]
 800c9fe:	430b      	orrs	r3, r1
 800ca00:	9b08      	ldr	r3, [sp, #32]
 800ca02:	d10d      	bne.n	800ca20 <_dtoa_r+0xa80>
 800ca04:	2b39      	cmp	r3, #57	; 0x39
 800ca06:	d029      	beq.n	800ca5c <_dtoa_r+0xabc>
 800ca08:	f1b9 0f00 	cmp.w	r9, #0
 800ca0c:	dd01      	ble.n	800ca12 <_dtoa_r+0xa72>
 800ca0e:	9b04      	ldr	r3, [sp, #16]
 800ca10:	3331      	adds	r3, #49	; 0x31
 800ca12:	9a02      	ldr	r2, [sp, #8]
 800ca14:	7013      	strb	r3, [r2, #0]
 800ca16:	e774      	b.n	800c902 <_dtoa_r+0x962>
 800ca18:	4638      	mov	r0, r7
 800ca1a:	e7b9      	b.n	800c990 <_dtoa_r+0x9f0>
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	e7e2      	b.n	800c9e6 <_dtoa_r+0xa46>
 800ca20:	f1b9 0f00 	cmp.w	r9, #0
 800ca24:	db06      	blt.n	800ca34 <_dtoa_r+0xa94>
 800ca26:	9905      	ldr	r1, [sp, #20]
 800ca28:	ea41 0909 	orr.w	r9, r1, r9
 800ca2c:	9906      	ldr	r1, [sp, #24]
 800ca2e:	ea59 0101 	orrs.w	r1, r9, r1
 800ca32:	d120      	bne.n	800ca76 <_dtoa_r+0xad6>
 800ca34:	2a00      	cmp	r2, #0
 800ca36:	ddec      	ble.n	800ca12 <_dtoa_r+0xa72>
 800ca38:	4659      	mov	r1, fp
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	9301      	str	r3, [sp, #4]
 800ca40:	f000 fe84 	bl	800d74c <__lshift>
 800ca44:	4631      	mov	r1, r6
 800ca46:	4683      	mov	fp, r0
 800ca48:	f000 feec 	bl	800d824 <__mcmp>
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	9b01      	ldr	r3, [sp, #4]
 800ca50:	dc02      	bgt.n	800ca58 <_dtoa_r+0xab8>
 800ca52:	d1de      	bne.n	800ca12 <_dtoa_r+0xa72>
 800ca54:	07da      	lsls	r2, r3, #31
 800ca56:	d5dc      	bpl.n	800ca12 <_dtoa_r+0xa72>
 800ca58:	2b39      	cmp	r3, #57	; 0x39
 800ca5a:	d1d8      	bne.n	800ca0e <_dtoa_r+0xa6e>
 800ca5c:	9a02      	ldr	r2, [sp, #8]
 800ca5e:	2339      	movs	r3, #57	; 0x39
 800ca60:	7013      	strb	r3, [r2, #0]
 800ca62:	462b      	mov	r3, r5
 800ca64:	461d      	mov	r5, r3
 800ca66:	3b01      	subs	r3, #1
 800ca68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ca6c:	2a39      	cmp	r2, #57	; 0x39
 800ca6e:	d050      	beq.n	800cb12 <_dtoa_r+0xb72>
 800ca70:	3201      	adds	r2, #1
 800ca72:	701a      	strb	r2, [r3, #0]
 800ca74:	e745      	b.n	800c902 <_dtoa_r+0x962>
 800ca76:	2a00      	cmp	r2, #0
 800ca78:	dd03      	ble.n	800ca82 <_dtoa_r+0xae2>
 800ca7a:	2b39      	cmp	r3, #57	; 0x39
 800ca7c:	d0ee      	beq.n	800ca5c <_dtoa_r+0xabc>
 800ca7e:	3301      	adds	r3, #1
 800ca80:	e7c7      	b.n	800ca12 <_dtoa_r+0xa72>
 800ca82:	9a01      	ldr	r2, [sp, #4]
 800ca84:	9907      	ldr	r1, [sp, #28]
 800ca86:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ca8a:	428a      	cmp	r2, r1
 800ca8c:	d02a      	beq.n	800cae4 <_dtoa_r+0xb44>
 800ca8e:	4659      	mov	r1, fp
 800ca90:	2300      	movs	r3, #0
 800ca92:	220a      	movs	r2, #10
 800ca94:	4620      	mov	r0, r4
 800ca96:	f000 fc5f 	bl	800d358 <__multadd>
 800ca9a:	45b8      	cmp	r8, r7
 800ca9c:	4683      	mov	fp, r0
 800ca9e:	f04f 0300 	mov.w	r3, #0
 800caa2:	f04f 020a 	mov.w	r2, #10
 800caa6:	4641      	mov	r1, r8
 800caa8:	4620      	mov	r0, r4
 800caaa:	d107      	bne.n	800cabc <_dtoa_r+0xb1c>
 800caac:	f000 fc54 	bl	800d358 <__multadd>
 800cab0:	4680      	mov	r8, r0
 800cab2:	4607      	mov	r7, r0
 800cab4:	9b01      	ldr	r3, [sp, #4]
 800cab6:	3301      	adds	r3, #1
 800cab8:	9301      	str	r3, [sp, #4]
 800caba:	e775      	b.n	800c9a8 <_dtoa_r+0xa08>
 800cabc:	f000 fc4c 	bl	800d358 <__multadd>
 800cac0:	4639      	mov	r1, r7
 800cac2:	4680      	mov	r8, r0
 800cac4:	2300      	movs	r3, #0
 800cac6:	220a      	movs	r2, #10
 800cac8:	4620      	mov	r0, r4
 800caca:	f000 fc45 	bl	800d358 <__multadd>
 800cace:	4607      	mov	r7, r0
 800cad0:	e7f0      	b.n	800cab4 <_dtoa_r+0xb14>
 800cad2:	f1b9 0f00 	cmp.w	r9, #0
 800cad6:	9a00      	ldr	r2, [sp, #0]
 800cad8:	bfcc      	ite	gt
 800cada:	464d      	movgt	r5, r9
 800cadc:	2501      	movle	r5, #1
 800cade:	4415      	add	r5, r2
 800cae0:	f04f 0800 	mov.w	r8, #0
 800cae4:	4659      	mov	r1, fp
 800cae6:	2201      	movs	r2, #1
 800cae8:	4620      	mov	r0, r4
 800caea:	9301      	str	r3, [sp, #4]
 800caec:	f000 fe2e 	bl	800d74c <__lshift>
 800caf0:	4631      	mov	r1, r6
 800caf2:	4683      	mov	fp, r0
 800caf4:	f000 fe96 	bl	800d824 <__mcmp>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	dcb2      	bgt.n	800ca62 <_dtoa_r+0xac2>
 800cafc:	d102      	bne.n	800cb04 <_dtoa_r+0xb64>
 800cafe:	9b01      	ldr	r3, [sp, #4]
 800cb00:	07db      	lsls	r3, r3, #31
 800cb02:	d4ae      	bmi.n	800ca62 <_dtoa_r+0xac2>
 800cb04:	462b      	mov	r3, r5
 800cb06:	461d      	mov	r5, r3
 800cb08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb0c:	2a30      	cmp	r2, #48	; 0x30
 800cb0e:	d0fa      	beq.n	800cb06 <_dtoa_r+0xb66>
 800cb10:	e6f7      	b.n	800c902 <_dtoa_r+0x962>
 800cb12:	9a00      	ldr	r2, [sp, #0]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d1a5      	bne.n	800ca64 <_dtoa_r+0xac4>
 800cb18:	f10a 0a01 	add.w	sl, sl, #1
 800cb1c:	2331      	movs	r3, #49	; 0x31
 800cb1e:	e779      	b.n	800ca14 <_dtoa_r+0xa74>
 800cb20:	4b13      	ldr	r3, [pc, #76]	; (800cb70 <_dtoa_r+0xbd0>)
 800cb22:	f7ff baaf 	b.w	800c084 <_dtoa_r+0xe4>
 800cb26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f47f aa86 	bne.w	800c03a <_dtoa_r+0x9a>
 800cb2e:	4b11      	ldr	r3, [pc, #68]	; (800cb74 <_dtoa_r+0xbd4>)
 800cb30:	f7ff baa8 	b.w	800c084 <_dtoa_r+0xe4>
 800cb34:	f1b9 0f00 	cmp.w	r9, #0
 800cb38:	dc03      	bgt.n	800cb42 <_dtoa_r+0xba2>
 800cb3a:	9b05      	ldr	r3, [sp, #20]
 800cb3c:	2b02      	cmp	r3, #2
 800cb3e:	f73f aec9 	bgt.w	800c8d4 <_dtoa_r+0x934>
 800cb42:	9d00      	ldr	r5, [sp, #0]
 800cb44:	4631      	mov	r1, r6
 800cb46:	4658      	mov	r0, fp
 800cb48:	f7ff f99c 	bl	800be84 <quorem>
 800cb4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cb50:	f805 3b01 	strb.w	r3, [r5], #1
 800cb54:	9a00      	ldr	r2, [sp, #0]
 800cb56:	1aaa      	subs	r2, r5, r2
 800cb58:	4591      	cmp	r9, r2
 800cb5a:	ddba      	ble.n	800cad2 <_dtoa_r+0xb32>
 800cb5c:	4659      	mov	r1, fp
 800cb5e:	2300      	movs	r3, #0
 800cb60:	220a      	movs	r2, #10
 800cb62:	4620      	mov	r0, r4
 800cb64:	f000 fbf8 	bl	800d358 <__multadd>
 800cb68:	4683      	mov	fp, r0
 800cb6a:	e7eb      	b.n	800cb44 <_dtoa_r+0xba4>
 800cb6c:	0800efb4 	.word	0x0800efb4
 800cb70:	0800edb0 	.word	0x0800edb0
 800cb74:	0800ef31 	.word	0x0800ef31

0800cb78 <rshift>:
 800cb78:	6903      	ldr	r3, [r0, #16]
 800cb7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cb7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb82:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cb86:	f100 0414 	add.w	r4, r0, #20
 800cb8a:	dd45      	ble.n	800cc18 <rshift+0xa0>
 800cb8c:	f011 011f 	ands.w	r1, r1, #31
 800cb90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cb94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cb98:	d10c      	bne.n	800cbb4 <rshift+0x3c>
 800cb9a:	f100 0710 	add.w	r7, r0, #16
 800cb9e:	4629      	mov	r1, r5
 800cba0:	42b1      	cmp	r1, r6
 800cba2:	d334      	bcc.n	800cc0e <rshift+0x96>
 800cba4:	1a9b      	subs	r3, r3, r2
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	1eea      	subs	r2, r5, #3
 800cbaa:	4296      	cmp	r6, r2
 800cbac:	bf38      	it	cc
 800cbae:	2300      	movcc	r3, #0
 800cbb0:	4423      	add	r3, r4
 800cbb2:	e015      	b.n	800cbe0 <rshift+0x68>
 800cbb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cbb8:	f1c1 0820 	rsb	r8, r1, #32
 800cbbc:	40cf      	lsrs	r7, r1
 800cbbe:	f105 0e04 	add.w	lr, r5, #4
 800cbc2:	46a1      	mov	r9, r4
 800cbc4:	4576      	cmp	r6, lr
 800cbc6:	46f4      	mov	ip, lr
 800cbc8:	d815      	bhi.n	800cbf6 <rshift+0x7e>
 800cbca:	1a9b      	subs	r3, r3, r2
 800cbcc:	009a      	lsls	r2, r3, #2
 800cbce:	3a04      	subs	r2, #4
 800cbd0:	3501      	adds	r5, #1
 800cbd2:	42ae      	cmp	r6, r5
 800cbd4:	bf38      	it	cc
 800cbd6:	2200      	movcc	r2, #0
 800cbd8:	18a3      	adds	r3, r4, r2
 800cbda:	50a7      	str	r7, [r4, r2]
 800cbdc:	b107      	cbz	r7, 800cbe0 <rshift+0x68>
 800cbde:	3304      	adds	r3, #4
 800cbe0:	1b1a      	subs	r2, r3, r4
 800cbe2:	42a3      	cmp	r3, r4
 800cbe4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cbe8:	bf08      	it	eq
 800cbea:	2300      	moveq	r3, #0
 800cbec:	6102      	str	r2, [r0, #16]
 800cbee:	bf08      	it	eq
 800cbf0:	6143      	streq	r3, [r0, #20]
 800cbf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbf6:	f8dc c000 	ldr.w	ip, [ip]
 800cbfa:	fa0c fc08 	lsl.w	ip, ip, r8
 800cbfe:	ea4c 0707 	orr.w	r7, ip, r7
 800cc02:	f849 7b04 	str.w	r7, [r9], #4
 800cc06:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cc0a:	40cf      	lsrs	r7, r1
 800cc0c:	e7da      	b.n	800cbc4 <rshift+0x4c>
 800cc0e:	f851 cb04 	ldr.w	ip, [r1], #4
 800cc12:	f847 cf04 	str.w	ip, [r7, #4]!
 800cc16:	e7c3      	b.n	800cba0 <rshift+0x28>
 800cc18:	4623      	mov	r3, r4
 800cc1a:	e7e1      	b.n	800cbe0 <rshift+0x68>

0800cc1c <__hexdig_fun>:
 800cc1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cc20:	2b09      	cmp	r3, #9
 800cc22:	d802      	bhi.n	800cc2a <__hexdig_fun+0xe>
 800cc24:	3820      	subs	r0, #32
 800cc26:	b2c0      	uxtb	r0, r0
 800cc28:	4770      	bx	lr
 800cc2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cc2e:	2b05      	cmp	r3, #5
 800cc30:	d801      	bhi.n	800cc36 <__hexdig_fun+0x1a>
 800cc32:	3847      	subs	r0, #71	; 0x47
 800cc34:	e7f7      	b.n	800cc26 <__hexdig_fun+0xa>
 800cc36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cc3a:	2b05      	cmp	r3, #5
 800cc3c:	d801      	bhi.n	800cc42 <__hexdig_fun+0x26>
 800cc3e:	3827      	subs	r0, #39	; 0x27
 800cc40:	e7f1      	b.n	800cc26 <__hexdig_fun+0xa>
 800cc42:	2000      	movs	r0, #0
 800cc44:	4770      	bx	lr
	...

0800cc48 <__gethex>:
 800cc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc4c:	ed2d 8b02 	vpush	{d8}
 800cc50:	b089      	sub	sp, #36	; 0x24
 800cc52:	ee08 0a10 	vmov	s16, r0
 800cc56:	9304      	str	r3, [sp, #16]
 800cc58:	4bbc      	ldr	r3, [pc, #752]	; (800cf4c <__gethex+0x304>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	9301      	str	r3, [sp, #4]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	468b      	mov	fp, r1
 800cc62:	4690      	mov	r8, r2
 800cc64:	f7f3 fab4 	bl	80001d0 <strlen>
 800cc68:	9b01      	ldr	r3, [sp, #4]
 800cc6a:	f8db 2000 	ldr.w	r2, [fp]
 800cc6e:	4403      	add	r3, r0
 800cc70:	4682      	mov	sl, r0
 800cc72:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cc76:	9305      	str	r3, [sp, #20]
 800cc78:	1c93      	adds	r3, r2, #2
 800cc7a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cc7e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cc82:	32fe      	adds	r2, #254	; 0xfe
 800cc84:	18d1      	adds	r1, r2, r3
 800cc86:	461f      	mov	r7, r3
 800cc88:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cc8c:	9100      	str	r1, [sp, #0]
 800cc8e:	2830      	cmp	r0, #48	; 0x30
 800cc90:	d0f8      	beq.n	800cc84 <__gethex+0x3c>
 800cc92:	f7ff ffc3 	bl	800cc1c <__hexdig_fun>
 800cc96:	4604      	mov	r4, r0
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d13a      	bne.n	800cd12 <__gethex+0xca>
 800cc9c:	9901      	ldr	r1, [sp, #4]
 800cc9e:	4652      	mov	r2, sl
 800cca0:	4638      	mov	r0, r7
 800cca2:	f001 f9e1 	bl	800e068 <strncmp>
 800cca6:	4605      	mov	r5, r0
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	d168      	bne.n	800cd7e <__gethex+0x136>
 800ccac:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ccb0:	eb07 060a 	add.w	r6, r7, sl
 800ccb4:	f7ff ffb2 	bl	800cc1c <__hexdig_fun>
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	d062      	beq.n	800cd82 <__gethex+0x13a>
 800ccbc:	4633      	mov	r3, r6
 800ccbe:	7818      	ldrb	r0, [r3, #0]
 800ccc0:	2830      	cmp	r0, #48	; 0x30
 800ccc2:	461f      	mov	r7, r3
 800ccc4:	f103 0301 	add.w	r3, r3, #1
 800ccc8:	d0f9      	beq.n	800ccbe <__gethex+0x76>
 800ccca:	f7ff ffa7 	bl	800cc1c <__hexdig_fun>
 800ccce:	2301      	movs	r3, #1
 800ccd0:	fab0 f480 	clz	r4, r0
 800ccd4:	0964      	lsrs	r4, r4, #5
 800ccd6:	4635      	mov	r5, r6
 800ccd8:	9300      	str	r3, [sp, #0]
 800ccda:	463a      	mov	r2, r7
 800ccdc:	4616      	mov	r6, r2
 800ccde:	3201      	adds	r2, #1
 800cce0:	7830      	ldrb	r0, [r6, #0]
 800cce2:	f7ff ff9b 	bl	800cc1c <__hexdig_fun>
 800cce6:	2800      	cmp	r0, #0
 800cce8:	d1f8      	bne.n	800ccdc <__gethex+0x94>
 800ccea:	9901      	ldr	r1, [sp, #4]
 800ccec:	4652      	mov	r2, sl
 800ccee:	4630      	mov	r0, r6
 800ccf0:	f001 f9ba 	bl	800e068 <strncmp>
 800ccf4:	b980      	cbnz	r0, 800cd18 <__gethex+0xd0>
 800ccf6:	b94d      	cbnz	r5, 800cd0c <__gethex+0xc4>
 800ccf8:	eb06 050a 	add.w	r5, r6, sl
 800ccfc:	462a      	mov	r2, r5
 800ccfe:	4616      	mov	r6, r2
 800cd00:	3201      	adds	r2, #1
 800cd02:	7830      	ldrb	r0, [r6, #0]
 800cd04:	f7ff ff8a 	bl	800cc1c <__hexdig_fun>
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	d1f8      	bne.n	800ccfe <__gethex+0xb6>
 800cd0c:	1bad      	subs	r5, r5, r6
 800cd0e:	00ad      	lsls	r5, r5, #2
 800cd10:	e004      	b.n	800cd1c <__gethex+0xd4>
 800cd12:	2400      	movs	r4, #0
 800cd14:	4625      	mov	r5, r4
 800cd16:	e7e0      	b.n	800ccda <__gethex+0x92>
 800cd18:	2d00      	cmp	r5, #0
 800cd1a:	d1f7      	bne.n	800cd0c <__gethex+0xc4>
 800cd1c:	7833      	ldrb	r3, [r6, #0]
 800cd1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cd22:	2b50      	cmp	r3, #80	; 0x50
 800cd24:	d13b      	bne.n	800cd9e <__gethex+0x156>
 800cd26:	7873      	ldrb	r3, [r6, #1]
 800cd28:	2b2b      	cmp	r3, #43	; 0x2b
 800cd2a:	d02c      	beq.n	800cd86 <__gethex+0x13e>
 800cd2c:	2b2d      	cmp	r3, #45	; 0x2d
 800cd2e:	d02e      	beq.n	800cd8e <__gethex+0x146>
 800cd30:	1c71      	adds	r1, r6, #1
 800cd32:	f04f 0900 	mov.w	r9, #0
 800cd36:	7808      	ldrb	r0, [r1, #0]
 800cd38:	f7ff ff70 	bl	800cc1c <__hexdig_fun>
 800cd3c:	1e43      	subs	r3, r0, #1
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	2b18      	cmp	r3, #24
 800cd42:	d82c      	bhi.n	800cd9e <__gethex+0x156>
 800cd44:	f1a0 0210 	sub.w	r2, r0, #16
 800cd48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cd4c:	f7ff ff66 	bl	800cc1c <__hexdig_fun>
 800cd50:	1e43      	subs	r3, r0, #1
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	2b18      	cmp	r3, #24
 800cd56:	d91d      	bls.n	800cd94 <__gethex+0x14c>
 800cd58:	f1b9 0f00 	cmp.w	r9, #0
 800cd5c:	d000      	beq.n	800cd60 <__gethex+0x118>
 800cd5e:	4252      	negs	r2, r2
 800cd60:	4415      	add	r5, r2
 800cd62:	f8cb 1000 	str.w	r1, [fp]
 800cd66:	b1e4      	cbz	r4, 800cda2 <__gethex+0x15a>
 800cd68:	9b00      	ldr	r3, [sp, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	bf14      	ite	ne
 800cd6e:	2700      	movne	r7, #0
 800cd70:	2706      	moveq	r7, #6
 800cd72:	4638      	mov	r0, r7
 800cd74:	b009      	add	sp, #36	; 0x24
 800cd76:	ecbd 8b02 	vpop	{d8}
 800cd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd7e:	463e      	mov	r6, r7
 800cd80:	4625      	mov	r5, r4
 800cd82:	2401      	movs	r4, #1
 800cd84:	e7ca      	b.n	800cd1c <__gethex+0xd4>
 800cd86:	f04f 0900 	mov.w	r9, #0
 800cd8a:	1cb1      	adds	r1, r6, #2
 800cd8c:	e7d3      	b.n	800cd36 <__gethex+0xee>
 800cd8e:	f04f 0901 	mov.w	r9, #1
 800cd92:	e7fa      	b.n	800cd8a <__gethex+0x142>
 800cd94:	230a      	movs	r3, #10
 800cd96:	fb03 0202 	mla	r2, r3, r2, r0
 800cd9a:	3a10      	subs	r2, #16
 800cd9c:	e7d4      	b.n	800cd48 <__gethex+0x100>
 800cd9e:	4631      	mov	r1, r6
 800cda0:	e7df      	b.n	800cd62 <__gethex+0x11a>
 800cda2:	1bf3      	subs	r3, r6, r7
 800cda4:	3b01      	subs	r3, #1
 800cda6:	4621      	mov	r1, r4
 800cda8:	2b07      	cmp	r3, #7
 800cdaa:	dc0b      	bgt.n	800cdc4 <__gethex+0x17c>
 800cdac:	ee18 0a10 	vmov	r0, s16
 800cdb0:	f000 fa70 	bl	800d294 <_Balloc>
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	b940      	cbnz	r0, 800cdca <__gethex+0x182>
 800cdb8:	4b65      	ldr	r3, [pc, #404]	; (800cf50 <__gethex+0x308>)
 800cdba:	4602      	mov	r2, r0
 800cdbc:	21de      	movs	r1, #222	; 0xde
 800cdbe:	4865      	ldr	r0, [pc, #404]	; (800cf54 <__gethex+0x30c>)
 800cdc0:	f001 f972 	bl	800e0a8 <__assert_func>
 800cdc4:	3101      	adds	r1, #1
 800cdc6:	105b      	asrs	r3, r3, #1
 800cdc8:	e7ee      	b.n	800cda8 <__gethex+0x160>
 800cdca:	f100 0914 	add.w	r9, r0, #20
 800cdce:	f04f 0b00 	mov.w	fp, #0
 800cdd2:	f1ca 0301 	rsb	r3, sl, #1
 800cdd6:	f8cd 9008 	str.w	r9, [sp, #8]
 800cdda:	f8cd b000 	str.w	fp, [sp]
 800cdde:	9306      	str	r3, [sp, #24]
 800cde0:	42b7      	cmp	r7, r6
 800cde2:	d340      	bcc.n	800ce66 <__gethex+0x21e>
 800cde4:	9802      	ldr	r0, [sp, #8]
 800cde6:	9b00      	ldr	r3, [sp, #0]
 800cde8:	f840 3b04 	str.w	r3, [r0], #4
 800cdec:	eba0 0009 	sub.w	r0, r0, r9
 800cdf0:	1080      	asrs	r0, r0, #2
 800cdf2:	0146      	lsls	r6, r0, #5
 800cdf4:	6120      	str	r0, [r4, #16]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f000 fb42 	bl	800d480 <__hi0bits>
 800cdfc:	1a30      	subs	r0, r6, r0
 800cdfe:	f8d8 6000 	ldr.w	r6, [r8]
 800ce02:	42b0      	cmp	r0, r6
 800ce04:	dd63      	ble.n	800cece <__gethex+0x286>
 800ce06:	1b87      	subs	r7, r0, r6
 800ce08:	4639      	mov	r1, r7
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	f000 fedc 	bl	800dbc8 <__any_on>
 800ce10:	4682      	mov	sl, r0
 800ce12:	b1a8      	cbz	r0, 800ce40 <__gethex+0x1f8>
 800ce14:	1e7b      	subs	r3, r7, #1
 800ce16:	1159      	asrs	r1, r3, #5
 800ce18:	f003 021f 	and.w	r2, r3, #31
 800ce1c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ce20:	f04f 0a01 	mov.w	sl, #1
 800ce24:	fa0a f202 	lsl.w	r2, sl, r2
 800ce28:	420a      	tst	r2, r1
 800ce2a:	d009      	beq.n	800ce40 <__gethex+0x1f8>
 800ce2c:	4553      	cmp	r3, sl
 800ce2e:	dd05      	ble.n	800ce3c <__gethex+0x1f4>
 800ce30:	1eb9      	subs	r1, r7, #2
 800ce32:	4620      	mov	r0, r4
 800ce34:	f000 fec8 	bl	800dbc8 <__any_on>
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	d145      	bne.n	800cec8 <__gethex+0x280>
 800ce3c:	f04f 0a02 	mov.w	sl, #2
 800ce40:	4639      	mov	r1, r7
 800ce42:	4620      	mov	r0, r4
 800ce44:	f7ff fe98 	bl	800cb78 <rshift>
 800ce48:	443d      	add	r5, r7
 800ce4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce4e:	42ab      	cmp	r3, r5
 800ce50:	da4c      	bge.n	800ceec <__gethex+0x2a4>
 800ce52:	ee18 0a10 	vmov	r0, s16
 800ce56:	4621      	mov	r1, r4
 800ce58:	f000 fa5c 	bl	800d314 <_Bfree>
 800ce5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce5e:	2300      	movs	r3, #0
 800ce60:	6013      	str	r3, [r2, #0]
 800ce62:	27a3      	movs	r7, #163	; 0xa3
 800ce64:	e785      	b.n	800cd72 <__gethex+0x12a>
 800ce66:	1e73      	subs	r3, r6, #1
 800ce68:	9a05      	ldr	r2, [sp, #20]
 800ce6a:	9303      	str	r3, [sp, #12]
 800ce6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d019      	beq.n	800cea8 <__gethex+0x260>
 800ce74:	f1bb 0f20 	cmp.w	fp, #32
 800ce78:	d107      	bne.n	800ce8a <__gethex+0x242>
 800ce7a:	9b02      	ldr	r3, [sp, #8]
 800ce7c:	9a00      	ldr	r2, [sp, #0]
 800ce7e:	f843 2b04 	str.w	r2, [r3], #4
 800ce82:	9302      	str	r3, [sp, #8]
 800ce84:	2300      	movs	r3, #0
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	469b      	mov	fp, r3
 800ce8a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ce8e:	f7ff fec5 	bl	800cc1c <__hexdig_fun>
 800ce92:	9b00      	ldr	r3, [sp, #0]
 800ce94:	f000 000f 	and.w	r0, r0, #15
 800ce98:	fa00 f00b 	lsl.w	r0, r0, fp
 800ce9c:	4303      	orrs	r3, r0
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	f10b 0b04 	add.w	fp, fp, #4
 800cea4:	9b03      	ldr	r3, [sp, #12]
 800cea6:	e00d      	b.n	800cec4 <__gethex+0x27c>
 800cea8:	9b03      	ldr	r3, [sp, #12]
 800ceaa:	9a06      	ldr	r2, [sp, #24]
 800ceac:	4413      	add	r3, r2
 800ceae:	42bb      	cmp	r3, r7
 800ceb0:	d3e0      	bcc.n	800ce74 <__gethex+0x22c>
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	9901      	ldr	r1, [sp, #4]
 800ceb6:	9307      	str	r3, [sp, #28]
 800ceb8:	4652      	mov	r2, sl
 800ceba:	f001 f8d5 	bl	800e068 <strncmp>
 800cebe:	9b07      	ldr	r3, [sp, #28]
 800cec0:	2800      	cmp	r0, #0
 800cec2:	d1d7      	bne.n	800ce74 <__gethex+0x22c>
 800cec4:	461e      	mov	r6, r3
 800cec6:	e78b      	b.n	800cde0 <__gethex+0x198>
 800cec8:	f04f 0a03 	mov.w	sl, #3
 800cecc:	e7b8      	b.n	800ce40 <__gethex+0x1f8>
 800cece:	da0a      	bge.n	800cee6 <__gethex+0x29e>
 800ced0:	1a37      	subs	r7, r6, r0
 800ced2:	4621      	mov	r1, r4
 800ced4:	ee18 0a10 	vmov	r0, s16
 800ced8:	463a      	mov	r2, r7
 800ceda:	f000 fc37 	bl	800d74c <__lshift>
 800cede:	1bed      	subs	r5, r5, r7
 800cee0:	4604      	mov	r4, r0
 800cee2:	f100 0914 	add.w	r9, r0, #20
 800cee6:	f04f 0a00 	mov.w	sl, #0
 800ceea:	e7ae      	b.n	800ce4a <__gethex+0x202>
 800ceec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cef0:	42a8      	cmp	r0, r5
 800cef2:	dd72      	ble.n	800cfda <__gethex+0x392>
 800cef4:	1b45      	subs	r5, r0, r5
 800cef6:	42ae      	cmp	r6, r5
 800cef8:	dc36      	bgt.n	800cf68 <__gethex+0x320>
 800cefa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cefe:	2b02      	cmp	r3, #2
 800cf00:	d02a      	beq.n	800cf58 <__gethex+0x310>
 800cf02:	2b03      	cmp	r3, #3
 800cf04:	d02c      	beq.n	800cf60 <__gethex+0x318>
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d115      	bne.n	800cf36 <__gethex+0x2ee>
 800cf0a:	42ae      	cmp	r6, r5
 800cf0c:	d113      	bne.n	800cf36 <__gethex+0x2ee>
 800cf0e:	2e01      	cmp	r6, #1
 800cf10:	d10b      	bne.n	800cf2a <__gethex+0x2e2>
 800cf12:	9a04      	ldr	r2, [sp, #16]
 800cf14:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cf18:	6013      	str	r3, [r2, #0]
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	6123      	str	r3, [r4, #16]
 800cf1e:	f8c9 3000 	str.w	r3, [r9]
 800cf22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf24:	2762      	movs	r7, #98	; 0x62
 800cf26:	601c      	str	r4, [r3, #0]
 800cf28:	e723      	b.n	800cd72 <__gethex+0x12a>
 800cf2a:	1e71      	subs	r1, r6, #1
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f000 fe4b 	bl	800dbc8 <__any_on>
 800cf32:	2800      	cmp	r0, #0
 800cf34:	d1ed      	bne.n	800cf12 <__gethex+0x2ca>
 800cf36:	ee18 0a10 	vmov	r0, s16
 800cf3a:	4621      	mov	r1, r4
 800cf3c:	f000 f9ea 	bl	800d314 <_Bfree>
 800cf40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cf42:	2300      	movs	r3, #0
 800cf44:	6013      	str	r3, [r2, #0]
 800cf46:	2750      	movs	r7, #80	; 0x50
 800cf48:	e713      	b.n	800cd72 <__gethex+0x12a>
 800cf4a:	bf00      	nop
 800cf4c:	0800f030 	.word	0x0800f030
 800cf50:	0800efb4 	.word	0x0800efb4
 800cf54:	0800efc5 	.word	0x0800efc5
 800cf58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d1eb      	bne.n	800cf36 <__gethex+0x2ee>
 800cf5e:	e7d8      	b.n	800cf12 <__gethex+0x2ca>
 800cf60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1d5      	bne.n	800cf12 <__gethex+0x2ca>
 800cf66:	e7e6      	b.n	800cf36 <__gethex+0x2ee>
 800cf68:	1e6f      	subs	r7, r5, #1
 800cf6a:	f1ba 0f00 	cmp.w	sl, #0
 800cf6e:	d131      	bne.n	800cfd4 <__gethex+0x38c>
 800cf70:	b127      	cbz	r7, 800cf7c <__gethex+0x334>
 800cf72:	4639      	mov	r1, r7
 800cf74:	4620      	mov	r0, r4
 800cf76:	f000 fe27 	bl	800dbc8 <__any_on>
 800cf7a:	4682      	mov	sl, r0
 800cf7c:	117b      	asrs	r3, r7, #5
 800cf7e:	2101      	movs	r1, #1
 800cf80:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cf84:	f007 071f 	and.w	r7, r7, #31
 800cf88:	fa01 f707 	lsl.w	r7, r1, r7
 800cf8c:	421f      	tst	r7, r3
 800cf8e:	4629      	mov	r1, r5
 800cf90:	4620      	mov	r0, r4
 800cf92:	bf18      	it	ne
 800cf94:	f04a 0a02 	orrne.w	sl, sl, #2
 800cf98:	1b76      	subs	r6, r6, r5
 800cf9a:	f7ff fded 	bl	800cb78 <rshift>
 800cf9e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cfa2:	2702      	movs	r7, #2
 800cfa4:	f1ba 0f00 	cmp.w	sl, #0
 800cfa8:	d048      	beq.n	800d03c <__gethex+0x3f4>
 800cfaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cfae:	2b02      	cmp	r3, #2
 800cfb0:	d015      	beq.n	800cfde <__gethex+0x396>
 800cfb2:	2b03      	cmp	r3, #3
 800cfb4:	d017      	beq.n	800cfe6 <__gethex+0x39e>
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d109      	bne.n	800cfce <__gethex+0x386>
 800cfba:	f01a 0f02 	tst.w	sl, #2
 800cfbe:	d006      	beq.n	800cfce <__gethex+0x386>
 800cfc0:	f8d9 0000 	ldr.w	r0, [r9]
 800cfc4:	ea4a 0a00 	orr.w	sl, sl, r0
 800cfc8:	f01a 0f01 	tst.w	sl, #1
 800cfcc:	d10e      	bne.n	800cfec <__gethex+0x3a4>
 800cfce:	f047 0710 	orr.w	r7, r7, #16
 800cfd2:	e033      	b.n	800d03c <__gethex+0x3f4>
 800cfd4:	f04f 0a01 	mov.w	sl, #1
 800cfd8:	e7d0      	b.n	800cf7c <__gethex+0x334>
 800cfda:	2701      	movs	r7, #1
 800cfdc:	e7e2      	b.n	800cfa4 <__gethex+0x35c>
 800cfde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfe0:	f1c3 0301 	rsb	r3, r3, #1
 800cfe4:	9315      	str	r3, [sp, #84]	; 0x54
 800cfe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d0f0      	beq.n	800cfce <__gethex+0x386>
 800cfec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cff0:	f104 0314 	add.w	r3, r4, #20
 800cff4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cff8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cffc:	f04f 0c00 	mov.w	ip, #0
 800d000:	4618      	mov	r0, r3
 800d002:	f853 2b04 	ldr.w	r2, [r3], #4
 800d006:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800d00a:	d01c      	beq.n	800d046 <__gethex+0x3fe>
 800d00c:	3201      	adds	r2, #1
 800d00e:	6002      	str	r2, [r0, #0]
 800d010:	2f02      	cmp	r7, #2
 800d012:	f104 0314 	add.w	r3, r4, #20
 800d016:	d13f      	bne.n	800d098 <__gethex+0x450>
 800d018:	f8d8 2000 	ldr.w	r2, [r8]
 800d01c:	3a01      	subs	r2, #1
 800d01e:	42b2      	cmp	r2, r6
 800d020:	d10a      	bne.n	800d038 <__gethex+0x3f0>
 800d022:	1171      	asrs	r1, r6, #5
 800d024:	2201      	movs	r2, #1
 800d026:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d02a:	f006 061f 	and.w	r6, r6, #31
 800d02e:	fa02 f606 	lsl.w	r6, r2, r6
 800d032:	421e      	tst	r6, r3
 800d034:	bf18      	it	ne
 800d036:	4617      	movne	r7, r2
 800d038:	f047 0720 	orr.w	r7, r7, #32
 800d03c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d03e:	601c      	str	r4, [r3, #0]
 800d040:	9b04      	ldr	r3, [sp, #16]
 800d042:	601d      	str	r5, [r3, #0]
 800d044:	e695      	b.n	800cd72 <__gethex+0x12a>
 800d046:	4299      	cmp	r1, r3
 800d048:	f843 cc04 	str.w	ip, [r3, #-4]
 800d04c:	d8d8      	bhi.n	800d000 <__gethex+0x3b8>
 800d04e:	68a3      	ldr	r3, [r4, #8]
 800d050:	459b      	cmp	fp, r3
 800d052:	db19      	blt.n	800d088 <__gethex+0x440>
 800d054:	6861      	ldr	r1, [r4, #4]
 800d056:	ee18 0a10 	vmov	r0, s16
 800d05a:	3101      	adds	r1, #1
 800d05c:	f000 f91a 	bl	800d294 <_Balloc>
 800d060:	4681      	mov	r9, r0
 800d062:	b918      	cbnz	r0, 800d06c <__gethex+0x424>
 800d064:	4b1a      	ldr	r3, [pc, #104]	; (800d0d0 <__gethex+0x488>)
 800d066:	4602      	mov	r2, r0
 800d068:	2184      	movs	r1, #132	; 0x84
 800d06a:	e6a8      	b.n	800cdbe <__gethex+0x176>
 800d06c:	6922      	ldr	r2, [r4, #16]
 800d06e:	3202      	adds	r2, #2
 800d070:	f104 010c 	add.w	r1, r4, #12
 800d074:	0092      	lsls	r2, r2, #2
 800d076:	300c      	adds	r0, #12
 800d078:	f7fd f99a 	bl	800a3b0 <memcpy>
 800d07c:	4621      	mov	r1, r4
 800d07e:	ee18 0a10 	vmov	r0, s16
 800d082:	f000 f947 	bl	800d314 <_Bfree>
 800d086:	464c      	mov	r4, r9
 800d088:	6923      	ldr	r3, [r4, #16]
 800d08a:	1c5a      	adds	r2, r3, #1
 800d08c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d090:	6122      	str	r2, [r4, #16]
 800d092:	2201      	movs	r2, #1
 800d094:	615a      	str	r2, [r3, #20]
 800d096:	e7bb      	b.n	800d010 <__gethex+0x3c8>
 800d098:	6922      	ldr	r2, [r4, #16]
 800d09a:	455a      	cmp	r2, fp
 800d09c:	dd0b      	ble.n	800d0b6 <__gethex+0x46e>
 800d09e:	2101      	movs	r1, #1
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f7ff fd69 	bl	800cb78 <rshift>
 800d0a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0aa:	3501      	adds	r5, #1
 800d0ac:	42ab      	cmp	r3, r5
 800d0ae:	f6ff aed0 	blt.w	800ce52 <__gethex+0x20a>
 800d0b2:	2701      	movs	r7, #1
 800d0b4:	e7c0      	b.n	800d038 <__gethex+0x3f0>
 800d0b6:	f016 061f 	ands.w	r6, r6, #31
 800d0ba:	d0fa      	beq.n	800d0b2 <__gethex+0x46a>
 800d0bc:	449a      	add	sl, r3
 800d0be:	f1c6 0620 	rsb	r6, r6, #32
 800d0c2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d0c6:	f000 f9db 	bl	800d480 <__hi0bits>
 800d0ca:	42b0      	cmp	r0, r6
 800d0cc:	dbe7      	blt.n	800d09e <__gethex+0x456>
 800d0ce:	e7f0      	b.n	800d0b2 <__gethex+0x46a>
 800d0d0:	0800efb4 	.word	0x0800efb4

0800d0d4 <L_shift>:
 800d0d4:	f1c2 0208 	rsb	r2, r2, #8
 800d0d8:	0092      	lsls	r2, r2, #2
 800d0da:	b570      	push	{r4, r5, r6, lr}
 800d0dc:	f1c2 0620 	rsb	r6, r2, #32
 800d0e0:	6843      	ldr	r3, [r0, #4]
 800d0e2:	6804      	ldr	r4, [r0, #0]
 800d0e4:	fa03 f506 	lsl.w	r5, r3, r6
 800d0e8:	432c      	orrs	r4, r5
 800d0ea:	40d3      	lsrs	r3, r2
 800d0ec:	6004      	str	r4, [r0, #0]
 800d0ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800d0f2:	4288      	cmp	r0, r1
 800d0f4:	d3f4      	bcc.n	800d0e0 <L_shift+0xc>
 800d0f6:	bd70      	pop	{r4, r5, r6, pc}

0800d0f8 <__match>:
 800d0f8:	b530      	push	{r4, r5, lr}
 800d0fa:	6803      	ldr	r3, [r0, #0]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d102:	b914      	cbnz	r4, 800d10a <__match+0x12>
 800d104:	6003      	str	r3, [r0, #0]
 800d106:	2001      	movs	r0, #1
 800d108:	bd30      	pop	{r4, r5, pc}
 800d10a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d10e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d112:	2d19      	cmp	r5, #25
 800d114:	bf98      	it	ls
 800d116:	3220      	addls	r2, #32
 800d118:	42a2      	cmp	r2, r4
 800d11a:	d0f0      	beq.n	800d0fe <__match+0x6>
 800d11c:	2000      	movs	r0, #0
 800d11e:	e7f3      	b.n	800d108 <__match+0x10>

0800d120 <__hexnan>:
 800d120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d124:	680b      	ldr	r3, [r1, #0]
 800d126:	6801      	ldr	r1, [r0, #0]
 800d128:	115e      	asrs	r6, r3, #5
 800d12a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d12e:	f013 031f 	ands.w	r3, r3, #31
 800d132:	b087      	sub	sp, #28
 800d134:	bf18      	it	ne
 800d136:	3604      	addne	r6, #4
 800d138:	2500      	movs	r5, #0
 800d13a:	1f37      	subs	r7, r6, #4
 800d13c:	4682      	mov	sl, r0
 800d13e:	4690      	mov	r8, r2
 800d140:	9301      	str	r3, [sp, #4]
 800d142:	f846 5c04 	str.w	r5, [r6, #-4]
 800d146:	46b9      	mov	r9, r7
 800d148:	463c      	mov	r4, r7
 800d14a:	9502      	str	r5, [sp, #8]
 800d14c:	46ab      	mov	fp, r5
 800d14e:	784a      	ldrb	r2, [r1, #1]
 800d150:	1c4b      	adds	r3, r1, #1
 800d152:	9303      	str	r3, [sp, #12]
 800d154:	b342      	cbz	r2, 800d1a8 <__hexnan+0x88>
 800d156:	4610      	mov	r0, r2
 800d158:	9105      	str	r1, [sp, #20]
 800d15a:	9204      	str	r2, [sp, #16]
 800d15c:	f7ff fd5e 	bl	800cc1c <__hexdig_fun>
 800d160:	2800      	cmp	r0, #0
 800d162:	d14f      	bne.n	800d204 <__hexnan+0xe4>
 800d164:	9a04      	ldr	r2, [sp, #16]
 800d166:	9905      	ldr	r1, [sp, #20]
 800d168:	2a20      	cmp	r2, #32
 800d16a:	d818      	bhi.n	800d19e <__hexnan+0x7e>
 800d16c:	9b02      	ldr	r3, [sp, #8]
 800d16e:	459b      	cmp	fp, r3
 800d170:	dd13      	ble.n	800d19a <__hexnan+0x7a>
 800d172:	454c      	cmp	r4, r9
 800d174:	d206      	bcs.n	800d184 <__hexnan+0x64>
 800d176:	2d07      	cmp	r5, #7
 800d178:	dc04      	bgt.n	800d184 <__hexnan+0x64>
 800d17a:	462a      	mov	r2, r5
 800d17c:	4649      	mov	r1, r9
 800d17e:	4620      	mov	r0, r4
 800d180:	f7ff ffa8 	bl	800d0d4 <L_shift>
 800d184:	4544      	cmp	r4, r8
 800d186:	d950      	bls.n	800d22a <__hexnan+0x10a>
 800d188:	2300      	movs	r3, #0
 800d18a:	f1a4 0904 	sub.w	r9, r4, #4
 800d18e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d192:	f8cd b008 	str.w	fp, [sp, #8]
 800d196:	464c      	mov	r4, r9
 800d198:	461d      	mov	r5, r3
 800d19a:	9903      	ldr	r1, [sp, #12]
 800d19c:	e7d7      	b.n	800d14e <__hexnan+0x2e>
 800d19e:	2a29      	cmp	r2, #41	; 0x29
 800d1a0:	d156      	bne.n	800d250 <__hexnan+0x130>
 800d1a2:	3102      	adds	r1, #2
 800d1a4:	f8ca 1000 	str.w	r1, [sl]
 800d1a8:	f1bb 0f00 	cmp.w	fp, #0
 800d1ac:	d050      	beq.n	800d250 <__hexnan+0x130>
 800d1ae:	454c      	cmp	r4, r9
 800d1b0:	d206      	bcs.n	800d1c0 <__hexnan+0xa0>
 800d1b2:	2d07      	cmp	r5, #7
 800d1b4:	dc04      	bgt.n	800d1c0 <__hexnan+0xa0>
 800d1b6:	462a      	mov	r2, r5
 800d1b8:	4649      	mov	r1, r9
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	f7ff ff8a 	bl	800d0d4 <L_shift>
 800d1c0:	4544      	cmp	r4, r8
 800d1c2:	d934      	bls.n	800d22e <__hexnan+0x10e>
 800d1c4:	f1a8 0204 	sub.w	r2, r8, #4
 800d1c8:	4623      	mov	r3, r4
 800d1ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800d1ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800d1d2:	429f      	cmp	r7, r3
 800d1d4:	d2f9      	bcs.n	800d1ca <__hexnan+0xaa>
 800d1d6:	1b3b      	subs	r3, r7, r4
 800d1d8:	f023 0303 	bic.w	r3, r3, #3
 800d1dc:	3304      	adds	r3, #4
 800d1de:	3401      	adds	r4, #1
 800d1e0:	3e03      	subs	r6, #3
 800d1e2:	42b4      	cmp	r4, r6
 800d1e4:	bf88      	it	hi
 800d1e6:	2304      	movhi	r3, #4
 800d1e8:	4443      	add	r3, r8
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f843 2b04 	str.w	r2, [r3], #4
 800d1f0:	429f      	cmp	r7, r3
 800d1f2:	d2fb      	bcs.n	800d1ec <__hexnan+0xcc>
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	b91b      	cbnz	r3, 800d200 <__hexnan+0xe0>
 800d1f8:	4547      	cmp	r7, r8
 800d1fa:	d127      	bne.n	800d24c <__hexnan+0x12c>
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	603b      	str	r3, [r7, #0]
 800d200:	2005      	movs	r0, #5
 800d202:	e026      	b.n	800d252 <__hexnan+0x132>
 800d204:	3501      	adds	r5, #1
 800d206:	2d08      	cmp	r5, #8
 800d208:	f10b 0b01 	add.w	fp, fp, #1
 800d20c:	dd06      	ble.n	800d21c <__hexnan+0xfc>
 800d20e:	4544      	cmp	r4, r8
 800d210:	d9c3      	bls.n	800d19a <__hexnan+0x7a>
 800d212:	2300      	movs	r3, #0
 800d214:	f844 3c04 	str.w	r3, [r4, #-4]
 800d218:	2501      	movs	r5, #1
 800d21a:	3c04      	subs	r4, #4
 800d21c:	6822      	ldr	r2, [r4, #0]
 800d21e:	f000 000f 	and.w	r0, r0, #15
 800d222:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d226:	6022      	str	r2, [r4, #0]
 800d228:	e7b7      	b.n	800d19a <__hexnan+0x7a>
 800d22a:	2508      	movs	r5, #8
 800d22c:	e7b5      	b.n	800d19a <__hexnan+0x7a>
 800d22e:	9b01      	ldr	r3, [sp, #4]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d0df      	beq.n	800d1f4 <__hexnan+0xd4>
 800d234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d238:	f1c3 0320 	rsb	r3, r3, #32
 800d23c:	fa22 f303 	lsr.w	r3, r2, r3
 800d240:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d244:	401a      	ands	r2, r3
 800d246:	f846 2c04 	str.w	r2, [r6, #-4]
 800d24a:	e7d3      	b.n	800d1f4 <__hexnan+0xd4>
 800d24c:	3f04      	subs	r7, #4
 800d24e:	e7d1      	b.n	800d1f4 <__hexnan+0xd4>
 800d250:	2004      	movs	r0, #4
 800d252:	b007      	add	sp, #28
 800d254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d258 <_localeconv_r>:
 800d258:	4800      	ldr	r0, [pc, #0]	; (800d25c <_localeconv_r+0x4>)
 800d25a:	4770      	bx	lr
 800d25c:	20000174 	.word	0x20000174

0800d260 <malloc>:
 800d260:	4b02      	ldr	r3, [pc, #8]	; (800d26c <malloc+0xc>)
 800d262:	4601      	mov	r1, r0
 800d264:	6818      	ldr	r0, [r3, #0]
 800d266:	f000 bd2f 	b.w	800dcc8 <_malloc_r>
 800d26a:	bf00      	nop
 800d26c:	2000001c 	.word	0x2000001c

0800d270 <__ascii_mbtowc>:
 800d270:	b082      	sub	sp, #8
 800d272:	b901      	cbnz	r1, 800d276 <__ascii_mbtowc+0x6>
 800d274:	a901      	add	r1, sp, #4
 800d276:	b142      	cbz	r2, 800d28a <__ascii_mbtowc+0x1a>
 800d278:	b14b      	cbz	r3, 800d28e <__ascii_mbtowc+0x1e>
 800d27a:	7813      	ldrb	r3, [r2, #0]
 800d27c:	600b      	str	r3, [r1, #0]
 800d27e:	7812      	ldrb	r2, [r2, #0]
 800d280:	1e10      	subs	r0, r2, #0
 800d282:	bf18      	it	ne
 800d284:	2001      	movne	r0, #1
 800d286:	b002      	add	sp, #8
 800d288:	4770      	bx	lr
 800d28a:	4610      	mov	r0, r2
 800d28c:	e7fb      	b.n	800d286 <__ascii_mbtowc+0x16>
 800d28e:	f06f 0001 	mvn.w	r0, #1
 800d292:	e7f8      	b.n	800d286 <__ascii_mbtowc+0x16>

0800d294 <_Balloc>:
 800d294:	b570      	push	{r4, r5, r6, lr}
 800d296:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d298:	4604      	mov	r4, r0
 800d29a:	460d      	mov	r5, r1
 800d29c:	b976      	cbnz	r6, 800d2bc <_Balloc+0x28>
 800d29e:	2010      	movs	r0, #16
 800d2a0:	f7ff ffde 	bl	800d260 <malloc>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	6260      	str	r0, [r4, #36]	; 0x24
 800d2a8:	b920      	cbnz	r0, 800d2b4 <_Balloc+0x20>
 800d2aa:	4b18      	ldr	r3, [pc, #96]	; (800d30c <_Balloc+0x78>)
 800d2ac:	4818      	ldr	r0, [pc, #96]	; (800d310 <_Balloc+0x7c>)
 800d2ae:	2166      	movs	r1, #102	; 0x66
 800d2b0:	f000 fefa 	bl	800e0a8 <__assert_func>
 800d2b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2b8:	6006      	str	r6, [r0, #0]
 800d2ba:	60c6      	str	r6, [r0, #12]
 800d2bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d2be:	68f3      	ldr	r3, [r6, #12]
 800d2c0:	b183      	cbz	r3, 800d2e4 <_Balloc+0x50>
 800d2c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d2ca:	b9b8      	cbnz	r0, 800d2fc <_Balloc+0x68>
 800d2cc:	2101      	movs	r1, #1
 800d2ce:	fa01 f605 	lsl.w	r6, r1, r5
 800d2d2:	1d72      	adds	r2, r6, #5
 800d2d4:	0092      	lsls	r2, r2, #2
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	f000 fc97 	bl	800dc0a <_calloc_r>
 800d2dc:	b160      	cbz	r0, 800d2f8 <_Balloc+0x64>
 800d2de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d2e2:	e00e      	b.n	800d302 <_Balloc+0x6e>
 800d2e4:	2221      	movs	r2, #33	; 0x21
 800d2e6:	2104      	movs	r1, #4
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f000 fc8e 	bl	800dc0a <_calloc_r>
 800d2ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2f0:	60f0      	str	r0, [r6, #12]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d1e4      	bne.n	800d2c2 <_Balloc+0x2e>
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	bd70      	pop	{r4, r5, r6, pc}
 800d2fc:	6802      	ldr	r2, [r0, #0]
 800d2fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d302:	2300      	movs	r3, #0
 800d304:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d308:	e7f7      	b.n	800d2fa <_Balloc+0x66>
 800d30a:	bf00      	nop
 800d30c:	0800ef3e 	.word	0x0800ef3e
 800d310:	0800f044 	.word	0x0800f044

0800d314 <_Bfree>:
 800d314:	b570      	push	{r4, r5, r6, lr}
 800d316:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d318:	4605      	mov	r5, r0
 800d31a:	460c      	mov	r4, r1
 800d31c:	b976      	cbnz	r6, 800d33c <_Bfree+0x28>
 800d31e:	2010      	movs	r0, #16
 800d320:	f7ff ff9e 	bl	800d260 <malloc>
 800d324:	4602      	mov	r2, r0
 800d326:	6268      	str	r0, [r5, #36]	; 0x24
 800d328:	b920      	cbnz	r0, 800d334 <_Bfree+0x20>
 800d32a:	4b09      	ldr	r3, [pc, #36]	; (800d350 <_Bfree+0x3c>)
 800d32c:	4809      	ldr	r0, [pc, #36]	; (800d354 <_Bfree+0x40>)
 800d32e:	218a      	movs	r1, #138	; 0x8a
 800d330:	f000 feba 	bl	800e0a8 <__assert_func>
 800d334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d338:	6006      	str	r6, [r0, #0]
 800d33a:	60c6      	str	r6, [r0, #12]
 800d33c:	b13c      	cbz	r4, 800d34e <_Bfree+0x3a>
 800d33e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d340:	6862      	ldr	r2, [r4, #4]
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d348:	6021      	str	r1, [r4, #0]
 800d34a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d34e:	bd70      	pop	{r4, r5, r6, pc}
 800d350:	0800ef3e 	.word	0x0800ef3e
 800d354:	0800f044 	.word	0x0800f044

0800d358 <__multadd>:
 800d358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d35c:	690e      	ldr	r6, [r1, #16]
 800d35e:	4607      	mov	r7, r0
 800d360:	4698      	mov	r8, r3
 800d362:	460c      	mov	r4, r1
 800d364:	f101 0014 	add.w	r0, r1, #20
 800d368:	2300      	movs	r3, #0
 800d36a:	6805      	ldr	r5, [r0, #0]
 800d36c:	b2a9      	uxth	r1, r5
 800d36e:	fb02 8101 	mla	r1, r2, r1, r8
 800d372:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d376:	0c2d      	lsrs	r5, r5, #16
 800d378:	fb02 c505 	mla	r5, r2, r5, ip
 800d37c:	b289      	uxth	r1, r1
 800d37e:	3301      	adds	r3, #1
 800d380:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d384:	429e      	cmp	r6, r3
 800d386:	f840 1b04 	str.w	r1, [r0], #4
 800d38a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d38e:	dcec      	bgt.n	800d36a <__multadd+0x12>
 800d390:	f1b8 0f00 	cmp.w	r8, #0
 800d394:	d022      	beq.n	800d3dc <__multadd+0x84>
 800d396:	68a3      	ldr	r3, [r4, #8]
 800d398:	42b3      	cmp	r3, r6
 800d39a:	dc19      	bgt.n	800d3d0 <__multadd+0x78>
 800d39c:	6861      	ldr	r1, [r4, #4]
 800d39e:	4638      	mov	r0, r7
 800d3a0:	3101      	adds	r1, #1
 800d3a2:	f7ff ff77 	bl	800d294 <_Balloc>
 800d3a6:	4605      	mov	r5, r0
 800d3a8:	b928      	cbnz	r0, 800d3b6 <__multadd+0x5e>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	4b0d      	ldr	r3, [pc, #52]	; (800d3e4 <__multadd+0x8c>)
 800d3ae:	480e      	ldr	r0, [pc, #56]	; (800d3e8 <__multadd+0x90>)
 800d3b0:	21b5      	movs	r1, #181	; 0xb5
 800d3b2:	f000 fe79 	bl	800e0a8 <__assert_func>
 800d3b6:	6922      	ldr	r2, [r4, #16]
 800d3b8:	3202      	adds	r2, #2
 800d3ba:	f104 010c 	add.w	r1, r4, #12
 800d3be:	0092      	lsls	r2, r2, #2
 800d3c0:	300c      	adds	r0, #12
 800d3c2:	f7fc fff5 	bl	800a3b0 <memcpy>
 800d3c6:	4621      	mov	r1, r4
 800d3c8:	4638      	mov	r0, r7
 800d3ca:	f7ff ffa3 	bl	800d314 <_Bfree>
 800d3ce:	462c      	mov	r4, r5
 800d3d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d3d4:	3601      	adds	r6, #1
 800d3d6:	f8c3 8014 	str.w	r8, [r3, #20]
 800d3da:	6126      	str	r6, [r4, #16]
 800d3dc:	4620      	mov	r0, r4
 800d3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3e2:	bf00      	nop
 800d3e4:	0800efb4 	.word	0x0800efb4
 800d3e8:	0800f044 	.word	0x0800f044

0800d3ec <__s2b>:
 800d3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3f0:	460c      	mov	r4, r1
 800d3f2:	4615      	mov	r5, r2
 800d3f4:	461f      	mov	r7, r3
 800d3f6:	2209      	movs	r2, #9
 800d3f8:	3308      	adds	r3, #8
 800d3fa:	4606      	mov	r6, r0
 800d3fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d400:	2100      	movs	r1, #0
 800d402:	2201      	movs	r2, #1
 800d404:	429a      	cmp	r2, r3
 800d406:	db09      	blt.n	800d41c <__s2b+0x30>
 800d408:	4630      	mov	r0, r6
 800d40a:	f7ff ff43 	bl	800d294 <_Balloc>
 800d40e:	b940      	cbnz	r0, 800d422 <__s2b+0x36>
 800d410:	4602      	mov	r2, r0
 800d412:	4b19      	ldr	r3, [pc, #100]	; (800d478 <__s2b+0x8c>)
 800d414:	4819      	ldr	r0, [pc, #100]	; (800d47c <__s2b+0x90>)
 800d416:	21ce      	movs	r1, #206	; 0xce
 800d418:	f000 fe46 	bl	800e0a8 <__assert_func>
 800d41c:	0052      	lsls	r2, r2, #1
 800d41e:	3101      	adds	r1, #1
 800d420:	e7f0      	b.n	800d404 <__s2b+0x18>
 800d422:	9b08      	ldr	r3, [sp, #32]
 800d424:	6143      	str	r3, [r0, #20]
 800d426:	2d09      	cmp	r5, #9
 800d428:	f04f 0301 	mov.w	r3, #1
 800d42c:	6103      	str	r3, [r0, #16]
 800d42e:	dd16      	ble.n	800d45e <__s2b+0x72>
 800d430:	f104 0909 	add.w	r9, r4, #9
 800d434:	46c8      	mov	r8, r9
 800d436:	442c      	add	r4, r5
 800d438:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d43c:	4601      	mov	r1, r0
 800d43e:	3b30      	subs	r3, #48	; 0x30
 800d440:	220a      	movs	r2, #10
 800d442:	4630      	mov	r0, r6
 800d444:	f7ff ff88 	bl	800d358 <__multadd>
 800d448:	45a0      	cmp	r8, r4
 800d44a:	d1f5      	bne.n	800d438 <__s2b+0x4c>
 800d44c:	f1a5 0408 	sub.w	r4, r5, #8
 800d450:	444c      	add	r4, r9
 800d452:	1b2d      	subs	r5, r5, r4
 800d454:	1963      	adds	r3, r4, r5
 800d456:	42bb      	cmp	r3, r7
 800d458:	db04      	blt.n	800d464 <__s2b+0x78>
 800d45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d45e:	340a      	adds	r4, #10
 800d460:	2509      	movs	r5, #9
 800d462:	e7f6      	b.n	800d452 <__s2b+0x66>
 800d464:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d468:	4601      	mov	r1, r0
 800d46a:	3b30      	subs	r3, #48	; 0x30
 800d46c:	220a      	movs	r2, #10
 800d46e:	4630      	mov	r0, r6
 800d470:	f7ff ff72 	bl	800d358 <__multadd>
 800d474:	e7ee      	b.n	800d454 <__s2b+0x68>
 800d476:	bf00      	nop
 800d478:	0800efb4 	.word	0x0800efb4
 800d47c:	0800f044 	.word	0x0800f044

0800d480 <__hi0bits>:
 800d480:	0c03      	lsrs	r3, r0, #16
 800d482:	041b      	lsls	r3, r3, #16
 800d484:	b9d3      	cbnz	r3, 800d4bc <__hi0bits+0x3c>
 800d486:	0400      	lsls	r0, r0, #16
 800d488:	2310      	movs	r3, #16
 800d48a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d48e:	bf04      	itt	eq
 800d490:	0200      	lsleq	r0, r0, #8
 800d492:	3308      	addeq	r3, #8
 800d494:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d498:	bf04      	itt	eq
 800d49a:	0100      	lsleq	r0, r0, #4
 800d49c:	3304      	addeq	r3, #4
 800d49e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d4a2:	bf04      	itt	eq
 800d4a4:	0080      	lsleq	r0, r0, #2
 800d4a6:	3302      	addeq	r3, #2
 800d4a8:	2800      	cmp	r0, #0
 800d4aa:	db05      	blt.n	800d4b8 <__hi0bits+0x38>
 800d4ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d4b0:	f103 0301 	add.w	r3, r3, #1
 800d4b4:	bf08      	it	eq
 800d4b6:	2320      	moveq	r3, #32
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	4770      	bx	lr
 800d4bc:	2300      	movs	r3, #0
 800d4be:	e7e4      	b.n	800d48a <__hi0bits+0xa>

0800d4c0 <__lo0bits>:
 800d4c0:	6803      	ldr	r3, [r0, #0]
 800d4c2:	f013 0207 	ands.w	r2, r3, #7
 800d4c6:	4601      	mov	r1, r0
 800d4c8:	d00b      	beq.n	800d4e2 <__lo0bits+0x22>
 800d4ca:	07da      	lsls	r2, r3, #31
 800d4cc:	d424      	bmi.n	800d518 <__lo0bits+0x58>
 800d4ce:	0798      	lsls	r0, r3, #30
 800d4d0:	bf49      	itett	mi
 800d4d2:	085b      	lsrmi	r3, r3, #1
 800d4d4:	089b      	lsrpl	r3, r3, #2
 800d4d6:	2001      	movmi	r0, #1
 800d4d8:	600b      	strmi	r3, [r1, #0]
 800d4da:	bf5c      	itt	pl
 800d4dc:	600b      	strpl	r3, [r1, #0]
 800d4de:	2002      	movpl	r0, #2
 800d4e0:	4770      	bx	lr
 800d4e2:	b298      	uxth	r0, r3
 800d4e4:	b9b0      	cbnz	r0, 800d514 <__lo0bits+0x54>
 800d4e6:	0c1b      	lsrs	r3, r3, #16
 800d4e8:	2010      	movs	r0, #16
 800d4ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d4ee:	bf04      	itt	eq
 800d4f0:	0a1b      	lsreq	r3, r3, #8
 800d4f2:	3008      	addeq	r0, #8
 800d4f4:	071a      	lsls	r2, r3, #28
 800d4f6:	bf04      	itt	eq
 800d4f8:	091b      	lsreq	r3, r3, #4
 800d4fa:	3004      	addeq	r0, #4
 800d4fc:	079a      	lsls	r2, r3, #30
 800d4fe:	bf04      	itt	eq
 800d500:	089b      	lsreq	r3, r3, #2
 800d502:	3002      	addeq	r0, #2
 800d504:	07da      	lsls	r2, r3, #31
 800d506:	d403      	bmi.n	800d510 <__lo0bits+0x50>
 800d508:	085b      	lsrs	r3, r3, #1
 800d50a:	f100 0001 	add.w	r0, r0, #1
 800d50e:	d005      	beq.n	800d51c <__lo0bits+0x5c>
 800d510:	600b      	str	r3, [r1, #0]
 800d512:	4770      	bx	lr
 800d514:	4610      	mov	r0, r2
 800d516:	e7e8      	b.n	800d4ea <__lo0bits+0x2a>
 800d518:	2000      	movs	r0, #0
 800d51a:	4770      	bx	lr
 800d51c:	2020      	movs	r0, #32
 800d51e:	4770      	bx	lr

0800d520 <__i2b>:
 800d520:	b510      	push	{r4, lr}
 800d522:	460c      	mov	r4, r1
 800d524:	2101      	movs	r1, #1
 800d526:	f7ff feb5 	bl	800d294 <_Balloc>
 800d52a:	4602      	mov	r2, r0
 800d52c:	b928      	cbnz	r0, 800d53a <__i2b+0x1a>
 800d52e:	4b05      	ldr	r3, [pc, #20]	; (800d544 <__i2b+0x24>)
 800d530:	4805      	ldr	r0, [pc, #20]	; (800d548 <__i2b+0x28>)
 800d532:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d536:	f000 fdb7 	bl	800e0a8 <__assert_func>
 800d53a:	2301      	movs	r3, #1
 800d53c:	6144      	str	r4, [r0, #20]
 800d53e:	6103      	str	r3, [r0, #16]
 800d540:	bd10      	pop	{r4, pc}
 800d542:	bf00      	nop
 800d544:	0800efb4 	.word	0x0800efb4
 800d548:	0800f044 	.word	0x0800f044

0800d54c <__multiply>:
 800d54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d550:	4614      	mov	r4, r2
 800d552:	690a      	ldr	r2, [r1, #16]
 800d554:	6923      	ldr	r3, [r4, #16]
 800d556:	429a      	cmp	r2, r3
 800d558:	bfb8      	it	lt
 800d55a:	460b      	movlt	r3, r1
 800d55c:	460d      	mov	r5, r1
 800d55e:	bfbc      	itt	lt
 800d560:	4625      	movlt	r5, r4
 800d562:	461c      	movlt	r4, r3
 800d564:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d568:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d56c:	68ab      	ldr	r3, [r5, #8]
 800d56e:	6869      	ldr	r1, [r5, #4]
 800d570:	eb0a 0709 	add.w	r7, sl, r9
 800d574:	42bb      	cmp	r3, r7
 800d576:	b085      	sub	sp, #20
 800d578:	bfb8      	it	lt
 800d57a:	3101      	addlt	r1, #1
 800d57c:	f7ff fe8a 	bl	800d294 <_Balloc>
 800d580:	b930      	cbnz	r0, 800d590 <__multiply+0x44>
 800d582:	4602      	mov	r2, r0
 800d584:	4b42      	ldr	r3, [pc, #264]	; (800d690 <__multiply+0x144>)
 800d586:	4843      	ldr	r0, [pc, #268]	; (800d694 <__multiply+0x148>)
 800d588:	f240 115d 	movw	r1, #349	; 0x15d
 800d58c:	f000 fd8c 	bl	800e0a8 <__assert_func>
 800d590:	f100 0614 	add.w	r6, r0, #20
 800d594:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d598:	4633      	mov	r3, r6
 800d59a:	2200      	movs	r2, #0
 800d59c:	4543      	cmp	r3, r8
 800d59e:	d31e      	bcc.n	800d5de <__multiply+0x92>
 800d5a0:	f105 0c14 	add.w	ip, r5, #20
 800d5a4:	f104 0314 	add.w	r3, r4, #20
 800d5a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d5ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d5b0:	9202      	str	r2, [sp, #8]
 800d5b2:	ebac 0205 	sub.w	r2, ip, r5
 800d5b6:	3a15      	subs	r2, #21
 800d5b8:	f022 0203 	bic.w	r2, r2, #3
 800d5bc:	3204      	adds	r2, #4
 800d5be:	f105 0115 	add.w	r1, r5, #21
 800d5c2:	458c      	cmp	ip, r1
 800d5c4:	bf38      	it	cc
 800d5c6:	2204      	movcc	r2, #4
 800d5c8:	9201      	str	r2, [sp, #4]
 800d5ca:	9a02      	ldr	r2, [sp, #8]
 800d5cc:	9303      	str	r3, [sp, #12]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d808      	bhi.n	800d5e4 <__multiply+0x98>
 800d5d2:	2f00      	cmp	r7, #0
 800d5d4:	dc55      	bgt.n	800d682 <__multiply+0x136>
 800d5d6:	6107      	str	r7, [r0, #16]
 800d5d8:	b005      	add	sp, #20
 800d5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5de:	f843 2b04 	str.w	r2, [r3], #4
 800d5e2:	e7db      	b.n	800d59c <__multiply+0x50>
 800d5e4:	f8b3 a000 	ldrh.w	sl, [r3]
 800d5e8:	f1ba 0f00 	cmp.w	sl, #0
 800d5ec:	d020      	beq.n	800d630 <__multiply+0xe4>
 800d5ee:	f105 0e14 	add.w	lr, r5, #20
 800d5f2:	46b1      	mov	r9, r6
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d5fa:	f8d9 b000 	ldr.w	fp, [r9]
 800d5fe:	b2a1      	uxth	r1, r4
 800d600:	fa1f fb8b 	uxth.w	fp, fp
 800d604:	fb0a b101 	mla	r1, sl, r1, fp
 800d608:	4411      	add	r1, r2
 800d60a:	f8d9 2000 	ldr.w	r2, [r9]
 800d60e:	0c24      	lsrs	r4, r4, #16
 800d610:	0c12      	lsrs	r2, r2, #16
 800d612:	fb0a 2404 	mla	r4, sl, r4, r2
 800d616:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d61a:	b289      	uxth	r1, r1
 800d61c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d620:	45f4      	cmp	ip, lr
 800d622:	f849 1b04 	str.w	r1, [r9], #4
 800d626:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d62a:	d8e4      	bhi.n	800d5f6 <__multiply+0xaa>
 800d62c:	9901      	ldr	r1, [sp, #4]
 800d62e:	5072      	str	r2, [r6, r1]
 800d630:	9a03      	ldr	r2, [sp, #12]
 800d632:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d636:	3304      	adds	r3, #4
 800d638:	f1b9 0f00 	cmp.w	r9, #0
 800d63c:	d01f      	beq.n	800d67e <__multiply+0x132>
 800d63e:	6834      	ldr	r4, [r6, #0]
 800d640:	f105 0114 	add.w	r1, r5, #20
 800d644:	46b6      	mov	lr, r6
 800d646:	f04f 0a00 	mov.w	sl, #0
 800d64a:	880a      	ldrh	r2, [r1, #0]
 800d64c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d650:	fb09 b202 	mla	r2, r9, r2, fp
 800d654:	4492      	add	sl, r2
 800d656:	b2a4      	uxth	r4, r4
 800d658:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d65c:	f84e 4b04 	str.w	r4, [lr], #4
 800d660:	f851 4b04 	ldr.w	r4, [r1], #4
 800d664:	f8be 2000 	ldrh.w	r2, [lr]
 800d668:	0c24      	lsrs	r4, r4, #16
 800d66a:	fb09 2404 	mla	r4, r9, r4, r2
 800d66e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d672:	458c      	cmp	ip, r1
 800d674:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d678:	d8e7      	bhi.n	800d64a <__multiply+0xfe>
 800d67a:	9a01      	ldr	r2, [sp, #4]
 800d67c:	50b4      	str	r4, [r6, r2]
 800d67e:	3604      	adds	r6, #4
 800d680:	e7a3      	b.n	800d5ca <__multiply+0x7e>
 800d682:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d686:	2b00      	cmp	r3, #0
 800d688:	d1a5      	bne.n	800d5d6 <__multiply+0x8a>
 800d68a:	3f01      	subs	r7, #1
 800d68c:	e7a1      	b.n	800d5d2 <__multiply+0x86>
 800d68e:	bf00      	nop
 800d690:	0800efb4 	.word	0x0800efb4
 800d694:	0800f044 	.word	0x0800f044

0800d698 <__pow5mult>:
 800d698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d69c:	4615      	mov	r5, r2
 800d69e:	f012 0203 	ands.w	r2, r2, #3
 800d6a2:	4606      	mov	r6, r0
 800d6a4:	460f      	mov	r7, r1
 800d6a6:	d007      	beq.n	800d6b8 <__pow5mult+0x20>
 800d6a8:	4c25      	ldr	r4, [pc, #148]	; (800d740 <__pow5mult+0xa8>)
 800d6aa:	3a01      	subs	r2, #1
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d6b2:	f7ff fe51 	bl	800d358 <__multadd>
 800d6b6:	4607      	mov	r7, r0
 800d6b8:	10ad      	asrs	r5, r5, #2
 800d6ba:	d03d      	beq.n	800d738 <__pow5mult+0xa0>
 800d6bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d6be:	b97c      	cbnz	r4, 800d6e0 <__pow5mult+0x48>
 800d6c0:	2010      	movs	r0, #16
 800d6c2:	f7ff fdcd 	bl	800d260 <malloc>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	6270      	str	r0, [r6, #36]	; 0x24
 800d6ca:	b928      	cbnz	r0, 800d6d8 <__pow5mult+0x40>
 800d6cc:	4b1d      	ldr	r3, [pc, #116]	; (800d744 <__pow5mult+0xac>)
 800d6ce:	481e      	ldr	r0, [pc, #120]	; (800d748 <__pow5mult+0xb0>)
 800d6d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d6d4:	f000 fce8 	bl	800e0a8 <__assert_func>
 800d6d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6dc:	6004      	str	r4, [r0, #0]
 800d6de:	60c4      	str	r4, [r0, #12]
 800d6e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d6e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6e8:	b94c      	cbnz	r4, 800d6fe <__pow5mult+0x66>
 800d6ea:	f240 2171 	movw	r1, #625	; 0x271
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f7ff ff16 	bl	800d520 <__i2b>
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6fa:	4604      	mov	r4, r0
 800d6fc:	6003      	str	r3, [r0, #0]
 800d6fe:	f04f 0900 	mov.w	r9, #0
 800d702:	07eb      	lsls	r3, r5, #31
 800d704:	d50a      	bpl.n	800d71c <__pow5mult+0x84>
 800d706:	4639      	mov	r1, r7
 800d708:	4622      	mov	r2, r4
 800d70a:	4630      	mov	r0, r6
 800d70c:	f7ff ff1e 	bl	800d54c <__multiply>
 800d710:	4639      	mov	r1, r7
 800d712:	4680      	mov	r8, r0
 800d714:	4630      	mov	r0, r6
 800d716:	f7ff fdfd 	bl	800d314 <_Bfree>
 800d71a:	4647      	mov	r7, r8
 800d71c:	106d      	asrs	r5, r5, #1
 800d71e:	d00b      	beq.n	800d738 <__pow5mult+0xa0>
 800d720:	6820      	ldr	r0, [r4, #0]
 800d722:	b938      	cbnz	r0, 800d734 <__pow5mult+0x9c>
 800d724:	4622      	mov	r2, r4
 800d726:	4621      	mov	r1, r4
 800d728:	4630      	mov	r0, r6
 800d72a:	f7ff ff0f 	bl	800d54c <__multiply>
 800d72e:	6020      	str	r0, [r4, #0]
 800d730:	f8c0 9000 	str.w	r9, [r0]
 800d734:	4604      	mov	r4, r0
 800d736:	e7e4      	b.n	800d702 <__pow5mult+0x6a>
 800d738:	4638      	mov	r0, r7
 800d73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d73e:	bf00      	nop
 800d740:	0800f198 	.word	0x0800f198
 800d744:	0800ef3e 	.word	0x0800ef3e
 800d748:	0800f044 	.word	0x0800f044

0800d74c <__lshift>:
 800d74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d750:	460c      	mov	r4, r1
 800d752:	6849      	ldr	r1, [r1, #4]
 800d754:	6923      	ldr	r3, [r4, #16]
 800d756:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d75a:	68a3      	ldr	r3, [r4, #8]
 800d75c:	4607      	mov	r7, r0
 800d75e:	4691      	mov	r9, r2
 800d760:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d764:	f108 0601 	add.w	r6, r8, #1
 800d768:	42b3      	cmp	r3, r6
 800d76a:	db0b      	blt.n	800d784 <__lshift+0x38>
 800d76c:	4638      	mov	r0, r7
 800d76e:	f7ff fd91 	bl	800d294 <_Balloc>
 800d772:	4605      	mov	r5, r0
 800d774:	b948      	cbnz	r0, 800d78a <__lshift+0x3e>
 800d776:	4602      	mov	r2, r0
 800d778:	4b28      	ldr	r3, [pc, #160]	; (800d81c <__lshift+0xd0>)
 800d77a:	4829      	ldr	r0, [pc, #164]	; (800d820 <__lshift+0xd4>)
 800d77c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d780:	f000 fc92 	bl	800e0a8 <__assert_func>
 800d784:	3101      	adds	r1, #1
 800d786:	005b      	lsls	r3, r3, #1
 800d788:	e7ee      	b.n	800d768 <__lshift+0x1c>
 800d78a:	2300      	movs	r3, #0
 800d78c:	f100 0114 	add.w	r1, r0, #20
 800d790:	f100 0210 	add.w	r2, r0, #16
 800d794:	4618      	mov	r0, r3
 800d796:	4553      	cmp	r3, sl
 800d798:	db33      	blt.n	800d802 <__lshift+0xb6>
 800d79a:	6920      	ldr	r0, [r4, #16]
 800d79c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d7a0:	f104 0314 	add.w	r3, r4, #20
 800d7a4:	f019 091f 	ands.w	r9, r9, #31
 800d7a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d7ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d7b0:	d02b      	beq.n	800d80a <__lshift+0xbe>
 800d7b2:	f1c9 0e20 	rsb	lr, r9, #32
 800d7b6:	468a      	mov	sl, r1
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	6818      	ldr	r0, [r3, #0]
 800d7bc:	fa00 f009 	lsl.w	r0, r0, r9
 800d7c0:	4302      	orrs	r2, r0
 800d7c2:	f84a 2b04 	str.w	r2, [sl], #4
 800d7c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7ca:	459c      	cmp	ip, r3
 800d7cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d7d0:	d8f3      	bhi.n	800d7ba <__lshift+0x6e>
 800d7d2:	ebac 0304 	sub.w	r3, ip, r4
 800d7d6:	3b15      	subs	r3, #21
 800d7d8:	f023 0303 	bic.w	r3, r3, #3
 800d7dc:	3304      	adds	r3, #4
 800d7de:	f104 0015 	add.w	r0, r4, #21
 800d7e2:	4584      	cmp	ip, r0
 800d7e4:	bf38      	it	cc
 800d7e6:	2304      	movcc	r3, #4
 800d7e8:	50ca      	str	r2, [r1, r3]
 800d7ea:	b10a      	cbz	r2, 800d7f0 <__lshift+0xa4>
 800d7ec:	f108 0602 	add.w	r6, r8, #2
 800d7f0:	3e01      	subs	r6, #1
 800d7f2:	4638      	mov	r0, r7
 800d7f4:	612e      	str	r6, [r5, #16]
 800d7f6:	4621      	mov	r1, r4
 800d7f8:	f7ff fd8c 	bl	800d314 <_Bfree>
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d802:	f842 0f04 	str.w	r0, [r2, #4]!
 800d806:	3301      	adds	r3, #1
 800d808:	e7c5      	b.n	800d796 <__lshift+0x4a>
 800d80a:	3904      	subs	r1, #4
 800d80c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d810:	f841 2f04 	str.w	r2, [r1, #4]!
 800d814:	459c      	cmp	ip, r3
 800d816:	d8f9      	bhi.n	800d80c <__lshift+0xc0>
 800d818:	e7ea      	b.n	800d7f0 <__lshift+0xa4>
 800d81a:	bf00      	nop
 800d81c:	0800efb4 	.word	0x0800efb4
 800d820:	0800f044 	.word	0x0800f044

0800d824 <__mcmp>:
 800d824:	b530      	push	{r4, r5, lr}
 800d826:	6902      	ldr	r2, [r0, #16]
 800d828:	690c      	ldr	r4, [r1, #16]
 800d82a:	1b12      	subs	r2, r2, r4
 800d82c:	d10e      	bne.n	800d84c <__mcmp+0x28>
 800d82e:	f100 0314 	add.w	r3, r0, #20
 800d832:	3114      	adds	r1, #20
 800d834:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d838:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d83c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d840:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d844:	42a5      	cmp	r5, r4
 800d846:	d003      	beq.n	800d850 <__mcmp+0x2c>
 800d848:	d305      	bcc.n	800d856 <__mcmp+0x32>
 800d84a:	2201      	movs	r2, #1
 800d84c:	4610      	mov	r0, r2
 800d84e:	bd30      	pop	{r4, r5, pc}
 800d850:	4283      	cmp	r3, r0
 800d852:	d3f3      	bcc.n	800d83c <__mcmp+0x18>
 800d854:	e7fa      	b.n	800d84c <__mcmp+0x28>
 800d856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d85a:	e7f7      	b.n	800d84c <__mcmp+0x28>

0800d85c <__mdiff>:
 800d85c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d860:	460c      	mov	r4, r1
 800d862:	4606      	mov	r6, r0
 800d864:	4611      	mov	r1, r2
 800d866:	4620      	mov	r0, r4
 800d868:	4617      	mov	r7, r2
 800d86a:	f7ff ffdb 	bl	800d824 <__mcmp>
 800d86e:	1e05      	subs	r5, r0, #0
 800d870:	d110      	bne.n	800d894 <__mdiff+0x38>
 800d872:	4629      	mov	r1, r5
 800d874:	4630      	mov	r0, r6
 800d876:	f7ff fd0d 	bl	800d294 <_Balloc>
 800d87a:	b930      	cbnz	r0, 800d88a <__mdiff+0x2e>
 800d87c:	4b39      	ldr	r3, [pc, #228]	; (800d964 <__mdiff+0x108>)
 800d87e:	4602      	mov	r2, r0
 800d880:	f240 2132 	movw	r1, #562	; 0x232
 800d884:	4838      	ldr	r0, [pc, #224]	; (800d968 <__mdiff+0x10c>)
 800d886:	f000 fc0f 	bl	800e0a8 <__assert_func>
 800d88a:	2301      	movs	r3, #1
 800d88c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d894:	bfa4      	itt	ge
 800d896:	463b      	movge	r3, r7
 800d898:	4627      	movge	r7, r4
 800d89a:	4630      	mov	r0, r6
 800d89c:	6879      	ldr	r1, [r7, #4]
 800d89e:	bfa6      	itte	ge
 800d8a0:	461c      	movge	r4, r3
 800d8a2:	2500      	movge	r5, #0
 800d8a4:	2501      	movlt	r5, #1
 800d8a6:	f7ff fcf5 	bl	800d294 <_Balloc>
 800d8aa:	b920      	cbnz	r0, 800d8b6 <__mdiff+0x5a>
 800d8ac:	4b2d      	ldr	r3, [pc, #180]	; (800d964 <__mdiff+0x108>)
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d8b4:	e7e6      	b.n	800d884 <__mdiff+0x28>
 800d8b6:	693e      	ldr	r6, [r7, #16]
 800d8b8:	60c5      	str	r5, [r0, #12]
 800d8ba:	6925      	ldr	r5, [r4, #16]
 800d8bc:	f107 0114 	add.w	r1, r7, #20
 800d8c0:	f104 0914 	add.w	r9, r4, #20
 800d8c4:	f100 0e14 	add.w	lr, r0, #20
 800d8c8:	f107 0210 	add.w	r2, r7, #16
 800d8cc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d8d0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d8d4:	46f2      	mov	sl, lr
 800d8d6:	2700      	movs	r7, #0
 800d8d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d8dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d8e0:	fa1f f883 	uxth.w	r8, r3
 800d8e4:	fa17 f78b 	uxtah	r7, r7, fp
 800d8e8:	0c1b      	lsrs	r3, r3, #16
 800d8ea:	eba7 0808 	sub.w	r8, r7, r8
 800d8ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d8f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d8f6:	fa1f f888 	uxth.w	r8, r8
 800d8fa:	141f      	asrs	r7, r3, #16
 800d8fc:	454d      	cmp	r5, r9
 800d8fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d902:	f84a 3b04 	str.w	r3, [sl], #4
 800d906:	d8e7      	bhi.n	800d8d8 <__mdiff+0x7c>
 800d908:	1b2b      	subs	r3, r5, r4
 800d90a:	3b15      	subs	r3, #21
 800d90c:	f023 0303 	bic.w	r3, r3, #3
 800d910:	3304      	adds	r3, #4
 800d912:	3415      	adds	r4, #21
 800d914:	42a5      	cmp	r5, r4
 800d916:	bf38      	it	cc
 800d918:	2304      	movcc	r3, #4
 800d91a:	4419      	add	r1, r3
 800d91c:	4473      	add	r3, lr
 800d91e:	469e      	mov	lr, r3
 800d920:	460d      	mov	r5, r1
 800d922:	4565      	cmp	r5, ip
 800d924:	d30e      	bcc.n	800d944 <__mdiff+0xe8>
 800d926:	f10c 0203 	add.w	r2, ip, #3
 800d92a:	1a52      	subs	r2, r2, r1
 800d92c:	f022 0203 	bic.w	r2, r2, #3
 800d930:	3903      	subs	r1, #3
 800d932:	458c      	cmp	ip, r1
 800d934:	bf38      	it	cc
 800d936:	2200      	movcc	r2, #0
 800d938:	441a      	add	r2, r3
 800d93a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d93e:	b17b      	cbz	r3, 800d960 <__mdiff+0x104>
 800d940:	6106      	str	r6, [r0, #16]
 800d942:	e7a5      	b.n	800d890 <__mdiff+0x34>
 800d944:	f855 8b04 	ldr.w	r8, [r5], #4
 800d948:	fa17 f488 	uxtah	r4, r7, r8
 800d94c:	1422      	asrs	r2, r4, #16
 800d94e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d952:	b2a4      	uxth	r4, r4
 800d954:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d958:	f84e 4b04 	str.w	r4, [lr], #4
 800d95c:	1417      	asrs	r7, r2, #16
 800d95e:	e7e0      	b.n	800d922 <__mdiff+0xc6>
 800d960:	3e01      	subs	r6, #1
 800d962:	e7ea      	b.n	800d93a <__mdiff+0xde>
 800d964:	0800efb4 	.word	0x0800efb4
 800d968:	0800f044 	.word	0x0800f044

0800d96c <__ulp>:
 800d96c:	b082      	sub	sp, #8
 800d96e:	ed8d 0b00 	vstr	d0, [sp]
 800d972:	9b01      	ldr	r3, [sp, #4]
 800d974:	4912      	ldr	r1, [pc, #72]	; (800d9c0 <__ulp+0x54>)
 800d976:	4019      	ands	r1, r3
 800d978:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d97c:	2900      	cmp	r1, #0
 800d97e:	dd05      	ble.n	800d98c <__ulp+0x20>
 800d980:	2200      	movs	r2, #0
 800d982:	460b      	mov	r3, r1
 800d984:	ec43 2b10 	vmov	d0, r2, r3
 800d988:	b002      	add	sp, #8
 800d98a:	4770      	bx	lr
 800d98c:	4249      	negs	r1, r1
 800d98e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d992:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d996:	f04f 0200 	mov.w	r2, #0
 800d99a:	f04f 0300 	mov.w	r3, #0
 800d99e:	da04      	bge.n	800d9aa <__ulp+0x3e>
 800d9a0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d9a4:	fa41 f300 	asr.w	r3, r1, r0
 800d9a8:	e7ec      	b.n	800d984 <__ulp+0x18>
 800d9aa:	f1a0 0114 	sub.w	r1, r0, #20
 800d9ae:	291e      	cmp	r1, #30
 800d9b0:	bfda      	itte	le
 800d9b2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d9b6:	fa20 f101 	lsrle.w	r1, r0, r1
 800d9ba:	2101      	movgt	r1, #1
 800d9bc:	460a      	mov	r2, r1
 800d9be:	e7e1      	b.n	800d984 <__ulp+0x18>
 800d9c0:	7ff00000 	.word	0x7ff00000

0800d9c4 <__b2d>:
 800d9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9c6:	6905      	ldr	r5, [r0, #16]
 800d9c8:	f100 0714 	add.w	r7, r0, #20
 800d9cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d9d0:	1f2e      	subs	r6, r5, #4
 800d9d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	f7ff fd52 	bl	800d480 <__hi0bits>
 800d9dc:	f1c0 0320 	rsb	r3, r0, #32
 800d9e0:	280a      	cmp	r0, #10
 800d9e2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800da60 <__b2d+0x9c>
 800d9e6:	600b      	str	r3, [r1, #0]
 800d9e8:	dc14      	bgt.n	800da14 <__b2d+0x50>
 800d9ea:	f1c0 0e0b 	rsb	lr, r0, #11
 800d9ee:	fa24 f10e 	lsr.w	r1, r4, lr
 800d9f2:	42b7      	cmp	r7, r6
 800d9f4:	ea41 030c 	orr.w	r3, r1, ip
 800d9f8:	bf34      	ite	cc
 800d9fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d9fe:	2100      	movcs	r1, #0
 800da00:	3015      	adds	r0, #21
 800da02:	fa04 f000 	lsl.w	r0, r4, r0
 800da06:	fa21 f10e 	lsr.w	r1, r1, lr
 800da0a:	ea40 0201 	orr.w	r2, r0, r1
 800da0e:	ec43 2b10 	vmov	d0, r2, r3
 800da12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da14:	42b7      	cmp	r7, r6
 800da16:	bf3a      	itte	cc
 800da18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800da1c:	f1a5 0608 	subcc.w	r6, r5, #8
 800da20:	2100      	movcs	r1, #0
 800da22:	380b      	subs	r0, #11
 800da24:	d017      	beq.n	800da56 <__b2d+0x92>
 800da26:	f1c0 0c20 	rsb	ip, r0, #32
 800da2a:	fa04 f500 	lsl.w	r5, r4, r0
 800da2e:	42be      	cmp	r6, r7
 800da30:	fa21 f40c 	lsr.w	r4, r1, ip
 800da34:	ea45 0504 	orr.w	r5, r5, r4
 800da38:	bf8c      	ite	hi
 800da3a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800da3e:	2400      	movls	r4, #0
 800da40:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800da44:	fa01 f000 	lsl.w	r0, r1, r0
 800da48:	fa24 f40c 	lsr.w	r4, r4, ip
 800da4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800da50:	ea40 0204 	orr.w	r2, r0, r4
 800da54:	e7db      	b.n	800da0e <__b2d+0x4a>
 800da56:	ea44 030c 	orr.w	r3, r4, ip
 800da5a:	460a      	mov	r2, r1
 800da5c:	e7d7      	b.n	800da0e <__b2d+0x4a>
 800da5e:	bf00      	nop
 800da60:	3ff00000 	.word	0x3ff00000

0800da64 <__d2b>:
 800da64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da68:	4689      	mov	r9, r1
 800da6a:	2101      	movs	r1, #1
 800da6c:	ec57 6b10 	vmov	r6, r7, d0
 800da70:	4690      	mov	r8, r2
 800da72:	f7ff fc0f 	bl	800d294 <_Balloc>
 800da76:	4604      	mov	r4, r0
 800da78:	b930      	cbnz	r0, 800da88 <__d2b+0x24>
 800da7a:	4602      	mov	r2, r0
 800da7c:	4b25      	ldr	r3, [pc, #148]	; (800db14 <__d2b+0xb0>)
 800da7e:	4826      	ldr	r0, [pc, #152]	; (800db18 <__d2b+0xb4>)
 800da80:	f240 310a 	movw	r1, #778	; 0x30a
 800da84:	f000 fb10 	bl	800e0a8 <__assert_func>
 800da88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800da8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da90:	bb35      	cbnz	r5, 800dae0 <__d2b+0x7c>
 800da92:	2e00      	cmp	r6, #0
 800da94:	9301      	str	r3, [sp, #4]
 800da96:	d028      	beq.n	800daea <__d2b+0x86>
 800da98:	4668      	mov	r0, sp
 800da9a:	9600      	str	r6, [sp, #0]
 800da9c:	f7ff fd10 	bl	800d4c0 <__lo0bits>
 800daa0:	9900      	ldr	r1, [sp, #0]
 800daa2:	b300      	cbz	r0, 800dae6 <__d2b+0x82>
 800daa4:	9a01      	ldr	r2, [sp, #4]
 800daa6:	f1c0 0320 	rsb	r3, r0, #32
 800daaa:	fa02 f303 	lsl.w	r3, r2, r3
 800daae:	430b      	orrs	r3, r1
 800dab0:	40c2      	lsrs	r2, r0
 800dab2:	6163      	str	r3, [r4, #20]
 800dab4:	9201      	str	r2, [sp, #4]
 800dab6:	9b01      	ldr	r3, [sp, #4]
 800dab8:	61a3      	str	r3, [r4, #24]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	bf14      	ite	ne
 800dabe:	2202      	movne	r2, #2
 800dac0:	2201      	moveq	r2, #1
 800dac2:	6122      	str	r2, [r4, #16]
 800dac4:	b1d5      	cbz	r5, 800dafc <__d2b+0x98>
 800dac6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800daca:	4405      	add	r5, r0
 800dacc:	f8c9 5000 	str.w	r5, [r9]
 800dad0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dad4:	f8c8 0000 	str.w	r0, [r8]
 800dad8:	4620      	mov	r0, r4
 800dada:	b003      	add	sp, #12
 800dadc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dae4:	e7d5      	b.n	800da92 <__d2b+0x2e>
 800dae6:	6161      	str	r1, [r4, #20]
 800dae8:	e7e5      	b.n	800dab6 <__d2b+0x52>
 800daea:	a801      	add	r0, sp, #4
 800daec:	f7ff fce8 	bl	800d4c0 <__lo0bits>
 800daf0:	9b01      	ldr	r3, [sp, #4]
 800daf2:	6163      	str	r3, [r4, #20]
 800daf4:	2201      	movs	r2, #1
 800daf6:	6122      	str	r2, [r4, #16]
 800daf8:	3020      	adds	r0, #32
 800dafa:	e7e3      	b.n	800dac4 <__d2b+0x60>
 800dafc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db04:	f8c9 0000 	str.w	r0, [r9]
 800db08:	6918      	ldr	r0, [r3, #16]
 800db0a:	f7ff fcb9 	bl	800d480 <__hi0bits>
 800db0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db12:	e7df      	b.n	800dad4 <__d2b+0x70>
 800db14:	0800efb4 	.word	0x0800efb4
 800db18:	0800f044 	.word	0x0800f044

0800db1c <__ratio>:
 800db1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db20:	4688      	mov	r8, r1
 800db22:	4669      	mov	r1, sp
 800db24:	4681      	mov	r9, r0
 800db26:	f7ff ff4d 	bl	800d9c4 <__b2d>
 800db2a:	a901      	add	r1, sp, #4
 800db2c:	4640      	mov	r0, r8
 800db2e:	ec55 4b10 	vmov	r4, r5, d0
 800db32:	f7ff ff47 	bl	800d9c4 <__b2d>
 800db36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800db3e:	eba3 0c02 	sub.w	ip, r3, r2
 800db42:	e9dd 3200 	ldrd	r3, r2, [sp]
 800db46:	1a9b      	subs	r3, r3, r2
 800db48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800db4c:	ec51 0b10 	vmov	r0, r1, d0
 800db50:	2b00      	cmp	r3, #0
 800db52:	bfd6      	itet	le
 800db54:	460a      	movle	r2, r1
 800db56:	462a      	movgt	r2, r5
 800db58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800db5c:	468b      	mov	fp, r1
 800db5e:	462f      	mov	r7, r5
 800db60:	bfd4      	ite	le
 800db62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800db66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800db6a:	4620      	mov	r0, r4
 800db6c:	ee10 2a10 	vmov	r2, s0
 800db70:	465b      	mov	r3, fp
 800db72:	4639      	mov	r1, r7
 800db74:	f7f2 fe6a 	bl	800084c <__aeabi_ddiv>
 800db78:	ec41 0b10 	vmov	d0, r0, r1
 800db7c:	b003      	add	sp, #12
 800db7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db82 <__copybits>:
 800db82:	3901      	subs	r1, #1
 800db84:	b570      	push	{r4, r5, r6, lr}
 800db86:	1149      	asrs	r1, r1, #5
 800db88:	6914      	ldr	r4, [r2, #16]
 800db8a:	3101      	adds	r1, #1
 800db8c:	f102 0314 	add.w	r3, r2, #20
 800db90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800db94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800db98:	1f05      	subs	r5, r0, #4
 800db9a:	42a3      	cmp	r3, r4
 800db9c:	d30c      	bcc.n	800dbb8 <__copybits+0x36>
 800db9e:	1aa3      	subs	r3, r4, r2
 800dba0:	3b11      	subs	r3, #17
 800dba2:	f023 0303 	bic.w	r3, r3, #3
 800dba6:	3211      	adds	r2, #17
 800dba8:	42a2      	cmp	r2, r4
 800dbaa:	bf88      	it	hi
 800dbac:	2300      	movhi	r3, #0
 800dbae:	4418      	add	r0, r3
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	4288      	cmp	r0, r1
 800dbb4:	d305      	bcc.n	800dbc2 <__copybits+0x40>
 800dbb6:	bd70      	pop	{r4, r5, r6, pc}
 800dbb8:	f853 6b04 	ldr.w	r6, [r3], #4
 800dbbc:	f845 6f04 	str.w	r6, [r5, #4]!
 800dbc0:	e7eb      	b.n	800db9a <__copybits+0x18>
 800dbc2:	f840 3b04 	str.w	r3, [r0], #4
 800dbc6:	e7f4      	b.n	800dbb2 <__copybits+0x30>

0800dbc8 <__any_on>:
 800dbc8:	f100 0214 	add.w	r2, r0, #20
 800dbcc:	6900      	ldr	r0, [r0, #16]
 800dbce:	114b      	asrs	r3, r1, #5
 800dbd0:	4298      	cmp	r0, r3
 800dbd2:	b510      	push	{r4, lr}
 800dbd4:	db11      	blt.n	800dbfa <__any_on+0x32>
 800dbd6:	dd0a      	ble.n	800dbee <__any_on+0x26>
 800dbd8:	f011 011f 	ands.w	r1, r1, #31
 800dbdc:	d007      	beq.n	800dbee <__any_on+0x26>
 800dbde:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dbe2:	fa24 f001 	lsr.w	r0, r4, r1
 800dbe6:	fa00 f101 	lsl.w	r1, r0, r1
 800dbea:	428c      	cmp	r4, r1
 800dbec:	d10b      	bne.n	800dc06 <__any_on+0x3e>
 800dbee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d803      	bhi.n	800dbfe <__any_on+0x36>
 800dbf6:	2000      	movs	r0, #0
 800dbf8:	bd10      	pop	{r4, pc}
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	e7f7      	b.n	800dbee <__any_on+0x26>
 800dbfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc02:	2900      	cmp	r1, #0
 800dc04:	d0f5      	beq.n	800dbf2 <__any_on+0x2a>
 800dc06:	2001      	movs	r0, #1
 800dc08:	e7f6      	b.n	800dbf8 <__any_on+0x30>

0800dc0a <_calloc_r>:
 800dc0a:	b513      	push	{r0, r1, r4, lr}
 800dc0c:	434a      	muls	r2, r1
 800dc0e:	4611      	mov	r1, r2
 800dc10:	9201      	str	r2, [sp, #4]
 800dc12:	f000 f859 	bl	800dcc8 <_malloc_r>
 800dc16:	4604      	mov	r4, r0
 800dc18:	b118      	cbz	r0, 800dc22 <_calloc_r+0x18>
 800dc1a:	9a01      	ldr	r2, [sp, #4]
 800dc1c:	2100      	movs	r1, #0
 800dc1e:	f7fc fbd5 	bl	800a3cc <memset>
 800dc22:	4620      	mov	r0, r4
 800dc24:	b002      	add	sp, #8
 800dc26:	bd10      	pop	{r4, pc}

0800dc28 <_free_r>:
 800dc28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc2a:	2900      	cmp	r1, #0
 800dc2c:	d048      	beq.n	800dcc0 <_free_r+0x98>
 800dc2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc32:	9001      	str	r0, [sp, #4]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	f1a1 0404 	sub.w	r4, r1, #4
 800dc3a:	bfb8      	it	lt
 800dc3c:	18e4      	addlt	r4, r4, r3
 800dc3e:	f000 fa7d 	bl	800e13c <__malloc_lock>
 800dc42:	4a20      	ldr	r2, [pc, #128]	; (800dcc4 <_free_r+0x9c>)
 800dc44:	9801      	ldr	r0, [sp, #4]
 800dc46:	6813      	ldr	r3, [r2, #0]
 800dc48:	4615      	mov	r5, r2
 800dc4a:	b933      	cbnz	r3, 800dc5a <_free_r+0x32>
 800dc4c:	6063      	str	r3, [r4, #4]
 800dc4e:	6014      	str	r4, [r2, #0]
 800dc50:	b003      	add	sp, #12
 800dc52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc56:	f000 ba77 	b.w	800e148 <__malloc_unlock>
 800dc5a:	42a3      	cmp	r3, r4
 800dc5c:	d90b      	bls.n	800dc76 <_free_r+0x4e>
 800dc5e:	6821      	ldr	r1, [r4, #0]
 800dc60:	1862      	adds	r2, r4, r1
 800dc62:	4293      	cmp	r3, r2
 800dc64:	bf04      	itt	eq
 800dc66:	681a      	ldreq	r2, [r3, #0]
 800dc68:	685b      	ldreq	r3, [r3, #4]
 800dc6a:	6063      	str	r3, [r4, #4]
 800dc6c:	bf04      	itt	eq
 800dc6e:	1852      	addeq	r2, r2, r1
 800dc70:	6022      	streq	r2, [r4, #0]
 800dc72:	602c      	str	r4, [r5, #0]
 800dc74:	e7ec      	b.n	800dc50 <_free_r+0x28>
 800dc76:	461a      	mov	r2, r3
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	b10b      	cbz	r3, 800dc80 <_free_r+0x58>
 800dc7c:	42a3      	cmp	r3, r4
 800dc7e:	d9fa      	bls.n	800dc76 <_free_r+0x4e>
 800dc80:	6811      	ldr	r1, [r2, #0]
 800dc82:	1855      	adds	r5, r2, r1
 800dc84:	42a5      	cmp	r5, r4
 800dc86:	d10b      	bne.n	800dca0 <_free_r+0x78>
 800dc88:	6824      	ldr	r4, [r4, #0]
 800dc8a:	4421      	add	r1, r4
 800dc8c:	1854      	adds	r4, r2, r1
 800dc8e:	42a3      	cmp	r3, r4
 800dc90:	6011      	str	r1, [r2, #0]
 800dc92:	d1dd      	bne.n	800dc50 <_free_r+0x28>
 800dc94:	681c      	ldr	r4, [r3, #0]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	6053      	str	r3, [r2, #4]
 800dc9a:	4421      	add	r1, r4
 800dc9c:	6011      	str	r1, [r2, #0]
 800dc9e:	e7d7      	b.n	800dc50 <_free_r+0x28>
 800dca0:	d902      	bls.n	800dca8 <_free_r+0x80>
 800dca2:	230c      	movs	r3, #12
 800dca4:	6003      	str	r3, [r0, #0]
 800dca6:	e7d3      	b.n	800dc50 <_free_r+0x28>
 800dca8:	6825      	ldr	r5, [r4, #0]
 800dcaa:	1961      	adds	r1, r4, r5
 800dcac:	428b      	cmp	r3, r1
 800dcae:	bf04      	itt	eq
 800dcb0:	6819      	ldreq	r1, [r3, #0]
 800dcb2:	685b      	ldreq	r3, [r3, #4]
 800dcb4:	6063      	str	r3, [r4, #4]
 800dcb6:	bf04      	itt	eq
 800dcb8:	1949      	addeq	r1, r1, r5
 800dcba:	6021      	streq	r1, [r4, #0]
 800dcbc:	6054      	str	r4, [r2, #4]
 800dcbe:	e7c7      	b.n	800dc50 <_free_r+0x28>
 800dcc0:	b003      	add	sp, #12
 800dcc2:	bd30      	pop	{r4, r5, pc}
 800dcc4:	20001cc8 	.word	0x20001cc8

0800dcc8 <_malloc_r>:
 800dcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcca:	1ccd      	adds	r5, r1, #3
 800dccc:	f025 0503 	bic.w	r5, r5, #3
 800dcd0:	3508      	adds	r5, #8
 800dcd2:	2d0c      	cmp	r5, #12
 800dcd4:	bf38      	it	cc
 800dcd6:	250c      	movcc	r5, #12
 800dcd8:	2d00      	cmp	r5, #0
 800dcda:	4606      	mov	r6, r0
 800dcdc:	db01      	blt.n	800dce2 <_malloc_r+0x1a>
 800dcde:	42a9      	cmp	r1, r5
 800dce0:	d903      	bls.n	800dcea <_malloc_r+0x22>
 800dce2:	230c      	movs	r3, #12
 800dce4:	6033      	str	r3, [r6, #0]
 800dce6:	2000      	movs	r0, #0
 800dce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcea:	f000 fa27 	bl	800e13c <__malloc_lock>
 800dcee:	4921      	ldr	r1, [pc, #132]	; (800dd74 <_malloc_r+0xac>)
 800dcf0:	680a      	ldr	r2, [r1, #0]
 800dcf2:	4614      	mov	r4, r2
 800dcf4:	b99c      	cbnz	r4, 800dd1e <_malloc_r+0x56>
 800dcf6:	4f20      	ldr	r7, [pc, #128]	; (800dd78 <_malloc_r+0xb0>)
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	b923      	cbnz	r3, 800dd06 <_malloc_r+0x3e>
 800dcfc:	4621      	mov	r1, r4
 800dcfe:	4630      	mov	r0, r6
 800dd00:	f000 f9a2 	bl	800e048 <_sbrk_r>
 800dd04:	6038      	str	r0, [r7, #0]
 800dd06:	4629      	mov	r1, r5
 800dd08:	4630      	mov	r0, r6
 800dd0a:	f000 f99d 	bl	800e048 <_sbrk_r>
 800dd0e:	1c43      	adds	r3, r0, #1
 800dd10:	d123      	bne.n	800dd5a <_malloc_r+0x92>
 800dd12:	230c      	movs	r3, #12
 800dd14:	6033      	str	r3, [r6, #0]
 800dd16:	4630      	mov	r0, r6
 800dd18:	f000 fa16 	bl	800e148 <__malloc_unlock>
 800dd1c:	e7e3      	b.n	800dce6 <_malloc_r+0x1e>
 800dd1e:	6823      	ldr	r3, [r4, #0]
 800dd20:	1b5b      	subs	r3, r3, r5
 800dd22:	d417      	bmi.n	800dd54 <_malloc_r+0x8c>
 800dd24:	2b0b      	cmp	r3, #11
 800dd26:	d903      	bls.n	800dd30 <_malloc_r+0x68>
 800dd28:	6023      	str	r3, [r4, #0]
 800dd2a:	441c      	add	r4, r3
 800dd2c:	6025      	str	r5, [r4, #0]
 800dd2e:	e004      	b.n	800dd3a <_malloc_r+0x72>
 800dd30:	6863      	ldr	r3, [r4, #4]
 800dd32:	42a2      	cmp	r2, r4
 800dd34:	bf0c      	ite	eq
 800dd36:	600b      	streq	r3, [r1, #0]
 800dd38:	6053      	strne	r3, [r2, #4]
 800dd3a:	4630      	mov	r0, r6
 800dd3c:	f000 fa04 	bl	800e148 <__malloc_unlock>
 800dd40:	f104 000b 	add.w	r0, r4, #11
 800dd44:	1d23      	adds	r3, r4, #4
 800dd46:	f020 0007 	bic.w	r0, r0, #7
 800dd4a:	1ac2      	subs	r2, r0, r3
 800dd4c:	d0cc      	beq.n	800dce8 <_malloc_r+0x20>
 800dd4e:	1a1b      	subs	r3, r3, r0
 800dd50:	50a3      	str	r3, [r4, r2]
 800dd52:	e7c9      	b.n	800dce8 <_malloc_r+0x20>
 800dd54:	4622      	mov	r2, r4
 800dd56:	6864      	ldr	r4, [r4, #4]
 800dd58:	e7cc      	b.n	800dcf4 <_malloc_r+0x2c>
 800dd5a:	1cc4      	adds	r4, r0, #3
 800dd5c:	f024 0403 	bic.w	r4, r4, #3
 800dd60:	42a0      	cmp	r0, r4
 800dd62:	d0e3      	beq.n	800dd2c <_malloc_r+0x64>
 800dd64:	1a21      	subs	r1, r4, r0
 800dd66:	4630      	mov	r0, r6
 800dd68:	f000 f96e 	bl	800e048 <_sbrk_r>
 800dd6c:	3001      	adds	r0, #1
 800dd6e:	d1dd      	bne.n	800dd2c <_malloc_r+0x64>
 800dd70:	e7cf      	b.n	800dd12 <_malloc_r+0x4a>
 800dd72:	bf00      	nop
 800dd74:	20001cc8 	.word	0x20001cc8
 800dd78:	20001ccc 	.word	0x20001ccc

0800dd7c <__ssputs_r>:
 800dd7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd80:	688e      	ldr	r6, [r1, #8]
 800dd82:	429e      	cmp	r6, r3
 800dd84:	4682      	mov	sl, r0
 800dd86:	460c      	mov	r4, r1
 800dd88:	4690      	mov	r8, r2
 800dd8a:	461f      	mov	r7, r3
 800dd8c:	d838      	bhi.n	800de00 <__ssputs_r+0x84>
 800dd8e:	898a      	ldrh	r2, [r1, #12]
 800dd90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd94:	d032      	beq.n	800ddfc <__ssputs_r+0x80>
 800dd96:	6825      	ldr	r5, [r4, #0]
 800dd98:	6909      	ldr	r1, [r1, #16]
 800dd9a:	eba5 0901 	sub.w	r9, r5, r1
 800dd9e:	6965      	ldr	r5, [r4, #20]
 800dda0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dda4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dda8:	3301      	adds	r3, #1
 800ddaa:	444b      	add	r3, r9
 800ddac:	106d      	asrs	r5, r5, #1
 800ddae:	429d      	cmp	r5, r3
 800ddb0:	bf38      	it	cc
 800ddb2:	461d      	movcc	r5, r3
 800ddb4:	0553      	lsls	r3, r2, #21
 800ddb6:	d531      	bpl.n	800de1c <__ssputs_r+0xa0>
 800ddb8:	4629      	mov	r1, r5
 800ddba:	f7ff ff85 	bl	800dcc8 <_malloc_r>
 800ddbe:	4606      	mov	r6, r0
 800ddc0:	b950      	cbnz	r0, 800ddd8 <__ssputs_r+0x5c>
 800ddc2:	230c      	movs	r3, #12
 800ddc4:	f8ca 3000 	str.w	r3, [sl]
 800ddc8:	89a3      	ldrh	r3, [r4, #12]
 800ddca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddce:	81a3      	strh	r3, [r4, #12]
 800ddd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddd8:	6921      	ldr	r1, [r4, #16]
 800ddda:	464a      	mov	r2, r9
 800dddc:	f7fc fae8 	bl	800a3b0 <memcpy>
 800dde0:	89a3      	ldrh	r3, [r4, #12]
 800dde2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dde6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddea:	81a3      	strh	r3, [r4, #12]
 800ddec:	6126      	str	r6, [r4, #16]
 800ddee:	6165      	str	r5, [r4, #20]
 800ddf0:	444e      	add	r6, r9
 800ddf2:	eba5 0509 	sub.w	r5, r5, r9
 800ddf6:	6026      	str	r6, [r4, #0]
 800ddf8:	60a5      	str	r5, [r4, #8]
 800ddfa:	463e      	mov	r6, r7
 800ddfc:	42be      	cmp	r6, r7
 800ddfe:	d900      	bls.n	800de02 <__ssputs_r+0x86>
 800de00:	463e      	mov	r6, r7
 800de02:	4632      	mov	r2, r6
 800de04:	6820      	ldr	r0, [r4, #0]
 800de06:	4641      	mov	r1, r8
 800de08:	f000 f97e 	bl	800e108 <memmove>
 800de0c:	68a3      	ldr	r3, [r4, #8]
 800de0e:	6822      	ldr	r2, [r4, #0]
 800de10:	1b9b      	subs	r3, r3, r6
 800de12:	4432      	add	r2, r6
 800de14:	60a3      	str	r3, [r4, #8]
 800de16:	6022      	str	r2, [r4, #0]
 800de18:	2000      	movs	r0, #0
 800de1a:	e7db      	b.n	800ddd4 <__ssputs_r+0x58>
 800de1c:	462a      	mov	r2, r5
 800de1e:	f000 f999 	bl	800e154 <_realloc_r>
 800de22:	4606      	mov	r6, r0
 800de24:	2800      	cmp	r0, #0
 800de26:	d1e1      	bne.n	800ddec <__ssputs_r+0x70>
 800de28:	6921      	ldr	r1, [r4, #16]
 800de2a:	4650      	mov	r0, sl
 800de2c:	f7ff fefc 	bl	800dc28 <_free_r>
 800de30:	e7c7      	b.n	800ddc2 <__ssputs_r+0x46>
	...

0800de34 <_svfiprintf_r>:
 800de34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de38:	4698      	mov	r8, r3
 800de3a:	898b      	ldrh	r3, [r1, #12]
 800de3c:	061b      	lsls	r3, r3, #24
 800de3e:	b09d      	sub	sp, #116	; 0x74
 800de40:	4607      	mov	r7, r0
 800de42:	460d      	mov	r5, r1
 800de44:	4614      	mov	r4, r2
 800de46:	d50e      	bpl.n	800de66 <_svfiprintf_r+0x32>
 800de48:	690b      	ldr	r3, [r1, #16]
 800de4a:	b963      	cbnz	r3, 800de66 <_svfiprintf_r+0x32>
 800de4c:	2140      	movs	r1, #64	; 0x40
 800de4e:	f7ff ff3b 	bl	800dcc8 <_malloc_r>
 800de52:	6028      	str	r0, [r5, #0]
 800de54:	6128      	str	r0, [r5, #16]
 800de56:	b920      	cbnz	r0, 800de62 <_svfiprintf_r+0x2e>
 800de58:	230c      	movs	r3, #12
 800de5a:	603b      	str	r3, [r7, #0]
 800de5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de60:	e0d1      	b.n	800e006 <_svfiprintf_r+0x1d2>
 800de62:	2340      	movs	r3, #64	; 0x40
 800de64:	616b      	str	r3, [r5, #20]
 800de66:	2300      	movs	r3, #0
 800de68:	9309      	str	r3, [sp, #36]	; 0x24
 800de6a:	2320      	movs	r3, #32
 800de6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de70:	f8cd 800c 	str.w	r8, [sp, #12]
 800de74:	2330      	movs	r3, #48	; 0x30
 800de76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e020 <_svfiprintf_r+0x1ec>
 800de7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de7e:	f04f 0901 	mov.w	r9, #1
 800de82:	4623      	mov	r3, r4
 800de84:	469a      	mov	sl, r3
 800de86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de8a:	b10a      	cbz	r2, 800de90 <_svfiprintf_r+0x5c>
 800de8c:	2a25      	cmp	r2, #37	; 0x25
 800de8e:	d1f9      	bne.n	800de84 <_svfiprintf_r+0x50>
 800de90:	ebba 0b04 	subs.w	fp, sl, r4
 800de94:	d00b      	beq.n	800deae <_svfiprintf_r+0x7a>
 800de96:	465b      	mov	r3, fp
 800de98:	4622      	mov	r2, r4
 800de9a:	4629      	mov	r1, r5
 800de9c:	4638      	mov	r0, r7
 800de9e:	f7ff ff6d 	bl	800dd7c <__ssputs_r>
 800dea2:	3001      	adds	r0, #1
 800dea4:	f000 80aa 	beq.w	800dffc <_svfiprintf_r+0x1c8>
 800dea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800deaa:	445a      	add	r2, fp
 800deac:	9209      	str	r2, [sp, #36]	; 0x24
 800deae:	f89a 3000 	ldrb.w	r3, [sl]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	f000 80a2 	beq.w	800dffc <_svfiprintf_r+0x1c8>
 800deb8:	2300      	movs	r3, #0
 800deba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800debe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dec2:	f10a 0a01 	add.w	sl, sl, #1
 800dec6:	9304      	str	r3, [sp, #16]
 800dec8:	9307      	str	r3, [sp, #28]
 800deca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dece:	931a      	str	r3, [sp, #104]	; 0x68
 800ded0:	4654      	mov	r4, sl
 800ded2:	2205      	movs	r2, #5
 800ded4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ded8:	4851      	ldr	r0, [pc, #324]	; (800e020 <_svfiprintf_r+0x1ec>)
 800deda:	f7f2 f981 	bl	80001e0 <memchr>
 800dede:	9a04      	ldr	r2, [sp, #16]
 800dee0:	b9d8      	cbnz	r0, 800df1a <_svfiprintf_r+0xe6>
 800dee2:	06d0      	lsls	r0, r2, #27
 800dee4:	bf44      	itt	mi
 800dee6:	2320      	movmi	r3, #32
 800dee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800deec:	0711      	lsls	r1, r2, #28
 800deee:	bf44      	itt	mi
 800def0:	232b      	movmi	r3, #43	; 0x2b
 800def2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800def6:	f89a 3000 	ldrb.w	r3, [sl]
 800defa:	2b2a      	cmp	r3, #42	; 0x2a
 800defc:	d015      	beq.n	800df2a <_svfiprintf_r+0xf6>
 800defe:	9a07      	ldr	r2, [sp, #28]
 800df00:	4654      	mov	r4, sl
 800df02:	2000      	movs	r0, #0
 800df04:	f04f 0c0a 	mov.w	ip, #10
 800df08:	4621      	mov	r1, r4
 800df0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df0e:	3b30      	subs	r3, #48	; 0x30
 800df10:	2b09      	cmp	r3, #9
 800df12:	d94e      	bls.n	800dfb2 <_svfiprintf_r+0x17e>
 800df14:	b1b0      	cbz	r0, 800df44 <_svfiprintf_r+0x110>
 800df16:	9207      	str	r2, [sp, #28]
 800df18:	e014      	b.n	800df44 <_svfiprintf_r+0x110>
 800df1a:	eba0 0308 	sub.w	r3, r0, r8
 800df1e:	fa09 f303 	lsl.w	r3, r9, r3
 800df22:	4313      	orrs	r3, r2
 800df24:	9304      	str	r3, [sp, #16]
 800df26:	46a2      	mov	sl, r4
 800df28:	e7d2      	b.n	800ded0 <_svfiprintf_r+0x9c>
 800df2a:	9b03      	ldr	r3, [sp, #12]
 800df2c:	1d19      	adds	r1, r3, #4
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	9103      	str	r1, [sp, #12]
 800df32:	2b00      	cmp	r3, #0
 800df34:	bfbb      	ittet	lt
 800df36:	425b      	neglt	r3, r3
 800df38:	f042 0202 	orrlt.w	r2, r2, #2
 800df3c:	9307      	strge	r3, [sp, #28]
 800df3e:	9307      	strlt	r3, [sp, #28]
 800df40:	bfb8      	it	lt
 800df42:	9204      	strlt	r2, [sp, #16]
 800df44:	7823      	ldrb	r3, [r4, #0]
 800df46:	2b2e      	cmp	r3, #46	; 0x2e
 800df48:	d10c      	bne.n	800df64 <_svfiprintf_r+0x130>
 800df4a:	7863      	ldrb	r3, [r4, #1]
 800df4c:	2b2a      	cmp	r3, #42	; 0x2a
 800df4e:	d135      	bne.n	800dfbc <_svfiprintf_r+0x188>
 800df50:	9b03      	ldr	r3, [sp, #12]
 800df52:	1d1a      	adds	r2, r3, #4
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	9203      	str	r2, [sp, #12]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	bfb8      	it	lt
 800df5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800df60:	3402      	adds	r4, #2
 800df62:	9305      	str	r3, [sp, #20]
 800df64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e030 <_svfiprintf_r+0x1fc>
 800df68:	7821      	ldrb	r1, [r4, #0]
 800df6a:	2203      	movs	r2, #3
 800df6c:	4650      	mov	r0, sl
 800df6e:	f7f2 f937 	bl	80001e0 <memchr>
 800df72:	b140      	cbz	r0, 800df86 <_svfiprintf_r+0x152>
 800df74:	2340      	movs	r3, #64	; 0x40
 800df76:	eba0 000a 	sub.w	r0, r0, sl
 800df7a:	fa03 f000 	lsl.w	r0, r3, r0
 800df7e:	9b04      	ldr	r3, [sp, #16]
 800df80:	4303      	orrs	r3, r0
 800df82:	3401      	adds	r4, #1
 800df84:	9304      	str	r3, [sp, #16]
 800df86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df8a:	4826      	ldr	r0, [pc, #152]	; (800e024 <_svfiprintf_r+0x1f0>)
 800df8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df90:	2206      	movs	r2, #6
 800df92:	f7f2 f925 	bl	80001e0 <memchr>
 800df96:	2800      	cmp	r0, #0
 800df98:	d038      	beq.n	800e00c <_svfiprintf_r+0x1d8>
 800df9a:	4b23      	ldr	r3, [pc, #140]	; (800e028 <_svfiprintf_r+0x1f4>)
 800df9c:	bb1b      	cbnz	r3, 800dfe6 <_svfiprintf_r+0x1b2>
 800df9e:	9b03      	ldr	r3, [sp, #12]
 800dfa0:	3307      	adds	r3, #7
 800dfa2:	f023 0307 	bic.w	r3, r3, #7
 800dfa6:	3308      	adds	r3, #8
 800dfa8:	9303      	str	r3, [sp, #12]
 800dfaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfac:	4433      	add	r3, r6
 800dfae:	9309      	str	r3, [sp, #36]	; 0x24
 800dfb0:	e767      	b.n	800de82 <_svfiprintf_r+0x4e>
 800dfb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfb6:	460c      	mov	r4, r1
 800dfb8:	2001      	movs	r0, #1
 800dfba:	e7a5      	b.n	800df08 <_svfiprintf_r+0xd4>
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	3401      	adds	r4, #1
 800dfc0:	9305      	str	r3, [sp, #20]
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	f04f 0c0a 	mov.w	ip, #10
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfce:	3a30      	subs	r2, #48	; 0x30
 800dfd0:	2a09      	cmp	r2, #9
 800dfd2:	d903      	bls.n	800dfdc <_svfiprintf_r+0x1a8>
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d0c5      	beq.n	800df64 <_svfiprintf_r+0x130>
 800dfd8:	9105      	str	r1, [sp, #20]
 800dfda:	e7c3      	b.n	800df64 <_svfiprintf_r+0x130>
 800dfdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfe0:	4604      	mov	r4, r0
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e7f0      	b.n	800dfc8 <_svfiprintf_r+0x194>
 800dfe6:	ab03      	add	r3, sp, #12
 800dfe8:	9300      	str	r3, [sp, #0]
 800dfea:	462a      	mov	r2, r5
 800dfec:	4b0f      	ldr	r3, [pc, #60]	; (800e02c <_svfiprintf_r+0x1f8>)
 800dfee:	a904      	add	r1, sp, #16
 800dff0:	4638      	mov	r0, r7
 800dff2:	f7fc fa93 	bl	800a51c <_printf_float>
 800dff6:	1c42      	adds	r2, r0, #1
 800dff8:	4606      	mov	r6, r0
 800dffa:	d1d6      	bne.n	800dfaa <_svfiprintf_r+0x176>
 800dffc:	89ab      	ldrh	r3, [r5, #12]
 800dffe:	065b      	lsls	r3, r3, #25
 800e000:	f53f af2c 	bmi.w	800de5c <_svfiprintf_r+0x28>
 800e004:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e006:	b01d      	add	sp, #116	; 0x74
 800e008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e00c:	ab03      	add	r3, sp, #12
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	462a      	mov	r2, r5
 800e012:	4b06      	ldr	r3, [pc, #24]	; (800e02c <_svfiprintf_r+0x1f8>)
 800e014:	a904      	add	r1, sp, #16
 800e016:	4638      	mov	r0, r7
 800e018:	f7fc fd24 	bl	800aa64 <_printf_i>
 800e01c:	e7eb      	b.n	800dff6 <_svfiprintf_r+0x1c2>
 800e01e:	bf00      	nop
 800e020:	0800f1a4 	.word	0x0800f1a4
 800e024:	0800f1ae 	.word	0x0800f1ae
 800e028:	0800a51d 	.word	0x0800a51d
 800e02c:	0800dd7d 	.word	0x0800dd7d
 800e030:	0800f1aa 	.word	0x0800f1aa
 800e034:	00000000 	.word	0x00000000

0800e038 <nan>:
 800e038:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e040 <nan+0x8>
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop
 800e040:	00000000 	.word	0x00000000
 800e044:	7ff80000 	.word	0x7ff80000

0800e048 <_sbrk_r>:
 800e048:	b538      	push	{r3, r4, r5, lr}
 800e04a:	4d06      	ldr	r5, [pc, #24]	; (800e064 <_sbrk_r+0x1c>)
 800e04c:	2300      	movs	r3, #0
 800e04e:	4604      	mov	r4, r0
 800e050:	4608      	mov	r0, r1
 800e052:	602b      	str	r3, [r5, #0]
 800e054:	f7f4 f9a2 	bl	800239c <_sbrk>
 800e058:	1c43      	adds	r3, r0, #1
 800e05a:	d102      	bne.n	800e062 <_sbrk_r+0x1a>
 800e05c:	682b      	ldr	r3, [r5, #0]
 800e05e:	b103      	cbz	r3, 800e062 <_sbrk_r+0x1a>
 800e060:	6023      	str	r3, [r4, #0]
 800e062:	bd38      	pop	{r3, r4, r5, pc}
 800e064:	20001f68 	.word	0x20001f68

0800e068 <strncmp>:
 800e068:	b510      	push	{r4, lr}
 800e06a:	b16a      	cbz	r2, 800e088 <strncmp+0x20>
 800e06c:	3901      	subs	r1, #1
 800e06e:	1884      	adds	r4, r0, r2
 800e070:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e074:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e078:	4293      	cmp	r3, r2
 800e07a:	d103      	bne.n	800e084 <strncmp+0x1c>
 800e07c:	42a0      	cmp	r0, r4
 800e07e:	d001      	beq.n	800e084 <strncmp+0x1c>
 800e080:	2b00      	cmp	r3, #0
 800e082:	d1f5      	bne.n	800e070 <strncmp+0x8>
 800e084:	1a98      	subs	r0, r3, r2
 800e086:	bd10      	pop	{r4, pc}
 800e088:	4610      	mov	r0, r2
 800e08a:	e7fc      	b.n	800e086 <strncmp+0x1e>

0800e08c <__ascii_wctomb>:
 800e08c:	b149      	cbz	r1, 800e0a2 <__ascii_wctomb+0x16>
 800e08e:	2aff      	cmp	r2, #255	; 0xff
 800e090:	bf85      	ittet	hi
 800e092:	238a      	movhi	r3, #138	; 0x8a
 800e094:	6003      	strhi	r3, [r0, #0]
 800e096:	700a      	strbls	r2, [r1, #0]
 800e098:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e09c:	bf98      	it	ls
 800e09e:	2001      	movls	r0, #1
 800e0a0:	4770      	bx	lr
 800e0a2:	4608      	mov	r0, r1
 800e0a4:	4770      	bx	lr
	...

0800e0a8 <__assert_func>:
 800e0a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e0aa:	4614      	mov	r4, r2
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	4b09      	ldr	r3, [pc, #36]	; (800e0d4 <__assert_func+0x2c>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4605      	mov	r5, r0
 800e0b4:	68d8      	ldr	r0, [r3, #12]
 800e0b6:	b14c      	cbz	r4, 800e0cc <__assert_func+0x24>
 800e0b8:	4b07      	ldr	r3, [pc, #28]	; (800e0d8 <__assert_func+0x30>)
 800e0ba:	9100      	str	r1, [sp, #0]
 800e0bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e0c0:	4906      	ldr	r1, [pc, #24]	; (800e0dc <__assert_func+0x34>)
 800e0c2:	462b      	mov	r3, r5
 800e0c4:	f000 f80e 	bl	800e0e4 <fiprintf>
 800e0c8:	f000 fa84 	bl	800e5d4 <abort>
 800e0cc:	4b04      	ldr	r3, [pc, #16]	; (800e0e0 <__assert_func+0x38>)
 800e0ce:	461c      	mov	r4, r3
 800e0d0:	e7f3      	b.n	800e0ba <__assert_func+0x12>
 800e0d2:	bf00      	nop
 800e0d4:	2000001c 	.word	0x2000001c
 800e0d8:	0800f1b5 	.word	0x0800f1b5
 800e0dc:	0800f1c2 	.word	0x0800f1c2
 800e0e0:	0800f1f0 	.word	0x0800f1f0

0800e0e4 <fiprintf>:
 800e0e4:	b40e      	push	{r1, r2, r3}
 800e0e6:	b503      	push	{r0, r1, lr}
 800e0e8:	4601      	mov	r1, r0
 800e0ea:	ab03      	add	r3, sp, #12
 800e0ec:	4805      	ldr	r0, [pc, #20]	; (800e104 <fiprintf+0x20>)
 800e0ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0f2:	6800      	ldr	r0, [r0, #0]
 800e0f4:	9301      	str	r3, [sp, #4]
 800e0f6:	f000 f87d 	bl	800e1f4 <_vfiprintf_r>
 800e0fa:	b002      	add	sp, #8
 800e0fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e100:	b003      	add	sp, #12
 800e102:	4770      	bx	lr
 800e104:	2000001c 	.word	0x2000001c

0800e108 <memmove>:
 800e108:	4288      	cmp	r0, r1
 800e10a:	b510      	push	{r4, lr}
 800e10c:	eb01 0402 	add.w	r4, r1, r2
 800e110:	d902      	bls.n	800e118 <memmove+0x10>
 800e112:	4284      	cmp	r4, r0
 800e114:	4623      	mov	r3, r4
 800e116:	d807      	bhi.n	800e128 <memmove+0x20>
 800e118:	1e43      	subs	r3, r0, #1
 800e11a:	42a1      	cmp	r1, r4
 800e11c:	d008      	beq.n	800e130 <memmove+0x28>
 800e11e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e122:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e126:	e7f8      	b.n	800e11a <memmove+0x12>
 800e128:	4402      	add	r2, r0
 800e12a:	4601      	mov	r1, r0
 800e12c:	428a      	cmp	r2, r1
 800e12e:	d100      	bne.n	800e132 <memmove+0x2a>
 800e130:	bd10      	pop	{r4, pc}
 800e132:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e136:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e13a:	e7f7      	b.n	800e12c <memmove+0x24>

0800e13c <__malloc_lock>:
 800e13c:	4801      	ldr	r0, [pc, #4]	; (800e144 <__malloc_lock+0x8>)
 800e13e:	f000 bc09 	b.w	800e954 <__retarget_lock_acquire_recursive>
 800e142:	bf00      	nop
 800e144:	20001f70 	.word	0x20001f70

0800e148 <__malloc_unlock>:
 800e148:	4801      	ldr	r0, [pc, #4]	; (800e150 <__malloc_unlock+0x8>)
 800e14a:	f000 bc04 	b.w	800e956 <__retarget_lock_release_recursive>
 800e14e:	bf00      	nop
 800e150:	20001f70 	.word	0x20001f70

0800e154 <_realloc_r>:
 800e154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e156:	4607      	mov	r7, r0
 800e158:	4614      	mov	r4, r2
 800e15a:	460e      	mov	r6, r1
 800e15c:	b921      	cbnz	r1, 800e168 <_realloc_r+0x14>
 800e15e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e162:	4611      	mov	r1, r2
 800e164:	f7ff bdb0 	b.w	800dcc8 <_malloc_r>
 800e168:	b922      	cbnz	r2, 800e174 <_realloc_r+0x20>
 800e16a:	f7ff fd5d 	bl	800dc28 <_free_r>
 800e16e:	4625      	mov	r5, r4
 800e170:	4628      	mov	r0, r5
 800e172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e174:	f000 fc54 	bl	800ea20 <_malloc_usable_size_r>
 800e178:	42a0      	cmp	r0, r4
 800e17a:	d20f      	bcs.n	800e19c <_realloc_r+0x48>
 800e17c:	4621      	mov	r1, r4
 800e17e:	4638      	mov	r0, r7
 800e180:	f7ff fda2 	bl	800dcc8 <_malloc_r>
 800e184:	4605      	mov	r5, r0
 800e186:	2800      	cmp	r0, #0
 800e188:	d0f2      	beq.n	800e170 <_realloc_r+0x1c>
 800e18a:	4631      	mov	r1, r6
 800e18c:	4622      	mov	r2, r4
 800e18e:	f7fc f90f 	bl	800a3b0 <memcpy>
 800e192:	4631      	mov	r1, r6
 800e194:	4638      	mov	r0, r7
 800e196:	f7ff fd47 	bl	800dc28 <_free_r>
 800e19a:	e7e9      	b.n	800e170 <_realloc_r+0x1c>
 800e19c:	4635      	mov	r5, r6
 800e19e:	e7e7      	b.n	800e170 <_realloc_r+0x1c>

0800e1a0 <__sfputc_r>:
 800e1a0:	6893      	ldr	r3, [r2, #8]
 800e1a2:	3b01      	subs	r3, #1
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	b410      	push	{r4}
 800e1a8:	6093      	str	r3, [r2, #8]
 800e1aa:	da08      	bge.n	800e1be <__sfputc_r+0x1e>
 800e1ac:	6994      	ldr	r4, [r2, #24]
 800e1ae:	42a3      	cmp	r3, r4
 800e1b0:	db01      	blt.n	800e1b6 <__sfputc_r+0x16>
 800e1b2:	290a      	cmp	r1, #10
 800e1b4:	d103      	bne.n	800e1be <__sfputc_r+0x1e>
 800e1b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1ba:	f000 b94b 	b.w	800e454 <__swbuf_r>
 800e1be:	6813      	ldr	r3, [r2, #0]
 800e1c0:	1c58      	adds	r0, r3, #1
 800e1c2:	6010      	str	r0, [r2, #0]
 800e1c4:	7019      	strb	r1, [r3, #0]
 800e1c6:	4608      	mov	r0, r1
 800e1c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1cc:	4770      	bx	lr

0800e1ce <__sfputs_r>:
 800e1ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1d0:	4606      	mov	r6, r0
 800e1d2:	460f      	mov	r7, r1
 800e1d4:	4614      	mov	r4, r2
 800e1d6:	18d5      	adds	r5, r2, r3
 800e1d8:	42ac      	cmp	r4, r5
 800e1da:	d101      	bne.n	800e1e0 <__sfputs_r+0x12>
 800e1dc:	2000      	movs	r0, #0
 800e1de:	e007      	b.n	800e1f0 <__sfputs_r+0x22>
 800e1e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1e4:	463a      	mov	r2, r7
 800e1e6:	4630      	mov	r0, r6
 800e1e8:	f7ff ffda 	bl	800e1a0 <__sfputc_r>
 800e1ec:	1c43      	adds	r3, r0, #1
 800e1ee:	d1f3      	bne.n	800e1d8 <__sfputs_r+0xa>
 800e1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e1f4 <_vfiprintf_r>:
 800e1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f8:	460d      	mov	r5, r1
 800e1fa:	b09d      	sub	sp, #116	; 0x74
 800e1fc:	4614      	mov	r4, r2
 800e1fe:	4698      	mov	r8, r3
 800e200:	4606      	mov	r6, r0
 800e202:	b118      	cbz	r0, 800e20c <_vfiprintf_r+0x18>
 800e204:	6983      	ldr	r3, [r0, #24]
 800e206:	b90b      	cbnz	r3, 800e20c <_vfiprintf_r+0x18>
 800e208:	f000 fb06 	bl	800e818 <__sinit>
 800e20c:	4b89      	ldr	r3, [pc, #548]	; (800e434 <_vfiprintf_r+0x240>)
 800e20e:	429d      	cmp	r5, r3
 800e210:	d11b      	bne.n	800e24a <_vfiprintf_r+0x56>
 800e212:	6875      	ldr	r5, [r6, #4]
 800e214:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e216:	07d9      	lsls	r1, r3, #31
 800e218:	d405      	bmi.n	800e226 <_vfiprintf_r+0x32>
 800e21a:	89ab      	ldrh	r3, [r5, #12]
 800e21c:	059a      	lsls	r2, r3, #22
 800e21e:	d402      	bmi.n	800e226 <_vfiprintf_r+0x32>
 800e220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e222:	f000 fb97 	bl	800e954 <__retarget_lock_acquire_recursive>
 800e226:	89ab      	ldrh	r3, [r5, #12]
 800e228:	071b      	lsls	r3, r3, #28
 800e22a:	d501      	bpl.n	800e230 <_vfiprintf_r+0x3c>
 800e22c:	692b      	ldr	r3, [r5, #16]
 800e22e:	b9eb      	cbnz	r3, 800e26c <_vfiprintf_r+0x78>
 800e230:	4629      	mov	r1, r5
 800e232:	4630      	mov	r0, r6
 800e234:	f000 f960 	bl	800e4f8 <__swsetup_r>
 800e238:	b1c0      	cbz	r0, 800e26c <_vfiprintf_r+0x78>
 800e23a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e23c:	07dc      	lsls	r4, r3, #31
 800e23e:	d50e      	bpl.n	800e25e <_vfiprintf_r+0x6a>
 800e240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e244:	b01d      	add	sp, #116	; 0x74
 800e246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e24a:	4b7b      	ldr	r3, [pc, #492]	; (800e438 <_vfiprintf_r+0x244>)
 800e24c:	429d      	cmp	r5, r3
 800e24e:	d101      	bne.n	800e254 <_vfiprintf_r+0x60>
 800e250:	68b5      	ldr	r5, [r6, #8]
 800e252:	e7df      	b.n	800e214 <_vfiprintf_r+0x20>
 800e254:	4b79      	ldr	r3, [pc, #484]	; (800e43c <_vfiprintf_r+0x248>)
 800e256:	429d      	cmp	r5, r3
 800e258:	bf08      	it	eq
 800e25a:	68f5      	ldreq	r5, [r6, #12]
 800e25c:	e7da      	b.n	800e214 <_vfiprintf_r+0x20>
 800e25e:	89ab      	ldrh	r3, [r5, #12]
 800e260:	0598      	lsls	r0, r3, #22
 800e262:	d4ed      	bmi.n	800e240 <_vfiprintf_r+0x4c>
 800e264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e266:	f000 fb76 	bl	800e956 <__retarget_lock_release_recursive>
 800e26a:	e7e9      	b.n	800e240 <_vfiprintf_r+0x4c>
 800e26c:	2300      	movs	r3, #0
 800e26e:	9309      	str	r3, [sp, #36]	; 0x24
 800e270:	2320      	movs	r3, #32
 800e272:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e276:	f8cd 800c 	str.w	r8, [sp, #12]
 800e27a:	2330      	movs	r3, #48	; 0x30
 800e27c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e440 <_vfiprintf_r+0x24c>
 800e280:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e284:	f04f 0901 	mov.w	r9, #1
 800e288:	4623      	mov	r3, r4
 800e28a:	469a      	mov	sl, r3
 800e28c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e290:	b10a      	cbz	r2, 800e296 <_vfiprintf_r+0xa2>
 800e292:	2a25      	cmp	r2, #37	; 0x25
 800e294:	d1f9      	bne.n	800e28a <_vfiprintf_r+0x96>
 800e296:	ebba 0b04 	subs.w	fp, sl, r4
 800e29a:	d00b      	beq.n	800e2b4 <_vfiprintf_r+0xc0>
 800e29c:	465b      	mov	r3, fp
 800e29e:	4622      	mov	r2, r4
 800e2a0:	4629      	mov	r1, r5
 800e2a2:	4630      	mov	r0, r6
 800e2a4:	f7ff ff93 	bl	800e1ce <__sfputs_r>
 800e2a8:	3001      	adds	r0, #1
 800e2aa:	f000 80aa 	beq.w	800e402 <_vfiprintf_r+0x20e>
 800e2ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2b0:	445a      	add	r2, fp
 800e2b2:	9209      	str	r2, [sp, #36]	; 0x24
 800e2b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	f000 80a2 	beq.w	800e402 <_vfiprintf_r+0x20e>
 800e2be:	2300      	movs	r3, #0
 800e2c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2c8:	f10a 0a01 	add.w	sl, sl, #1
 800e2cc:	9304      	str	r3, [sp, #16]
 800e2ce:	9307      	str	r3, [sp, #28]
 800e2d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2d4:	931a      	str	r3, [sp, #104]	; 0x68
 800e2d6:	4654      	mov	r4, sl
 800e2d8:	2205      	movs	r2, #5
 800e2da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2de:	4858      	ldr	r0, [pc, #352]	; (800e440 <_vfiprintf_r+0x24c>)
 800e2e0:	f7f1 ff7e 	bl	80001e0 <memchr>
 800e2e4:	9a04      	ldr	r2, [sp, #16]
 800e2e6:	b9d8      	cbnz	r0, 800e320 <_vfiprintf_r+0x12c>
 800e2e8:	06d1      	lsls	r1, r2, #27
 800e2ea:	bf44      	itt	mi
 800e2ec:	2320      	movmi	r3, #32
 800e2ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2f2:	0713      	lsls	r3, r2, #28
 800e2f4:	bf44      	itt	mi
 800e2f6:	232b      	movmi	r3, #43	; 0x2b
 800e2f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2fc:	f89a 3000 	ldrb.w	r3, [sl]
 800e300:	2b2a      	cmp	r3, #42	; 0x2a
 800e302:	d015      	beq.n	800e330 <_vfiprintf_r+0x13c>
 800e304:	9a07      	ldr	r2, [sp, #28]
 800e306:	4654      	mov	r4, sl
 800e308:	2000      	movs	r0, #0
 800e30a:	f04f 0c0a 	mov.w	ip, #10
 800e30e:	4621      	mov	r1, r4
 800e310:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e314:	3b30      	subs	r3, #48	; 0x30
 800e316:	2b09      	cmp	r3, #9
 800e318:	d94e      	bls.n	800e3b8 <_vfiprintf_r+0x1c4>
 800e31a:	b1b0      	cbz	r0, 800e34a <_vfiprintf_r+0x156>
 800e31c:	9207      	str	r2, [sp, #28]
 800e31e:	e014      	b.n	800e34a <_vfiprintf_r+0x156>
 800e320:	eba0 0308 	sub.w	r3, r0, r8
 800e324:	fa09 f303 	lsl.w	r3, r9, r3
 800e328:	4313      	orrs	r3, r2
 800e32a:	9304      	str	r3, [sp, #16]
 800e32c:	46a2      	mov	sl, r4
 800e32e:	e7d2      	b.n	800e2d6 <_vfiprintf_r+0xe2>
 800e330:	9b03      	ldr	r3, [sp, #12]
 800e332:	1d19      	adds	r1, r3, #4
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	9103      	str	r1, [sp, #12]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	bfbb      	ittet	lt
 800e33c:	425b      	neglt	r3, r3
 800e33e:	f042 0202 	orrlt.w	r2, r2, #2
 800e342:	9307      	strge	r3, [sp, #28]
 800e344:	9307      	strlt	r3, [sp, #28]
 800e346:	bfb8      	it	lt
 800e348:	9204      	strlt	r2, [sp, #16]
 800e34a:	7823      	ldrb	r3, [r4, #0]
 800e34c:	2b2e      	cmp	r3, #46	; 0x2e
 800e34e:	d10c      	bne.n	800e36a <_vfiprintf_r+0x176>
 800e350:	7863      	ldrb	r3, [r4, #1]
 800e352:	2b2a      	cmp	r3, #42	; 0x2a
 800e354:	d135      	bne.n	800e3c2 <_vfiprintf_r+0x1ce>
 800e356:	9b03      	ldr	r3, [sp, #12]
 800e358:	1d1a      	adds	r2, r3, #4
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	9203      	str	r2, [sp, #12]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	bfb8      	it	lt
 800e362:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e366:	3402      	adds	r4, #2
 800e368:	9305      	str	r3, [sp, #20]
 800e36a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e450 <_vfiprintf_r+0x25c>
 800e36e:	7821      	ldrb	r1, [r4, #0]
 800e370:	2203      	movs	r2, #3
 800e372:	4650      	mov	r0, sl
 800e374:	f7f1 ff34 	bl	80001e0 <memchr>
 800e378:	b140      	cbz	r0, 800e38c <_vfiprintf_r+0x198>
 800e37a:	2340      	movs	r3, #64	; 0x40
 800e37c:	eba0 000a 	sub.w	r0, r0, sl
 800e380:	fa03 f000 	lsl.w	r0, r3, r0
 800e384:	9b04      	ldr	r3, [sp, #16]
 800e386:	4303      	orrs	r3, r0
 800e388:	3401      	adds	r4, #1
 800e38a:	9304      	str	r3, [sp, #16]
 800e38c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e390:	482c      	ldr	r0, [pc, #176]	; (800e444 <_vfiprintf_r+0x250>)
 800e392:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e396:	2206      	movs	r2, #6
 800e398:	f7f1 ff22 	bl	80001e0 <memchr>
 800e39c:	2800      	cmp	r0, #0
 800e39e:	d03f      	beq.n	800e420 <_vfiprintf_r+0x22c>
 800e3a0:	4b29      	ldr	r3, [pc, #164]	; (800e448 <_vfiprintf_r+0x254>)
 800e3a2:	bb1b      	cbnz	r3, 800e3ec <_vfiprintf_r+0x1f8>
 800e3a4:	9b03      	ldr	r3, [sp, #12]
 800e3a6:	3307      	adds	r3, #7
 800e3a8:	f023 0307 	bic.w	r3, r3, #7
 800e3ac:	3308      	adds	r3, #8
 800e3ae:	9303      	str	r3, [sp, #12]
 800e3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3b2:	443b      	add	r3, r7
 800e3b4:	9309      	str	r3, [sp, #36]	; 0x24
 800e3b6:	e767      	b.n	800e288 <_vfiprintf_r+0x94>
 800e3b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3bc:	460c      	mov	r4, r1
 800e3be:	2001      	movs	r0, #1
 800e3c0:	e7a5      	b.n	800e30e <_vfiprintf_r+0x11a>
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	3401      	adds	r4, #1
 800e3c6:	9305      	str	r3, [sp, #20]
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	f04f 0c0a 	mov.w	ip, #10
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3d4:	3a30      	subs	r2, #48	; 0x30
 800e3d6:	2a09      	cmp	r2, #9
 800e3d8:	d903      	bls.n	800e3e2 <_vfiprintf_r+0x1ee>
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d0c5      	beq.n	800e36a <_vfiprintf_r+0x176>
 800e3de:	9105      	str	r1, [sp, #20]
 800e3e0:	e7c3      	b.n	800e36a <_vfiprintf_r+0x176>
 800e3e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	e7f0      	b.n	800e3ce <_vfiprintf_r+0x1da>
 800e3ec:	ab03      	add	r3, sp, #12
 800e3ee:	9300      	str	r3, [sp, #0]
 800e3f0:	462a      	mov	r2, r5
 800e3f2:	4b16      	ldr	r3, [pc, #88]	; (800e44c <_vfiprintf_r+0x258>)
 800e3f4:	a904      	add	r1, sp, #16
 800e3f6:	4630      	mov	r0, r6
 800e3f8:	f7fc f890 	bl	800a51c <_printf_float>
 800e3fc:	4607      	mov	r7, r0
 800e3fe:	1c78      	adds	r0, r7, #1
 800e400:	d1d6      	bne.n	800e3b0 <_vfiprintf_r+0x1bc>
 800e402:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e404:	07d9      	lsls	r1, r3, #31
 800e406:	d405      	bmi.n	800e414 <_vfiprintf_r+0x220>
 800e408:	89ab      	ldrh	r3, [r5, #12]
 800e40a:	059a      	lsls	r2, r3, #22
 800e40c:	d402      	bmi.n	800e414 <_vfiprintf_r+0x220>
 800e40e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e410:	f000 faa1 	bl	800e956 <__retarget_lock_release_recursive>
 800e414:	89ab      	ldrh	r3, [r5, #12]
 800e416:	065b      	lsls	r3, r3, #25
 800e418:	f53f af12 	bmi.w	800e240 <_vfiprintf_r+0x4c>
 800e41c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e41e:	e711      	b.n	800e244 <_vfiprintf_r+0x50>
 800e420:	ab03      	add	r3, sp, #12
 800e422:	9300      	str	r3, [sp, #0]
 800e424:	462a      	mov	r2, r5
 800e426:	4b09      	ldr	r3, [pc, #36]	; (800e44c <_vfiprintf_r+0x258>)
 800e428:	a904      	add	r1, sp, #16
 800e42a:	4630      	mov	r0, r6
 800e42c:	f7fc fb1a 	bl	800aa64 <_printf_i>
 800e430:	e7e4      	b.n	800e3fc <_vfiprintf_r+0x208>
 800e432:	bf00      	nop
 800e434:	0800f214 	.word	0x0800f214
 800e438:	0800f234 	.word	0x0800f234
 800e43c:	0800f1f4 	.word	0x0800f1f4
 800e440:	0800f1a4 	.word	0x0800f1a4
 800e444:	0800f1ae 	.word	0x0800f1ae
 800e448:	0800a51d 	.word	0x0800a51d
 800e44c:	0800e1cf 	.word	0x0800e1cf
 800e450:	0800f1aa 	.word	0x0800f1aa

0800e454 <__swbuf_r>:
 800e454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e456:	460e      	mov	r6, r1
 800e458:	4614      	mov	r4, r2
 800e45a:	4605      	mov	r5, r0
 800e45c:	b118      	cbz	r0, 800e466 <__swbuf_r+0x12>
 800e45e:	6983      	ldr	r3, [r0, #24]
 800e460:	b90b      	cbnz	r3, 800e466 <__swbuf_r+0x12>
 800e462:	f000 f9d9 	bl	800e818 <__sinit>
 800e466:	4b21      	ldr	r3, [pc, #132]	; (800e4ec <__swbuf_r+0x98>)
 800e468:	429c      	cmp	r4, r3
 800e46a:	d12b      	bne.n	800e4c4 <__swbuf_r+0x70>
 800e46c:	686c      	ldr	r4, [r5, #4]
 800e46e:	69a3      	ldr	r3, [r4, #24]
 800e470:	60a3      	str	r3, [r4, #8]
 800e472:	89a3      	ldrh	r3, [r4, #12]
 800e474:	071a      	lsls	r2, r3, #28
 800e476:	d52f      	bpl.n	800e4d8 <__swbuf_r+0x84>
 800e478:	6923      	ldr	r3, [r4, #16]
 800e47a:	b36b      	cbz	r3, 800e4d8 <__swbuf_r+0x84>
 800e47c:	6923      	ldr	r3, [r4, #16]
 800e47e:	6820      	ldr	r0, [r4, #0]
 800e480:	1ac0      	subs	r0, r0, r3
 800e482:	6963      	ldr	r3, [r4, #20]
 800e484:	b2f6      	uxtb	r6, r6
 800e486:	4283      	cmp	r3, r0
 800e488:	4637      	mov	r7, r6
 800e48a:	dc04      	bgt.n	800e496 <__swbuf_r+0x42>
 800e48c:	4621      	mov	r1, r4
 800e48e:	4628      	mov	r0, r5
 800e490:	f000 f92e 	bl	800e6f0 <_fflush_r>
 800e494:	bb30      	cbnz	r0, 800e4e4 <__swbuf_r+0x90>
 800e496:	68a3      	ldr	r3, [r4, #8]
 800e498:	3b01      	subs	r3, #1
 800e49a:	60a3      	str	r3, [r4, #8]
 800e49c:	6823      	ldr	r3, [r4, #0]
 800e49e:	1c5a      	adds	r2, r3, #1
 800e4a0:	6022      	str	r2, [r4, #0]
 800e4a2:	701e      	strb	r6, [r3, #0]
 800e4a4:	6963      	ldr	r3, [r4, #20]
 800e4a6:	3001      	adds	r0, #1
 800e4a8:	4283      	cmp	r3, r0
 800e4aa:	d004      	beq.n	800e4b6 <__swbuf_r+0x62>
 800e4ac:	89a3      	ldrh	r3, [r4, #12]
 800e4ae:	07db      	lsls	r3, r3, #31
 800e4b0:	d506      	bpl.n	800e4c0 <__swbuf_r+0x6c>
 800e4b2:	2e0a      	cmp	r6, #10
 800e4b4:	d104      	bne.n	800e4c0 <__swbuf_r+0x6c>
 800e4b6:	4621      	mov	r1, r4
 800e4b8:	4628      	mov	r0, r5
 800e4ba:	f000 f919 	bl	800e6f0 <_fflush_r>
 800e4be:	b988      	cbnz	r0, 800e4e4 <__swbuf_r+0x90>
 800e4c0:	4638      	mov	r0, r7
 800e4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4c4:	4b0a      	ldr	r3, [pc, #40]	; (800e4f0 <__swbuf_r+0x9c>)
 800e4c6:	429c      	cmp	r4, r3
 800e4c8:	d101      	bne.n	800e4ce <__swbuf_r+0x7a>
 800e4ca:	68ac      	ldr	r4, [r5, #8]
 800e4cc:	e7cf      	b.n	800e46e <__swbuf_r+0x1a>
 800e4ce:	4b09      	ldr	r3, [pc, #36]	; (800e4f4 <__swbuf_r+0xa0>)
 800e4d0:	429c      	cmp	r4, r3
 800e4d2:	bf08      	it	eq
 800e4d4:	68ec      	ldreq	r4, [r5, #12]
 800e4d6:	e7ca      	b.n	800e46e <__swbuf_r+0x1a>
 800e4d8:	4621      	mov	r1, r4
 800e4da:	4628      	mov	r0, r5
 800e4dc:	f000 f80c 	bl	800e4f8 <__swsetup_r>
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	d0cb      	beq.n	800e47c <__swbuf_r+0x28>
 800e4e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e4e8:	e7ea      	b.n	800e4c0 <__swbuf_r+0x6c>
 800e4ea:	bf00      	nop
 800e4ec:	0800f214 	.word	0x0800f214
 800e4f0:	0800f234 	.word	0x0800f234
 800e4f4:	0800f1f4 	.word	0x0800f1f4

0800e4f8 <__swsetup_r>:
 800e4f8:	4b32      	ldr	r3, [pc, #200]	; (800e5c4 <__swsetup_r+0xcc>)
 800e4fa:	b570      	push	{r4, r5, r6, lr}
 800e4fc:	681d      	ldr	r5, [r3, #0]
 800e4fe:	4606      	mov	r6, r0
 800e500:	460c      	mov	r4, r1
 800e502:	b125      	cbz	r5, 800e50e <__swsetup_r+0x16>
 800e504:	69ab      	ldr	r3, [r5, #24]
 800e506:	b913      	cbnz	r3, 800e50e <__swsetup_r+0x16>
 800e508:	4628      	mov	r0, r5
 800e50a:	f000 f985 	bl	800e818 <__sinit>
 800e50e:	4b2e      	ldr	r3, [pc, #184]	; (800e5c8 <__swsetup_r+0xd0>)
 800e510:	429c      	cmp	r4, r3
 800e512:	d10f      	bne.n	800e534 <__swsetup_r+0x3c>
 800e514:	686c      	ldr	r4, [r5, #4]
 800e516:	89a3      	ldrh	r3, [r4, #12]
 800e518:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e51c:	0719      	lsls	r1, r3, #28
 800e51e:	d42c      	bmi.n	800e57a <__swsetup_r+0x82>
 800e520:	06dd      	lsls	r5, r3, #27
 800e522:	d411      	bmi.n	800e548 <__swsetup_r+0x50>
 800e524:	2309      	movs	r3, #9
 800e526:	6033      	str	r3, [r6, #0]
 800e528:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e52c:	81a3      	strh	r3, [r4, #12]
 800e52e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e532:	e03e      	b.n	800e5b2 <__swsetup_r+0xba>
 800e534:	4b25      	ldr	r3, [pc, #148]	; (800e5cc <__swsetup_r+0xd4>)
 800e536:	429c      	cmp	r4, r3
 800e538:	d101      	bne.n	800e53e <__swsetup_r+0x46>
 800e53a:	68ac      	ldr	r4, [r5, #8]
 800e53c:	e7eb      	b.n	800e516 <__swsetup_r+0x1e>
 800e53e:	4b24      	ldr	r3, [pc, #144]	; (800e5d0 <__swsetup_r+0xd8>)
 800e540:	429c      	cmp	r4, r3
 800e542:	bf08      	it	eq
 800e544:	68ec      	ldreq	r4, [r5, #12]
 800e546:	e7e6      	b.n	800e516 <__swsetup_r+0x1e>
 800e548:	0758      	lsls	r0, r3, #29
 800e54a:	d512      	bpl.n	800e572 <__swsetup_r+0x7a>
 800e54c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e54e:	b141      	cbz	r1, 800e562 <__swsetup_r+0x6a>
 800e550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e554:	4299      	cmp	r1, r3
 800e556:	d002      	beq.n	800e55e <__swsetup_r+0x66>
 800e558:	4630      	mov	r0, r6
 800e55a:	f7ff fb65 	bl	800dc28 <_free_r>
 800e55e:	2300      	movs	r3, #0
 800e560:	6363      	str	r3, [r4, #52]	; 0x34
 800e562:	89a3      	ldrh	r3, [r4, #12]
 800e564:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e568:	81a3      	strh	r3, [r4, #12]
 800e56a:	2300      	movs	r3, #0
 800e56c:	6063      	str	r3, [r4, #4]
 800e56e:	6923      	ldr	r3, [r4, #16]
 800e570:	6023      	str	r3, [r4, #0]
 800e572:	89a3      	ldrh	r3, [r4, #12]
 800e574:	f043 0308 	orr.w	r3, r3, #8
 800e578:	81a3      	strh	r3, [r4, #12]
 800e57a:	6923      	ldr	r3, [r4, #16]
 800e57c:	b94b      	cbnz	r3, 800e592 <__swsetup_r+0x9a>
 800e57e:	89a3      	ldrh	r3, [r4, #12]
 800e580:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e588:	d003      	beq.n	800e592 <__swsetup_r+0x9a>
 800e58a:	4621      	mov	r1, r4
 800e58c:	4630      	mov	r0, r6
 800e58e:	f000 fa07 	bl	800e9a0 <__smakebuf_r>
 800e592:	89a0      	ldrh	r0, [r4, #12]
 800e594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e598:	f010 0301 	ands.w	r3, r0, #1
 800e59c:	d00a      	beq.n	800e5b4 <__swsetup_r+0xbc>
 800e59e:	2300      	movs	r3, #0
 800e5a0:	60a3      	str	r3, [r4, #8]
 800e5a2:	6963      	ldr	r3, [r4, #20]
 800e5a4:	425b      	negs	r3, r3
 800e5a6:	61a3      	str	r3, [r4, #24]
 800e5a8:	6923      	ldr	r3, [r4, #16]
 800e5aa:	b943      	cbnz	r3, 800e5be <__swsetup_r+0xc6>
 800e5ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e5b0:	d1ba      	bne.n	800e528 <__swsetup_r+0x30>
 800e5b2:	bd70      	pop	{r4, r5, r6, pc}
 800e5b4:	0781      	lsls	r1, r0, #30
 800e5b6:	bf58      	it	pl
 800e5b8:	6963      	ldrpl	r3, [r4, #20]
 800e5ba:	60a3      	str	r3, [r4, #8]
 800e5bc:	e7f4      	b.n	800e5a8 <__swsetup_r+0xb0>
 800e5be:	2000      	movs	r0, #0
 800e5c0:	e7f7      	b.n	800e5b2 <__swsetup_r+0xba>
 800e5c2:	bf00      	nop
 800e5c4:	2000001c 	.word	0x2000001c
 800e5c8:	0800f214 	.word	0x0800f214
 800e5cc:	0800f234 	.word	0x0800f234
 800e5d0:	0800f1f4 	.word	0x0800f1f4

0800e5d4 <abort>:
 800e5d4:	b508      	push	{r3, lr}
 800e5d6:	2006      	movs	r0, #6
 800e5d8:	f000 fa52 	bl	800ea80 <raise>
 800e5dc:	2001      	movs	r0, #1
 800e5de:	f7f3 fe65 	bl	80022ac <_exit>
	...

0800e5e4 <__sflush_r>:
 800e5e4:	898a      	ldrh	r2, [r1, #12]
 800e5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ea:	4605      	mov	r5, r0
 800e5ec:	0710      	lsls	r0, r2, #28
 800e5ee:	460c      	mov	r4, r1
 800e5f0:	d458      	bmi.n	800e6a4 <__sflush_r+0xc0>
 800e5f2:	684b      	ldr	r3, [r1, #4]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	dc05      	bgt.n	800e604 <__sflush_r+0x20>
 800e5f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	dc02      	bgt.n	800e604 <__sflush_r+0x20>
 800e5fe:	2000      	movs	r0, #0
 800e600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e604:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e606:	2e00      	cmp	r6, #0
 800e608:	d0f9      	beq.n	800e5fe <__sflush_r+0x1a>
 800e60a:	2300      	movs	r3, #0
 800e60c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e610:	682f      	ldr	r7, [r5, #0]
 800e612:	602b      	str	r3, [r5, #0]
 800e614:	d032      	beq.n	800e67c <__sflush_r+0x98>
 800e616:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e618:	89a3      	ldrh	r3, [r4, #12]
 800e61a:	075a      	lsls	r2, r3, #29
 800e61c:	d505      	bpl.n	800e62a <__sflush_r+0x46>
 800e61e:	6863      	ldr	r3, [r4, #4]
 800e620:	1ac0      	subs	r0, r0, r3
 800e622:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e624:	b10b      	cbz	r3, 800e62a <__sflush_r+0x46>
 800e626:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e628:	1ac0      	subs	r0, r0, r3
 800e62a:	2300      	movs	r3, #0
 800e62c:	4602      	mov	r2, r0
 800e62e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e630:	6a21      	ldr	r1, [r4, #32]
 800e632:	4628      	mov	r0, r5
 800e634:	47b0      	blx	r6
 800e636:	1c43      	adds	r3, r0, #1
 800e638:	89a3      	ldrh	r3, [r4, #12]
 800e63a:	d106      	bne.n	800e64a <__sflush_r+0x66>
 800e63c:	6829      	ldr	r1, [r5, #0]
 800e63e:	291d      	cmp	r1, #29
 800e640:	d82c      	bhi.n	800e69c <__sflush_r+0xb8>
 800e642:	4a2a      	ldr	r2, [pc, #168]	; (800e6ec <__sflush_r+0x108>)
 800e644:	40ca      	lsrs	r2, r1
 800e646:	07d6      	lsls	r6, r2, #31
 800e648:	d528      	bpl.n	800e69c <__sflush_r+0xb8>
 800e64a:	2200      	movs	r2, #0
 800e64c:	6062      	str	r2, [r4, #4]
 800e64e:	04d9      	lsls	r1, r3, #19
 800e650:	6922      	ldr	r2, [r4, #16]
 800e652:	6022      	str	r2, [r4, #0]
 800e654:	d504      	bpl.n	800e660 <__sflush_r+0x7c>
 800e656:	1c42      	adds	r2, r0, #1
 800e658:	d101      	bne.n	800e65e <__sflush_r+0x7a>
 800e65a:	682b      	ldr	r3, [r5, #0]
 800e65c:	b903      	cbnz	r3, 800e660 <__sflush_r+0x7c>
 800e65e:	6560      	str	r0, [r4, #84]	; 0x54
 800e660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e662:	602f      	str	r7, [r5, #0]
 800e664:	2900      	cmp	r1, #0
 800e666:	d0ca      	beq.n	800e5fe <__sflush_r+0x1a>
 800e668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e66c:	4299      	cmp	r1, r3
 800e66e:	d002      	beq.n	800e676 <__sflush_r+0x92>
 800e670:	4628      	mov	r0, r5
 800e672:	f7ff fad9 	bl	800dc28 <_free_r>
 800e676:	2000      	movs	r0, #0
 800e678:	6360      	str	r0, [r4, #52]	; 0x34
 800e67a:	e7c1      	b.n	800e600 <__sflush_r+0x1c>
 800e67c:	6a21      	ldr	r1, [r4, #32]
 800e67e:	2301      	movs	r3, #1
 800e680:	4628      	mov	r0, r5
 800e682:	47b0      	blx	r6
 800e684:	1c41      	adds	r1, r0, #1
 800e686:	d1c7      	bne.n	800e618 <__sflush_r+0x34>
 800e688:	682b      	ldr	r3, [r5, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d0c4      	beq.n	800e618 <__sflush_r+0x34>
 800e68e:	2b1d      	cmp	r3, #29
 800e690:	d001      	beq.n	800e696 <__sflush_r+0xb2>
 800e692:	2b16      	cmp	r3, #22
 800e694:	d101      	bne.n	800e69a <__sflush_r+0xb6>
 800e696:	602f      	str	r7, [r5, #0]
 800e698:	e7b1      	b.n	800e5fe <__sflush_r+0x1a>
 800e69a:	89a3      	ldrh	r3, [r4, #12]
 800e69c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6a0:	81a3      	strh	r3, [r4, #12]
 800e6a2:	e7ad      	b.n	800e600 <__sflush_r+0x1c>
 800e6a4:	690f      	ldr	r7, [r1, #16]
 800e6a6:	2f00      	cmp	r7, #0
 800e6a8:	d0a9      	beq.n	800e5fe <__sflush_r+0x1a>
 800e6aa:	0793      	lsls	r3, r2, #30
 800e6ac:	680e      	ldr	r6, [r1, #0]
 800e6ae:	bf08      	it	eq
 800e6b0:	694b      	ldreq	r3, [r1, #20]
 800e6b2:	600f      	str	r7, [r1, #0]
 800e6b4:	bf18      	it	ne
 800e6b6:	2300      	movne	r3, #0
 800e6b8:	eba6 0807 	sub.w	r8, r6, r7
 800e6bc:	608b      	str	r3, [r1, #8]
 800e6be:	f1b8 0f00 	cmp.w	r8, #0
 800e6c2:	dd9c      	ble.n	800e5fe <__sflush_r+0x1a>
 800e6c4:	6a21      	ldr	r1, [r4, #32]
 800e6c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e6c8:	4643      	mov	r3, r8
 800e6ca:	463a      	mov	r2, r7
 800e6cc:	4628      	mov	r0, r5
 800e6ce:	47b0      	blx	r6
 800e6d0:	2800      	cmp	r0, #0
 800e6d2:	dc06      	bgt.n	800e6e2 <__sflush_r+0xfe>
 800e6d4:	89a3      	ldrh	r3, [r4, #12]
 800e6d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6da:	81a3      	strh	r3, [r4, #12]
 800e6dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6e0:	e78e      	b.n	800e600 <__sflush_r+0x1c>
 800e6e2:	4407      	add	r7, r0
 800e6e4:	eba8 0800 	sub.w	r8, r8, r0
 800e6e8:	e7e9      	b.n	800e6be <__sflush_r+0xda>
 800e6ea:	bf00      	nop
 800e6ec:	20400001 	.word	0x20400001

0800e6f0 <_fflush_r>:
 800e6f0:	b538      	push	{r3, r4, r5, lr}
 800e6f2:	690b      	ldr	r3, [r1, #16]
 800e6f4:	4605      	mov	r5, r0
 800e6f6:	460c      	mov	r4, r1
 800e6f8:	b913      	cbnz	r3, 800e700 <_fflush_r+0x10>
 800e6fa:	2500      	movs	r5, #0
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	bd38      	pop	{r3, r4, r5, pc}
 800e700:	b118      	cbz	r0, 800e70a <_fflush_r+0x1a>
 800e702:	6983      	ldr	r3, [r0, #24]
 800e704:	b90b      	cbnz	r3, 800e70a <_fflush_r+0x1a>
 800e706:	f000 f887 	bl	800e818 <__sinit>
 800e70a:	4b14      	ldr	r3, [pc, #80]	; (800e75c <_fflush_r+0x6c>)
 800e70c:	429c      	cmp	r4, r3
 800e70e:	d11b      	bne.n	800e748 <_fflush_r+0x58>
 800e710:	686c      	ldr	r4, [r5, #4]
 800e712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d0ef      	beq.n	800e6fa <_fflush_r+0xa>
 800e71a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e71c:	07d0      	lsls	r0, r2, #31
 800e71e:	d404      	bmi.n	800e72a <_fflush_r+0x3a>
 800e720:	0599      	lsls	r1, r3, #22
 800e722:	d402      	bmi.n	800e72a <_fflush_r+0x3a>
 800e724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e726:	f000 f915 	bl	800e954 <__retarget_lock_acquire_recursive>
 800e72a:	4628      	mov	r0, r5
 800e72c:	4621      	mov	r1, r4
 800e72e:	f7ff ff59 	bl	800e5e4 <__sflush_r>
 800e732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e734:	07da      	lsls	r2, r3, #31
 800e736:	4605      	mov	r5, r0
 800e738:	d4e0      	bmi.n	800e6fc <_fflush_r+0xc>
 800e73a:	89a3      	ldrh	r3, [r4, #12]
 800e73c:	059b      	lsls	r3, r3, #22
 800e73e:	d4dd      	bmi.n	800e6fc <_fflush_r+0xc>
 800e740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e742:	f000 f908 	bl	800e956 <__retarget_lock_release_recursive>
 800e746:	e7d9      	b.n	800e6fc <_fflush_r+0xc>
 800e748:	4b05      	ldr	r3, [pc, #20]	; (800e760 <_fflush_r+0x70>)
 800e74a:	429c      	cmp	r4, r3
 800e74c:	d101      	bne.n	800e752 <_fflush_r+0x62>
 800e74e:	68ac      	ldr	r4, [r5, #8]
 800e750:	e7df      	b.n	800e712 <_fflush_r+0x22>
 800e752:	4b04      	ldr	r3, [pc, #16]	; (800e764 <_fflush_r+0x74>)
 800e754:	429c      	cmp	r4, r3
 800e756:	bf08      	it	eq
 800e758:	68ec      	ldreq	r4, [r5, #12]
 800e75a:	e7da      	b.n	800e712 <_fflush_r+0x22>
 800e75c:	0800f214 	.word	0x0800f214
 800e760:	0800f234 	.word	0x0800f234
 800e764:	0800f1f4 	.word	0x0800f1f4

0800e768 <std>:
 800e768:	2300      	movs	r3, #0
 800e76a:	b510      	push	{r4, lr}
 800e76c:	4604      	mov	r4, r0
 800e76e:	e9c0 3300 	strd	r3, r3, [r0]
 800e772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e776:	6083      	str	r3, [r0, #8]
 800e778:	8181      	strh	r1, [r0, #12]
 800e77a:	6643      	str	r3, [r0, #100]	; 0x64
 800e77c:	81c2      	strh	r2, [r0, #14]
 800e77e:	6183      	str	r3, [r0, #24]
 800e780:	4619      	mov	r1, r3
 800e782:	2208      	movs	r2, #8
 800e784:	305c      	adds	r0, #92	; 0x5c
 800e786:	f7fb fe21 	bl	800a3cc <memset>
 800e78a:	4b05      	ldr	r3, [pc, #20]	; (800e7a0 <std+0x38>)
 800e78c:	6263      	str	r3, [r4, #36]	; 0x24
 800e78e:	4b05      	ldr	r3, [pc, #20]	; (800e7a4 <std+0x3c>)
 800e790:	62a3      	str	r3, [r4, #40]	; 0x28
 800e792:	4b05      	ldr	r3, [pc, #20]	; (800e7a8 <std+0x40>)
 800e794:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e796:	4b05      	ldr	r3, [pc, #20]	; (800e7ac <std+0x44>)
 800e798:	6224      	str	r4, [r4, #32]
 800e79a:	6323      	str	r3, [r4, #48]	; 0x30
 800e79c:	bd10      	pop	{r4, pc}
 800e79e:	bf00      	nop
 800e7a0:	0800eab9 	.word	0x0800eab9
 800e7a4:	0800eadb 	.word	0x0800eadb
 800e7a8:	0800eb13 	.word	0x0800eb13
 800e7ac:	0800eb37 	.word	0x0800eb37

0800e7b0 <_cleanup_r>:
 800e7b0:	4901      	ldr	r1, [pc, #4]	; (800e7b8 <_cleanup_r+0x8>)
 800e7b2:	f000 b8af 	b.w	800e914 <_fwalk_reent>
 800e7b6:	bf00      	nop
 800e7b8:	0800e6f1 	.word	0x0800e6f1

0800e7bc <__sfmoreglue>:
 800e7bc:	b570      	push	{r4, r5, r6, lr}
 800e7be:	1e4a      	subs	r2, r1, #1
 800e7c0:	2568      	movs	r5, #104	; 0x68
 800e7c2:	4355      	muls	r5, r2
 800e7c4:	460e      	mov	r6, r1
 800e7c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e7ca:	f7ff fa7d 	bl	800dcc8 <_malloc_r>
 800e7ce:	4604      	mov	r4, r0
 800e7d0:	b140      	cbz	r0, 800e7e4 <__sfmoreglue+0x28>
 800e7d2:	2100      	movs	r1, #0
 800e7d4:	e9c0 1600 	strd	r1, r6, [r0]
 800e7d8:	300c      	adds	r0, #12
 800e7da:	60a0      	str	r0, [r4, #8]
 800e7dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e7e0:	f7fb fdf4 	bl	800a3cc <memset>
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	bd70      	pop	{r4, r5, r6, pc}

0800e7e8 <__sfp_lock_acquire>:
 800e7e8:	4801      	ldr	r0, [pc, #4]	; (800e7f0 <__sfp_lock_acquire+0x8>)
 800e7ea:	f000 b8b3 	b.w	800e954 <__retarget_lock_acquire_recursive>
 800e7ee:	bf00      	nop
 800e7f0:	20001f74 	.word	0x20001f74

0800e7f4 <__sfp_lock_release>:
 800e7f4:	4801      	ldr	r0, [pc, #4]	; (800e7fc <__sfp_lock_release+0x8>)
 800e7f6:	f000 b8ae 	b.w	800e956 <__retarget_lock_release_recursive>
 800e7fa:	bf00      	nop
 800e7fc:	20001f74 	.word	0x20001f74

0800e800 <__sinit_lock_acquire>:
 800e800:	4801      	ldr	r0, [pc, #4]	; (800e808 <__sinit_lock_acquire+0x8>)
 800e802:	f000 b8a7 	b.w	800e954 <__retarget_lock_acquire_recursive>
 800e806:	bf00      	nop
 800e808:	20001f6f 	.word	0x20001f6f

0800e80c <__sinit_lock_release>:
 800e80c:	4801      	ldr	r0, [pc, #4]	; (800e814 <__sinit_lock_release+0x8>)
 800e80e:	f000 b8a2 	b.w	800e956 <__retarget_lock_release_recursive>
 800e812:	bf00      	nop
 800e814:	20001f6f 	.word	0x20001f6f

0800e818 <__sinit>:
 800e818:	b510      	push	{r4, lr}
 800e81a:	4604      	mov	r4, r0
 800e81c:	f7ff fff0 	bl	800e800 <__sinit_lock_acquire>
 800e820:	69a3      	ldr	r3, [r4, #24]
 800e822:	b11b      	cbz	r3, 800e82c <__sinit+0x14>
 800e824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e828:	f7ff bff0 	b.w	800e80c <__sinit_lock_release>
 800e82c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e830:	6523      	str	r3, [r4, #80]	; 0x50
 800e832:	4b13      	ldr	r3, [pc, #76]	; (800e880 <__sinit+0x68>)
 800e834:	4a13      	ldr	r2, [pc, #76]	; (800e884 <__sinit+0x6c>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	62a2      	str	r2, [r4, #40]	; 0x28
 800e83a:	42a3      	cmp	r3, r4
 800e83c:	bf04      	itt	eq
 800e83e:	2301      	moveq	r3, #1
 800e840:	61a3      	streq	r3, [r4, #24]
 800e842:	4620      	mov	r0, r4
 800e844:	f000 f820 	bl	800e888 <__sfp>
 800e848:	6060      	str	r0, [r4, #4]
 800e84a:	4620      	mov	r0, r4
 800e84c:	f000 f81c 	bl	800e888 <__sfp>
 800e850:	60a0      	str	r0, [r4, #8]
 800e852:	4620      	mov	r0, r4
 800e854:	f000 f818 	bl	800e888 <__sfp>
 800e858:	2200      	movs	r2, #0
 800e85a:	60e0      	str	r0, [r4, #12]
 800e85c:	2104      	movs	r1, #4
 800e85e:	6860      	ldr	r0, [r4, #4]
 800e860:	f7ff ff82 	bl	800e768 <std>
 800e864:	68a0      	ldr	r0, [r4, #8]
 800e866:	2201      	movs	r2, #1
 800e868:	2109      	movs	r1, #9
 800e86a:	f7ff ff7d 	bl	800e768 <std>
 800e86e:	68e0      	ldr	r0, [r4, #12]
 800e870:	2202      	movs	r2, #2
 800e872:	2112      	movs	r1, #18
 800e874:	f7ff ff78 	bl	800e768 <std>
 800e878:	2301      	movs	r3, #1
 800e87a:	61a3      	str	r3, [r4, #24]
 800e87c:	e7d2      	b.n	800e824 <__sinit+0xc>
 800e87e:	bf00      	nop
 800e880:	0800ed9c 	.word	0x0800ed9c
 800e884:	0800e7b1 	.word	0x0800e7b1

0800e888 <__sfp>:
 800e888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e88a:	4607      	mov	r7, r0
 800e88c:	f7ff ffac 	bl	800e7e8 <__sfp_lock_acquire>
 800e890:	4b1e      	ldr	r3, [pc, #120]	; (800e90c <__sfp+0x84>)
 800e892:	681e      	ldr	r6, [r3, #0]
 800e894:	69b3      	ldr	r3, [r6, #24]
 800e896:	b913      	cbnz	r3, 800e89e <__sfp+0x16>
 800e898:	4630      	mov	r0, r6
 800e89a:	f7ff ffbd 	bl	800e818 <__sinit>
 800e89e:	3648      	adds	r6, #72	; 0x48
 800e8a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e8a4:	3b01      	subs	r3, #1
 800e8a6:	d503      	bpl.n	800e8b0 <__sfp+0x28>
 800e8a8:	6833      	ldr	r3, [r6, #0]
 800e8aa:	b30b      	cbz	r3, 800e8f0 <__sfp+0x68>
 800e8ac:	6836      	ldr	r6, [r6, #0]
 800e8ae:	e7f7      	b.n	800e8a0 <__sfp+0x18>
 800e8b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e8b4:	b9d5      	cbnz	r5, 800e8ec <__sfp+0x64>
 800e8b6:	4b16      	ldr	r3, [pc, #88]	; (800e910 <__sfp+0x88>)
 800e8b8:	60e3      	str	r3, [r4, #12]
 800e8ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e8be:	6665      	str	r5, [r4, #100]	; 0x64
 800e8c0:	f000 f847 	bl	800e952 <__retarget_lock_init_recursive>
 800e8c4:	f7ff ff96 	bl	800e7f4 <__sfp_lock_release>
 800e8c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e8cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e8d0:	6025      	str	r5, [r4, #0]
 800e8d2:	61a5      	str	r5, [r4, #24]
 800e8d4:	2208      	movs	r2, #8
 800e8d6:	4629      	mov	r1, r5
 800e8d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e8dc:	f7fb fd76 	bl	800a3cc <memset>
 800e8e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e8e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8ec:	3468      	adds	r4, #104	; 0x68
 800e8ee:	e7d9      	b.n	800e8a4 <__sfp+0x1c>
 800e8f0:	2104      	movs	r1, #4
 800e8f2:	4638      	mov	r0, r7
 800e8f4:	f7ff ff62 	bl	800e7bc <__sfmoreglue>
 800e8f8:	4604      	mov	r4, r0
 800e8fa:	6030      	str	r0, [r6, #0]
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	d1d5      	bne.n	800e8ac <__sfp+0x24>
 800e900:	f7ff ff78 	bl	800e7f4 <__sfp_lock_release>
 800e904:	230c      	movs	r3, #12
 800e906:	603b      	str	r3, [r7, #0]
 800e908:	e7ee      	b.n	800e8e8 <__sfp+0x60>
 800e90a:	bf00      	nop
 800e90c:	0800ed9c 	.word	0x0800ed9c
 800e910:	ffff0001 	.word	0xffff0001

0800e914 <_fwalk_reent>:
 800e914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e918:	4606      	mov	r6, r0
 800e91a:	4688      	mov	r8, r1
 800e91c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e920:	2700      	movs	r7, #0
 800e922:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e926:	f1b9 0901 	subs.w	r9, r9, #1
 800e92a:	d505      	bpl.n	800e938 <_fwalk_reent+0x24>
 800e92c:	6824      	ldr	r4, [r4, #0]
 800e92e:	2c00      	cmp	r4, #0
 800e930:	d1f7      	bne.n	800e922 <_fwalk_reent+0xe>
 800e932:	4638      	mov	r0, r7
 800e934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e938:	89ab      	ldrh	r3, [r5, #12]
 800e93a:	2b01      	cmp	r3, #1
 800e93c:	d907      	bls.n	800e94e <_fwalk_reent+0x3a>
 800e93e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e942:	3301      	adds	r3, #1
 800e944:	d003      	beq.n	800e94e <_fwalk_reent+0x3a>
 800e946:	4629      	mov	r1, r5
 800e948:	4630      	mov	r0, r6
 800e94a:	47c0      	blx	r8
 800e94c:	4307      	orrs	r7, r0
 800e94e:	3568      	adds	r5, #104	; 0x68
 800e950:	e7e9      	b.n	800e926 <_fwalk_reent+0x12>

0800e952 <__retarget_lock_init_recursive>:
 800e952:	4770      	bx	lr

0800e954 <__retarget_lock_acquire_recursive>:
 800e954:	4770      	bx	lr

0800e956 <__retarget_lock_release_recursive>:
 800e956:	4770      	bx	lr

0800e958 <__swhatbuf_r>:
 800e958:	b570      	push	{r4, r5, r6, lr}
 800e95a:	460e      	mov	r6, r1
 800e95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e960:	2900      	cmp	r1, #0
 800e962:	b096      	sub	sp, #88	; 0x58
 800e964:	4614      	mov	r4, r2
 800e966:	461d      	mov	r5, r3
 800e968:	da07      	bge.n	800e97a <__swhatbuf_r+0x22>
 800e96a:	2300      	movs	r3, #0
 800e96c:	602b      	str	r3, [r5, #0]
 800e96e:	89b3      	ldrh	r3, [r6, #12]
 800e970:	061a      	lsls	r2, r3, #24
 800e972:	d410      	bmi.n	800e996 <__swhatbuf_r+0x3e>
 800e974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e978:	e00e      	b.n	800e998 <__swhatbuf_r+0x40>
 800e97a:	466a      	mov	r2, sp
 800e97c:	f000 f902 	bl	800eb84 <_fstat_r>
 800e980:	2800      	cmp	r0, #0
 800e982:	dbf2      	blt.n	800e96a <__swhatbuf_r+0x12>
 800e984:	9a01      	ldr	r2, [sp, #4]
 800e986:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e98a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e98e:	425a      	negs	r2, r3
 800e990:	415a      	adcs	r2, r3
 800e992:	602a      	str	r2, [r5, #0]
 800e994:	e7ee      	b.n	800e974 <__swhatbuf_r+0x1c>
 800e996:	2340      	movs	r3, #64	; 0x40
 800e998:	2000      	movs	r0, #0
 800e99a:	6023      	str	r3, [r4, #0]
 800e99c:	b016      	add	sp, #88	; 0x58
 800e99e:	bd70      	pop	{r4, r5, r6, pc}

0800e9a0 <__smakebuf_r>:
 800e9a0:	898b      	ldrh	r3, [r1, #12]
 800e9a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e9a4:	079d      	lsls	r5, r3, #30
 800e9a6:	4606      	mov	r6, r0
 800e9a8:	460c      	mov	r4, r1
 800e9aa:	d507      	bpl.n	800e9bc <__smakebuf_r+0x1c>
 800e9ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e9b0:	6023      	str	r3, [r4, #0]
 800e9b2:	6123      	str	r3, [r4, #16]
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	6163      	str	r3, [r4, #20]
 800e9b8:	b002      	add	sp, #8
 800e9ba:	bd70      	pop	{r4, r5, r6, pc}
 800e9bc:	ab01      	add	r3, sp, #4
 800e9be:	466a      	mov	r2, sp
 800e9c0:	f7ff ffca 	bl	800e958 <__swhatbuf_r>
 800e9c4:	9900      	ldr	r1, [sp, #0]
 800e9c6:	4605      	mov	r5, r0
 800e9c8:	4630      	mov	r0, r6
 800e9ca:	f7ff f97d 	bl	800dcc8 <_malloc_r>
 800e9ce:	b948      	cbnz	r0, 800e9e4 <__smakebuf_r+0x44>
 800e9d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9d4:	059a      	lsls	r2, r3, #22
 800e9d6:	d4ef      	bmi.n	800e9b8 <__smakebuf_r+0x18>
 800e9d8:	f023 0303 	bic.w	r3, r3, #3
 800e9dc:	f043 0302 	orr.w	r3, r3, #2
 800e9e0:	81a3      	strh	r3, [r4, #12]
 800e9e2:	e7e3      	b.n	800e9ac <__smakebuf_r+0xc>
 800e9e4:	4b0d      	ldr	r3, [pc, #52]	; (800ea1c <__smakebuf_r+0x7c>)
 800e9e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e9e8:	89a3      	ldrh	r3, [r4, #12]
 800e9ea:	6020      	str	r0, [r4, #0]
 800e9ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9f0:	81a3      	strh	r3, [r4, #12]
 800e9f2:	9b00      	ldr	r3, [sp, #0]
 800e9f4:	6163      	str	r3, [r4, #20]
 800e9f6:	9b01      	ldr	r3, [sp, #4]
 800e9f8:	6120      	str	r0, [r4, #16]
 800e9fa:	b15b      	cbz	r3, 800ea14 <__smakebuf_r+0x74>
 800e9fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea00:	4630      	mov	r0, r6
 800ea02:	f000 f8d1 	bl	800eba8 <_isatty_r>
 800ea06:	b128      	cbz	r0, 800ea14 <__smakebuf_r+0x74>
 800ea08:	89a3      	ldrh	r3, [r4, #12]
 800ea0a:	f023 0303 	bic.w	r3, r3, #3
 800ea0e:	f043 0301 	orr.w	r3, r3, #1
 800ea12:	81a3      	strh	r3, [r4, #12]
 800ea14:	89a0      	ldrh	r0, [r4, #12]
 800ea16:	4305      	orrs	r5, r0
 800ea18:	81a5      	strh	r5, [r4, #12]
 800ea1a:	e7cd      	b.n	800e9b8 <__smakebuf_r+0x18>
 800ea1c:	0800e7b1 	.word	0x0800e7b1

0800ea20 <_malloc_usable_size_r>:
 800ea20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea24:	1f18      	subs	r0, r3, #4
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	bfbc      	itt	lt
 800ea2a:	580b      	ldrlt	r3, [r1, r0]
 800ea2c:	18c0      	addlt	r0, r0, r3
 800ea2e:	4770      	bx	lr

0800ea30 <_raise_r>:
 800ea30:	291f      	cmp	r1, #31
 800ea32:	b538      	push	{r3, r4, r5, lr}
 800ea34:	4604      	mov	r4, r0
 800ea36:	460d      	mov	r5, r1
 800ea38:	d904      	bls.n	800ea44 <_raise_r+0x14>
 800ea3a:	2316      	movs	r3, #22
 800ea3c:	6003      	str	r3, [r0, #0]
 800ea3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea42:	bd38      	pop	{r3, r4, r5, pc}
 800ea44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ea46:	b112      	cbz	r2, 800ea4e <_raise_r+0x1e>
 800ea48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea4c:	b94b      	cbnz	r3, 800ea62 <_raise_r+0x32>
 800ea4e:	4620      	mov	r0, r4
 800ea50:	f000 f830 	bl	800eab4 <_getpid_r>
 800ea54:	462a      	mov	r2, r5
 800ea56:	4601      	mov	r1, r0
 800ea58:	4620      	mov	r0, r4
 800ea5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea5e:	f000 b817 	b.w	800ea90 <_kill_r>
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d00a      	beq.n	800ea7c <_raise_r+0x4c>
 800ea66:	1c59      	adds	r1, r3, #1
 800ea68:	d103      	bne.n	800ea72 <_raise_r+0x42>
 800ea6a:	2316      	movs	r3, #22
 800ea6c:	6003      	str	r3, [r0, #0]
 800ea6e:	2001      	movs	r0, #1
 800ea70:	e7e7      	b.n	800ea42 <_raise_r+0x12>
 800ea72:	2400      	movs	r4, #0
 800ea74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ea78:	4628      	mov	r0, r5
 800ea7a:	4798      	blx	r3
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	e7e0      	b.n	800ea42 <_raise_r+0x12>

0800ea80 <raise>:
 800ea80:	4b02      	ldr	r3, [pc, #8]	; (800ea8c <raise+0xc>)
 800ea82:	4601      	mov	r1, r0
 800ea84:	6818      	ldr	r0, [r3, #0]
 800ea86:	f7ff bfd3 	b.w	800ea30 <_raise_r>
 800ea8a:	bf00      	nop
 800ea8c:	2000001c 	.word	0x2000001c

0800ea90 <_kill_r>:
 800ea90:	b538      	push	{r3, r4, r5, lr}
 800ea92:	4d07      	ldr	r5, [pc, #28]	; (800eab0 <_kill_r+0x20>)
 800ea94:	2300      	movs	r3, #0
 800ea96:	4604      	mov	r4, r0
 800ea98:	4608      	mov	r0, r1
 800ea9a:	4611      	mov	r1, r2
 800ea9c:	602b      	str	r3, [r5, #0]
 800ea9e:	f7f3 fbf5 	bl	800228c <_kill>
 800eaa2:	1c43      	adds	r3, r0, #1
 800eaa4:	d102      	bne.n	800eaac <_kill_r+0x1c>
 800eaa6:	682b      	ldr	r3, [r5, #0]
 800eaa8:	b103      	cbz	r3, 800eaac <_kill_r+0x1c>
 800eaaa:	6023      	str	r3, [r4, #0]
 800eaac:	bd38      	pop	{r3, r4, r5, pc}
 800eaae:	bf00      	nop
 800eab0:	20001f68 	.word	0x20001f68

0800eab4 <_getpid_r>:
 800eab4:	f7f3 bbe2 	b.w	800227c <_getpid>

0800eab8 <__sread>:
 800eab8:	b510      	push	{r4, lr}
 800eaba:	460c      	mov	r4, r1
 800eabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eac0:	f000 f894 	bl	800ebec <_read_r>
 800eac4:	2800      	cmp	r0, #0
 800eac6:	bfab      	itete	ge
 800eac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eaca:	89a3      	ldrhlt	r3, [r4, #12]
 800eacc:	181b      	addge	r3, r3, r0
 800eace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ead2:	bfac      	ite	ge
 800ead4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ead6:	81a3      	strhlt	r3, [r4, #12]
 800ead8:	bd10      	pop	{r4, pc}

0800eada <__swrite>:
 800eada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eade:	461f      	mov	r7, r3
 800eae0:	898b      	ldrh	r3, [r1, #12]
 800eae2:	05db      	lsls	r3, r3, #23
 800eae4:	4605      	mov	r5, r0
 800eae6:	460c      	mov	r4, r1
 800eae8:	4616      	mov	r6, r2
 800eaea:	d505      	bpl.n	800eaf8 <__swrite+0x1e>
 800eaec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaf0:	2302      	movs	r3, #2
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f000 f868 	bl	800ebc8 <_lseek_r>
 800eaf8:	89a3      	ldrh	r3, [r4, #12]
 800eafa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eafe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb02:	81a3      	strh	r3, [r4, #12]
 800eb04:	4632      	mov	r2, r6
 800eb06:	463b      	mov	r3, r7
 800eb08:	4628      	mov	r0, r5
 800eb0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb0e:	f000 b817 	b.w	800eb40 <_write_r>

0800eb12 <__sseek>:
 800eb12:	b510      	push	{r4, lr}
 800eb14:	460c      	mov	r4, r1
 800eb16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb1a:	f000 f855 	bl	800ebc8 <_lseek_r>
 800eb1e:	1c43      	adds	r3, r0, #1
 800eb20:	89a3      	ldrh	r3, [r4, #12]
 800eb22:	bf15      	itete	ne
 800eb24:	6560      	strne	r0, [r4, #84]	; 0x54
 800eb26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eb2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eb2e:	81a3      	strheq	r3, [r4, #12]
 800eb30:	bf18      	it	ne
 800eb32:	81a3      	strhne	r3, [r4, #12]
 800eb34:	bd10      	pop	{r4, pc}

0800eb36 <__sclose>:
 800eb36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb3a:	f000 b813 	b.w	800eb64 <_close_r>
	...

0800eb40 <_write_r>:
 800eb40:	b538      	push	{r3, r4, r5, lr}
 800eb42:	4d07      	ldr	r5, [pc, #28]	; (800eb60 <_write_r+0x20>)
 800eb44:	4604      	mov	r4, r0
 800eb46:	4608      	mov	r0, r1
 800eb48:	4611      	mov	r1, r2
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	602a      	str	r2, [r5, #0]
 800eb4e:	461a      	mov	r2, r3
 800eb50:	f7f3 fbd3 	bl	80022fa <_write>
 800eb54:	1c43      	adds	r3, r0, #1
 800eb56:	d102      	bne.n	800eb5e <_write_r+0x1e>
 800eb58:	682b      	ldr	r3, [r5, #0]
 800eb5a:	b103      	cbz	r3, 800eb5e <_write_r+0x1e>
 800eb5c:	6023      	str	r3, [r4, #0]
 800eb5e:	bd38      	pop	{r3, r4, r5, pc}
 800eb60:	20001f68 	.word	0x20001f68

0800eb64 <_close_r>:
 800eb64:	b538      	push	{r3, r4, r5, lr}
 800eb66:	4d06      	ldr	r5, [pc, #24]	; (800eb80 <_close_r+0x1c>)
 800eb68:	2300      	movs	r3, #0
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	4608      	mov	r0, r1
 800eb6e:	602b      	str	r3, [r5, #0]
 800eb70:	f7f3 fbdf 	bl	8002332 <_close>
 800eb74:	1c43      	adds	r3, r0, #1
 800eb76:	d102      	bne.n	800eb7e <_close_r+0x1a>
 800eb78:	682b      	ldr	r3, [r5, #0]
 800eb7a:	b103      	cbz	r3, 800eb7e <_close_r+0x1a>
 800eb7c:	6023      	str	r3, [r4, #0]
 800eb7e:	bd38      	pop	{r3, r4, r5, pc}
 800eb80:	20001f68 	.word	0x20001f68

0800eb84 <_fstat_r>:
 800eb84:	b538      	push	{r3, r4, r5, lr}
 800eb86:	4d07      	ldr	r5, [pc, #28]	; (800eba4 <_fstat_r+0x20>)
 800eb88:	2300      	movs	r3, #0
 800eb8a:	4604      	mov	r4, r0
 800eb8c:	4608      	mov	r0, r1
 800eb8e:	4611      	mov	r1, r2
 800eb90:	602b      	str	r3, [r5, #0]
 800eb92:	f7f3 fbda 	bl	800234a <_fstat>
 800eb96:	1c43      	adds	r3, r0, #1
 800eb98:	d102      	bne.n	800eba0 <_fstat_r+0x1c>
 800eb9a:	682b      	ldr	r3, [r5, #0]
 800eb9c:	b103      	cbz	r3, 800eba0 <_fstat_r+0x1c>
 800eb9e:	6023      	str	r3, [r4, #0]
 800eba0:	bd38      	pop	{r3, r4, r5, pc}
 800eba2:	bf00      	nop
 800eba4:	20001f68 	.word	0x20001f68

0800eba8 <_isatty_r>:
 800eba8:	b538      	push	{r3, r4, r5, lr}
 800ebaa:	4d06      	ldr	r5, [pc, #24]	; (800ebc4 <_isatty_r+0x1c>)
 800ebac:	2300      	movs	r3, #0
 800ebae:	4604      	mov	r4, r0
 800ebb0:	4608      	mov	r0, r1
 800ebb2:	602b      	str	r3, [r5, #0]
 800ebb4:	f7f3 fbd9 	bl	800236a <_isatty>
 800ebb8:	1c43      	adds	r3, r0, #1
 800ebba:	d102      	bne.n	800ebc2 <_isatty_r+0x1a>
 800ebbc:	682b      	ldr	r3, [r5, #0]
 800ebbe:	b103      	cbz	r3, 800ebc2 <_isatty_r+0x1a>
 800ebc0:	6023      	str	r3, [r4, #0]
 800ebc2:	bd38      	pop	{r3, r4, r5, pc}
 800ebc4:	20001f68 	.word	0x20001f68

0800ebc8 <_lseek_r>:
 800ebc8:	b538      	push	{r3, r4, r5, lr}
 800ebca:	4d07      	ldr	r5, [pc, #28]	; (800ebe8 <_lseek_r+0x20>)
 800ebcc:	4604      	mov	r4, r0
 800ebce:	4608      	mov	r0, r1
 800ebd0:	4611      	mov	r1, r2
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	602a      	str	r2, [r5, #0]
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	f7f3 fbd2 	bl	8002380 <_lseek>
 800ebdc:	1c43      	adds	r3, r0, #1
 800ebde:	d102      	bne.n	800ebe6 <_lseek_r+0x1e>
 800ebe0:	682b      	ldr	r3, [r5, #0]
 800ebe2:	b103      	cbz	r3, 800ebe6 <_lseek_r+0x1e>
 800ebe4:	6023      	str	r3, [r4, #0]
 800ebe6:	bd38      	pop	{r3, r4, r5, pc}
 800ebe8:	20001f68 	.word	0x20001f68

0800ebec <_read_r>:
 800ebec:	b538      	push	{r3, r4, r5, lr}
 800ebee:	4d07      	ldr	r5, [pc, #28]	; (800ec0c <_read_r+0x20>)
 800ebf0:	4604      	mov	r4, r0
 800ebf2:	4608      	mov	r0, r1
 800ebf4:	4611      	mov	r1, r2
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	602a      	str	r2, [r5, #0]
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	f7f3 fb60 	bl	80022c0 <_read>
 800ec00:	1c43      	adds	r3, r0, #1
 800ec02:	d102      	bne.n	800ec0a <_read_r+0x1e>
 800ec04:	682b      	ldr	r3, [r5, #0]
 800ec06:	b103      	cbz	r3, 800ec0a <_read_r+0x1e>
 800ec08:	6023      	str	r3, [r4, #0]
 800ec0a:	bd38      	pop	{r3, r4, r5, pc}
 800ec0c:	20001f68 	.word	0x20001f68

0800ec10 <sqrtf>:
 800ec10:	b508      	push	{r3, lr}
 800ec12:	ed2d 8b02 	vpush	{d8}
 800ec16:	eeb0 8a40 	vmov.f32	s16, s0
 800ec1a:	f000 f81f 	bl	800ec5c <__ieee754_sqrtf>
 800ec1e:	4b0d      	ldr	r3, [pc, #52]	; (800ec54 <sqrtf+0x44>)
 800ec20:	f993 3000 	ldrsb.w	r3, [r3]
 800ec24:	3301      	adds	r3, #1
 800ec26:	d011      	beq.n	800ec4c <sqrtf+0x3c>
 800ec28:	eeb4 8a48 	vcmp.f32	s16, s16
 800ec2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec30:	d60c      	bvs.n	800ec4c <sqrtf+0x3c>
 800ec32:	eddf 8a09 	vldr	s17, [pc, #36]	; 800ec58 <sqrtf+0x48>
 800ec36:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ec3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec3e:	d505      	bpl.n	800ec4c <sqrtf+0x3c>
 800ec40:	f7fb fb8c 	bl	800a35c <__errno>
 800ec44:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ec48:	2321      	movs	r3, #33	; 0x21
 800ec4a:	6003      	str	r3, [r0, #0]
 800ec4c:	ecbd 8b02 	vpop	{d8}
 800ec50:	bd08      	pop	{r3, pc}
 800ec52:	bf00      	nop
 800ec54:	200001f0 	.word	0x200001f0
 800ec58:	00000000 	.word	0x00000000

0800ec5c <__ieee754_sqrtf>:
 800ec5c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ec60:	4770      	bx	lr
	...

0800ec64 <_init>:
 800ec64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec66:	bf00      	nop
 800ec68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec6a:	bc08      	pop	{r3}
 800ec6c:	469e      	mov	lr, r3
 800ec6e:	4770      	bx	lr

0800ec70 <_fini>:
 800ec70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec72:	bf00      	nop
 800ec74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec76:	bc08      	pop	{r3}
 800ec78:	469e      	mov	lr, r3
 800ec7a:	4770      	bx	lr
